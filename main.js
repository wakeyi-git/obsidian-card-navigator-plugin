/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CardNavigatorPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian7 = require("obsidian");

// src/ui/cardNavigator.ts
var import_obsidian5 = require("obsidian");

// src/ui/toolbar/toolbar.ts
var import_obsidian2 = require("obsidian");

// src/ui/toolbar/toolbarActions.ts
var import_obsidian = require("obsidian");
var FolderSuggestModal = class extends import_obsidian.FuzzySuggestModal {
  constructor(plugin, onSelect) {
    super(plugin.app);
    this.plugin = plugin;
    this.onSelect = onSelect;
  }
  getItems() {
    return this.plugin.app.vault.getAllLoadedFiles().filter((file) => file instanceof import_obsidian.TFolder);
  }
  getItemText(folder) {
    return folder.path;
  }
  onChooseItem(folder) {
    this.onSelect(folder);
  }
};
function toggleSort(plugin) {
  let sortPopup = document.querySelector(".card-navigator-sort-popup");
  if (!sortPopup) {
    sortPopup = document.createElement("div");
    sortPopup.className = "card-navigator-sort-popup";
    const currentSort = `${plugin.settings.sortCriterion}_${plugin.settings.sortOrder}`;
    const addSortOption = (value, label) => {
      const option = document.createElement("button");
      option.textContent = label;
      option.classList.toggle("active", currentSort === value);
      option.addEventListener("click", async () => {
        const [criterion, order] = value.split("_");
        plugin.settings.sortCriterion = criterion;
        plugin.settings.sortOrder = order;
        await plugin.saveSettings();
        plugin.refreshViews();
        sortPopup.remove();
      });
      sortPopup.appendChild(option);
    };
    addSortOption("fileName_asc", "File name (A to Z)");
    addSortOption("fileName_desc", "File name (Z to A)");
    addSortOption("lastModified_desc", "Last modified (newest first)");
    addSortOption("lastModified_asc", "Last modified (oldest first)");
    addSortOption("created_desc", "Created (newest first)");
    addSortOption("created_asc", "Created (oldest first)");
    const toolbarEl = document.querySelector(".card-navigator-toolbar-container");
    if (toolbarEl) {
      toolbarEl.insertAdjacentElement("afterend", sortPopup);
      document.addEventListener("click", function onClickOutside(event) {
        if (sortPopup && !sortPopup.contains(event.target) && !toolbarEl.contains(event.target)) {
          sortPopup.remove();
          document.removeEventListener("click", onClickOutside);
        }
      });
    }
  } else {
    sortPopup.remove();
  }
}
function toggleSettings(plugin) {
  let settingsPopup = document.querySelector(".card-navigator-settings-popup");
  if (!settingsPopup) {
    settingsPopup = document.createElement("div");
    settingsPopup.className = "card-navigator-settings-popup";
    const cardsPerViewSetting = document.createElement("input");
    cardsPerViewSetting.type = "range";
    cardsPerViewSetting.min = "1";
    cardsPerViewSetting.max = "10";
    cardsPerViewSetting.value = plugin.settings.cardsPerView.toString();
    cardsPerViewSetting.addEventListener("input", (e) => {
      const value = e.target.value;
      plugin.settings.cardsPerView = parseInt(value, 10);
      plugin.saveSettings();
      plugin.refreshViews();
    });
    const cardsPerViewLabel = document.createElement("label");
    cardsPerViewLabel.textContent = "Cards Per View:";
    settingsPopup.appendChild(cardsPerViewLabel);
    settingsPopup.appendChild(cardsPerViewSetting);
    const fontSizeSetting = document.createElement("input");
    fontSizeSetting.type = "range";
    fontSizeSetting.min = "10";
    fontSizeSetting.max = "30";
    fontSizeSetting.value = plugin.settings.contentSize.toString();
    fontSizeSetting.addEventListener("input", (e) => {
      const value = e.target.value;
      plugin.settings.contentSize = parseInt(value, 10);
      plugin.saveSettings();
      plugin.refreshViews();
    });
    const fontSizeLabel = document.createElement("label");
    fontSizeLabel.textContent = "Content Font Size:";
    settingsPopup.appendChild(fontSizeLabel);
    settingsPopup.appendChild(fontSizeSetting);
    const createToggle = (labelText, initialValue, onChange) => {
      const container = document.createElement("div");
      const label = document.createElement("label");
      label.textContent = labelText;
      const toggle = document.createElement("input");
      toggle.type = "checkbox";
      toggle.checked = initialValue;
      toggle.addEventListener("change", (e) => {
        onChange(e.target.checked);
        plugin.saveSettings();
        plugin.refreshViews();
      });
      container.appendChild(label);
      container.appendChild(toggle);
      return container;
    };
    const fileNameToggle = createToggle("Show File Name", plugin.settings.showFileName, (value) => {
      plugin.settings.showFileName = value;
    });
    settingsPopup.appendChild(fileNameToggle);
    const firstHeaderToggle = createToggle("Show First Header", plugin.settings.showFirstHeader, (value) => {
      plugin.settings.showFirstHeader = value;
    });
    settingsPopup.appendChild(firstHeaderToggle);
    const contentToggle = createToggle("Show Content", plugin.settings.showContent, (value) => {
      plugin.settings.showContent = value;
    });
    settingsPopup.appendChild(contentToggle);
    const dragDropContentToggle = createToggle("Drag and Drop Content", plugin.settings.dragDropContent, (value) => {
      plugin.settings.dragDropContent = value;
    });
    settingsPopup.appendChild(dragDropContentToggle);
    const toolbarEl = document.querySelector(".card-navigator-toolbar-container");
    if (toolbarEl) {
      toolbarEl.insertAdjacentElement("afterend", settingsPopup);
      document.addEventListener("click", function onClickOutside(event) {
        if (settingsPopup && !settingsPopup.contains(event.target) && !toolbarEl.contains(event.target)) {
          settingsPopup.remove();
          document.removeEventListener("click", onClickOutside);
        }
      });
    }
  } else {
    settingsPopup.classList.toggle("hidden");
  }
}

// src/ui/toolbar/toolbar.ts
var Toolbar = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.containerEl = void 0;
    this.isVertical = false;
  }
  initialize(containerEl) {
    this.containerEl = containerEl;
    this.createToolbar();
  }
  setOrientation(isVertical) {
    if (this.isVertical !== isVertical) {
      this.isVertical = isVertical;
      this.updateToolbarStyle();
      this.createToolbar();
    }
  }
  updateToolbarStyle() {
    if (this.containerEl) {
      this.containerEl.classList.toggle("vertical", this.isVertical);
      this.containerEl.classList.toggle("horizontal", !this.isVertical);
    }
  }
  createToolbar() {
    if (!this.containerEl) {
      return;
    }
    this.containerEl.empty();
    const toolbarContainer = document.createElement("div");
    toolbarContainer.className = "card-navigator-toolbar-container";
    const searchContainer = this.createSearchContainer();
    const separator = this.createSeparator();
    const actionIconsContainer = this.createActionIconsContainer();
    toolbarContainer.appendChild(searchContainer);
    toolbarContainer.appendChild(separator);
    toolbarContainer.appendChild(actionIconsContainer);
    this.containerEl.appendChild(toolbarContainer);
  }
  createSearchContainer() {
    const container = document.createElement("div");
    container.className = "card-navigator-search-container";
    const input = document.createElement("input");
    input.type = "text";
    input.placeholder = "Search...";
    input.className = "card-navigator-search-input";
    input.addEventListener("input", (0, import_obsidian2.debounce)(async (e) => {
      const searchTerm = e.target.value;
      const view = this.plugin.app.workspace.getLeavesOfType("card-navigator-view")[0].view;
      await view.cardContainer.searchCards(searchTerm);
    }, 300));
    container.appendChild(input);
    return container;
  }
  createActionIconsContainer() {
    const container = document.createElement("div");
    container.className = "card-navigator-action-icons-container";
    const icons = [
      { name: "folder", label: "Select folder", action: () => this.openFolderSelector() },
      { name: "arrow-up-narrow-wide", label: "Sort cards", action: () => toggleSort(this.plugin) },
      { name: "settings", label: "Settings", action: () => toggleSettings(this.plugin) }
    ];
    icons.forEach((icon) => {
      const iconElement = this.createToolbarIcon(icon.name, icon.label, icon.action);
      if (icon.name === "arrow-up-narrow-wide") {
        iconElement.classList.toggle(
          "active",
          this.plugin.settings.sortCriterion !== "fileName" || this.plugin.settings.sortOrder !== "asc"
        );
      }
      container.appendChild(iconElement);
    });
    return container;
  }
  createToolbarIcon(iconName, ariaLabel, action) {
    const icon = document.createElement("div");
    icon.className = "clickable-icon";
    icon.setAttribute("aria-label", ariaLabel);
    (0, import_obsidian2.setIcon)(icon, iconName);
    icon.addEventListener("click", action);
    return icon;
  }
  createSeparator() {
    const separator = document.createElement("div");
    separator.className = "toolbar-separator";
    return separator;
  }
  openFolderSelector() {
    new FolderSuggestModal(this.plugin, (folder) => {
      const view = this.plugin.app.workspace.getActiveViewOfType(CardNavigator);
      if (view) {
        view.cardContainer.displayCardsForFolder(folder);
      }
    }).open();
  }
  refresh() {
  }
  onClose() {
  }
};

// src/ui/cardContainer/cardContainer.ts
var import_obsidian4 = require("obsidian");

// src/ui/cardContainer/cardMaker.ts
var import_obsidian3 = require("obsidian");

// src/common/utils.ts
function debounce2(func, waitFor) {
  let timeout = null;
  return (...args) => {
    if (timeout) {
      clearTimeout(timeout);
    }
    return new Promise((resolve) => {
      timeout = setTimeout(() => {
        const result = func(...args);
        resolve(result);
      }, waitFor);
    });
  };
}
function separateFrontmatterAndContent(content) {
  const frontmatterRegex = /^---\s*\n([\s\S]*?)\n---\s*\n/;
  const match = content.match(frontmatterRegex);
  return match ? { frontmatter: match[1], cleanContent: content.slice(match[0].length).trim() } : { frontmatter: null, cleanContent: content.trim() };
}
function sortFiles(files, criterion, order) {
  return files.sort((a, b) => {
    let comparison = 0;
    switch (criterion) {
      case "fileName":
        comparison = a.basename.localeCompare(b.basename, void 0, { numeric: true, sensitivity: "base" });
        break;
      case "lastModified":
        comparison = a.stat.mtime - b.stat.mtime;
        break;
      case "created":
        comparison = a.stat.ctime - b.stat.ctime;
        break;
    }
    return order === "asc" ? comparison : -comparison;
  });
}
function calculateCardSize(isVertical, containerRect, cardsPerView, padding = 15) {
  const { width: leafWidth, height: leafHeight } = containerRect;
  let cardWidth, cardHeight;
  if (isVertical) {
    cardWidth = leafWidth - 2 * padding;
    cardHeight = leafHeight / cardsPerView;
  } else {
    cardWidth = leafWidth / cardsPerView;
    cardHeight = leafHeight - 2 * padding - 80;
  }
  return { cardWidth, cardHeight };
}
function setContainerSize(containerEl, cardWidth, cardHeight, cardsPerView, isVertical) {
  if (isVertical) {
    containerEl.style.flexDirection = "column";
    containerEl.style.width = `${cardWidth}px`;
    containerEl.style.height = `${cardHeight * cardsPerView}px`;
  } else {
    containerEl.style.flexDirection = "row";
    containerEl.style.width = `${cardWidth * cardsPerView - 30}px`;
    containerEl.style.height = `${cardHeight}px`;
  }
}

// src/ui/cardContainer/cardMaker.ts
var CardMaker = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  async getCardsForActiveFile(activeFile) {
    const folder = activeFile.parent;
    if (!folder) {
      return [];
    }
    const files = folder.children.filter((file) => file instanceof import_obsidian3.TFile);
    const sortedFiles = sortFiles(
      files,
      this.plugin.settings.sortCriterion,
      this.plugin.settings.sortOrder
    );
    return await Promise.all(sortedFiles.map((file) => this.createCard(file)));
  }
  async createCard(file) {
    const content = await this.plugin.app.vault.cachedRead(file);
    const { cleanContent } = separateFrontmatterAndContent(content);
    const contentWithoutHeader = this.removeFirstHeader(cleanContent);
    return {
      file,
      fileName: this.plugin.settings.showFileName ? file.basename : void 0,
      firstHeader: this.plugin.settings.showFirstHeader ? this.findFirstHeader(cleanContent) : void 0,
      content: this.plugin.settings.showContent ? this.truncateContent(contentWithoutHeader) : void 0
    };
  }
  removeFirstHeader(content) {
    const headerRegex = /^#+\s+(.+)$/m;
    return content.replace(headerRegex, "").trim();
  }
  findFirstHeader(content) {
    const headerRegex = /^#+\s+(.+)$/m;
    const match = content.match(headerRegex);
    return match ? match[1].trim() : void 0;
  }
  truncateContent(content) {
    const maxLength = this.plugin.settings.contentLength * 100;
    return content.length <= maxLength ? content : content.slice(0, maxLength) + "...";
  }
  createCardElement(card) {
    const cardElement = document.createElement("div");
    cardElement.className = "card-navigator-card";
    if (this.plugin.settings.showFileName && card.fileName) {
      const fileNameEl = cardElement.createEl("h3", { text: card.fileName });
      fileNameEl.className = "card-navigator-filename";
      fileNameEl.style.fontSize = `${this.plugin.settings.fileNameSize}px`;
    }
    if (this.plugin.settings.showFirstHeader && card.firstHeader) {
      const headerEl = cardElement.createEl("h4", { text: card.firstHeader });
      headerEl.className = "card-navigator-first-header";
      headerEl.style.fontSize = `${this.plugin.settings.firstHeaderSize}px`;
    }
    if (this.plugin.settings.showContent && card.content) {
      const contentEl = cardElement.createEl("div");
      contentEl.className = "card-navigator-content";
      contentEl.style.fontSize = `${this.plugin.settings.contentSize}px`;
      if (this.plugin.settings.renderContentAsHtml) {
        import_obsidian3.MarkdownRenderer.render(
          this.plugin.app,
          card.content,
          contentEl,
          card.file.path,
          this.plugin
        );
      } else {
        contentEl.textContent = card.content;
        contentEl.style.overflow = "hidden";
        contentEl.style.textOverflow = "ellipsis";
        contentEl.style.display = "-webkit-box";
      }
    }
    if (this.plugin.app.workspace.getActiveFile() === card.file) {
      cardElement.addClass("card-navigator-active");
    }
    this.addCardInteractions(cardElement, card);
    return cardElement;
  }
  addCardInteractions(cardElement, card) {
    cardElement.addEventListener("click", () => this.openFile(card.file));
    this.setupDragAndDrop(cardElement, card);
    this.setupContextMenu(cardElement, card.file);
  }
  setupDragAndDrop(cardElement, card) {
    cardElement.setAttribute("draggable", "true");
    cardElement.addEventListener("dragstart", (event) => {
      if (event.dataTransfer) {
        let dragContent = "";
        if (this.plugin.settings.dragDropContent) {
          if (this.plugin.settings.showFileName && card.fileName) {
            dragContent += `## ${card.fileName}

`;
          }
          if (this.plugin.settings.showFirstHeader && card.firstHeader) {
            dragContent += `# ${card.firstHeader}

`;
          }
          if (this.plugin.settings.showContent && card.content) {
            dragContent += `${card.content}

`;
          }
          if (dragContent === "") {
            dragContent = `[[${card.file.name}]]`;
          }
        } else {
          dragContent = `[[${card.file.name}]]`;
        }
        event.dataTransfer.setData("text/plain", dragContent.trim());
        event.dataTransfer.setDragImage(cardElement, 0, 0);
      }
    });
  }
  setupContextMenu(cardElement, file) {
    cardElement.addEventListener("contextmenu", (e) => {
      e.preventDefault();
      const menu = new import_obsidian3.Menu();
      this.plugin.app.workspace.trigger("file-menu", menu, file, "more-options");
      menu.showAtPosition({ x: e.clientX, y: e.clientY });
    });
  }
  openFile(file) {
    this.plugin.app.workspace.getLeaf().openFile(file);
  }
};

// src/ui/cardContainer/cardContainer.ts
var CardContainer = class {
  constructor(plugin, leaf) {
    this.containerEl = null;
    this.cardWidth = 0;
    this.cardHeight = 0;
    this.plugin = plugin;
    this.leaf = leaf;
    this.cardMaker = new CardMaker(this.plugin);
    this.isVertical = false;
  }
  async initialize(containerEl) {
    this.containerEl = containerEl;
    await this.waitForLeafCreation();
    this.registerEvents();
    this.refresh();
  }
  updateContainerStyle() {
    if (this.containerEl) {
      this.containerEl.style.display = "flex";
      this.containerEl.style.flexDirection = this.isVertical ? "column" : "row";
      this.containerEl.style.overflowX = this.isVertical ? "hidden" : "auto";
      this.containerEl.style.overflowY = this.isVertical ? "auto" : "hidden";
      this.containerEl.style.marginTop = this.isVertical ? "var(--card-navigator-toolbar-height)" : "0";
      this.containerEl.style.padding = this.isVertical ? "0" : "1rem";
      this.containerEl.style.width = "100%";
    }
  }
  renderCards(cardsData, cardWidth, cardHeight) {
    const containerEl = this.containerEl;
    if (!containerEl) return;
    containerEl.innerHTML = "";
    cardsData.forEach((cardData) => {
      const card = this.cardMaker.createCardElement(cardData);
      card.style.width = `${cardWidth}px`;
      card.style.flexShrink = "0";
      if (this.plugin.settings.fixedCardHeight) {
        card.style.height = `${cardHeight}px`;
        card.style.overflow = "hidden";
      } else {
        card.style.height = "auto";
        card.style.maxHeight = "none";
      }
      containerEl.appendChild(card);
      if (this.plugin.settings.renderContentAsHtml) {
        card.querySelectorAll("img").forEach((img) => {
          img.addEventListener("load", () => {
            this.adjustCardSize(card);
          });
        });
      }
      if (cardData.file === this.plugin.app.workspace.getActiveFile()) {
        card.classList.add("card-navigator-active");
      }
    });
    if (this.plugin.settings.centerCardMethod === "scroll") {
      this.scrollToActiveCard();
    }
  }
  scrollToActiveCard() {
    if (!this.containerEl) return;
    const activeCard = this.containerEl.querySelector(".card-navigator-active");
    if (activeCard) {
      if (this.isVertical) {
        const containerTop = this.containerEl.scrollTop;
        const containerHeight = this.containerEl.clientHeight;
        const activeCardTop = activeCard.offsetTop;
        const activeCardHeight = activeCard.clientHeight;
        const scrollTop = activeCardTop - containerTop - containerHeight / 2 + activeCardHeight / 2;
        this.containerEl.scrollTop += scrollTop;
      } else {
        const containerLeft = this.containerEl.scrollLeft;
        const containerWidth = this.containerEl.clientWidth;
        const activeCardLeft = activeCard.offsetLeft;
        const activeCardWidth = activeCard.clientWidth;
        const scrollLeft = activeCardLeft - containerLeft - containerWidth / 2 + activeCardWidth / 2;
        this.containerEl.scrollLeft += scrollLeft;
      }
    }
  }
  setOrientation(isVertical) {
    this.isVertical = isVertical;
    this.updateContainerStyle();
  }
  setCardSize(cardWidth, cardHeight) {
    this.cardWidth = cardWidth;
    this.cardHeight = cardHeight;
  }
  getContainerEl() {
    return this.containerEl;
  }
  getCardSizeAndOrientation() {
    return {
      cardWidth: this.cardWidth,
      cardHeight: this.cardHeight,
      isVertical: this.isVertical
    };
  }
  scrollUp(amount) {
    if (!this.containerEl) return;
    const scrollAmount = amount === "single" ? this.cardHeight : this.cardHeight * this.plugin.settings.cardsPerView;
    this.containerEl.scrollBy({ top: -scrollAmount, behavior: "smooth" });
  }
  scrollDown(amount) {
    if (!this.containerEl) return;
    const scrollAmount = amount === "single" ? this.cardHeight : this.cardHeight * this.plugin.settings.cardsPerView;
    this.containerEl.scrollBy({ top: scrollAmount, behavior: "smooth" });
  }
  scrollLeft(amount) {
    if (!this.containerEl) return;
    const scrollAmount = amount === "single" ? this.cardWidth : this.cardWidth * this.plugin.settings.cardsPerView;
    this.containerEl.scrollBy({ left: -scrollAmount, behavior: "smooth" });
  }
  scrollRight(amount) {
    if (!this.containerEl) return;
    const scrollAmount = amount === "single" ? this.cardWidth : this.cardWidth * this.plugin.settings.cardsPerView;
    this.containerEl.scrollBy({ left: scrollAmount, behavior: "smooth" });
  }
  scrollToCenter() {
    if (!this.containerEl) return;
    const activeCard = this.containerEl.querySelector(".card-navigator-active");
    if (activeCard) {
      activeCard.scrollIntoView({ behavior: "smooth", block: "center", inline: "center" });
    }
  }
  async waitForLeafCreation() {
    return new Promise((resolve) => {
      const checkLeaf = () => {
        if (this.containerEl && this.containerEl.getBoundingClientRect().width > 0) {
          resolve();
        } else {
          requestAnimationFrame(checkLeaf);
        }
      };
      checkLeaf();
    });
  }
  registerEvents() {
    this.plugin.registerEvent(
      this.plugin.app.workspace.on("active-leaf-change", debounce2(this.refresh.bind(this), 100))
    );
    this.plugin.registerEvent(
      this.plugin.app.vault.on("modify", debounce2(this.refresh.bind(this), 100))
    );
  }
  async refresh() {
    let folder = null;
    if (this.plugin.settings.useSelectedFolder && this.plugin.settings.selectedFolder) {
      folder = this.plugin.app.vault.getAbstractFileByPath(this.plugin.settings.selectedFolder);
    } else {
      const activeFile = this.plugin.app.workspace.getActiveFile();
      folder = (activeFile == null ? void 0 : activeFile.parent) || null;
    }
    if (!folder || !this.containerEl) {
      return;
    }
    setContainerSize(this.containerEl, this.cardWidth, this.cardHeight, this.plugin.settings.cardsPerView, this.isVertical);
    const files = folder.children.filter((file) => file instanceof import_obsidian4.TFile);
    const sortedFiles = sortFiles(files, this.plugin.settings.sortCriterion, this.plugin.settings.sortOrder);
    const cardsData = await Promise.all(sortedFiles.map((file) => this.cardMaker.createCard(file)));
    this.renderCards(cardsData, this.cardWidth, this.cardHeight);
  }
  adjustCardSize(card) {
    const content = card.querySelector(".card-navigator-content");
    if (content instanceof HTMLElement) {
      if (this.plugin.settings.fixedCardHeight) {
        content.style.maxHeight = `${card.clientHeight - 40}px`;
        content.style.overflow = "hidden";
      } else {
        content.style.maxHeight = "none";
        content.style.overflow = "visible";
      }
    }
  }
  renderActiveCardCentered(cardsData, activeIndex, cardWidth, cardHeight) {
    const containerEl = this.containerEl;
    if (!containerEl) {
      return;
    }
    const isVertical = this.isVertical;
    const leftCards = cardsData.slice(0, activeIndex);
    const rightCards = cardsData.slice(activeIndex + 1);
    const cardSpacing = 15;
    const containerSize = isVertical ? cardHeight : cardWidth;
    const totalSize = (containerSize + cardSpacing) * this.plugin.settings.cardsPerView - cardSpacing;
    const activeCardOffset = (totalSize - containerSize) / 2;
    let currentOffset = activeCardOffset - (leftCards.length * containerSize + leftCards.length * cardSpacing);
    leftCards.forEach((cardData) => {
      const card = this.cardMaker.createCardElement(cardData);
      card.style.position = "absolute";
      card.style.width = `${cardWidth}px`;
      card.style.height = `${cardHeight}px`;
      if (isVertical) {
        card.style.top = `${currentOffset}px`;
      } else {
        card.style.left = `${currentOffset}px`;
      }
      containerEl.appendChild(card);
      currentOffset += containerSize + cardSpacing;
    });
    const activeCard = this.cardMaker.createCardElement(cardsData[activeIndex]);
    activeCard.style.position = "absolute";
    activeCard.style.width = `${cardWidth}px`;
    activeCard.style.height = `${cardHeight}px`;
    if (isVertical) {
      activeCard.style.top = `${activeCardOffset}px`;
    } else {
      activeCard.style.left = `${activeCardOffset}px`;
    }
    containerEl.appendChild(activeCard);
    currentOffset = activeCardOffset + containerSize + cardSpacing;
    rightCards.forEach((cardData) => {
      const card = this.cardMaker.createCardElement(cardData);
      card.style.position = "absolute";
      card.style.width = `${cardWidth}px`;
      card.style.height = `${cardHeight}px`;
      if (isVertical) {
        card.style.top = `${currentOffset}px`;
      } else {
        card.style.left = `${currentOffset}px`;
      }
      containerEl.appendChild(card);
      currentOffset += containerSize + cardSpacing;
    });
  }
  displayCards(filteredFiles) {
  }
  async searchCards(searchTerm) {
    const activeFile = this.plugin.app.workspace.getActiveFile();
    if (!activeFile) return;
    const folder = activeFile.parent;
    if (!folder) return;
    const files = folder.children.filter((file) => file instanceof import_obsidian4.TFile);
    const filteredFiles = await this.filterFilesByContent(files, searchTerm);
    const cards = await Promise.all(filteredFiles.map((file) => this.cardMaker.createCard(file)));
    this.renderCards(cards, this.cardWidth, this.cardHeight);
  }
  async displayCardsForFolder(folder) {
    const files = folder.children.filter((file) => file instanceof import_obsidian4.TFile);
    const cards = await Promise.all(files.map((file) => this.cardMaker.createCard(file)));
    this.renderCards(cards, this.cardWidth, this.cardHeight);
  }
  async filterFilesByContent(files, searchTerm) {
    const lowercaseSearchTerm = searchTerm.toLowerCase();
    const filteredFiles = [];
    for (const file of files) {
      const content = await this.plugin.app.vault.cachedRead(file);
      if (file.basename.toLowerCase().includes(lowercaseSearchTerm) || content.toLowerCase().includes(lowercaseSearchTerm)) {
        filteredFiles.push(file);
      }
    }
    return filteredFiles;
  }
  async sortCards(criterion, order) {
    this.plugin.settings.sortCriterion = criterion;
    this.plugin.settings.sortOrder = order;
    await this.plugin.saveSettings();
    this.refresh();
  }
  onClose() {
  }
};

// src/ui/cardNavigator.ts
var VIEW_TYPE_CARD_NAVIGATOR = "card-navigator-view";
var CardNavigator = class extends import_obsidian5.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
    this.toolbar = new Toolbar(this.plugin);
    this.cardContainer = new CardContainer(this.plugin, this.leaf);
    this.isVertical = this.calculateIsVertical();
    this.resizeObserver = new ResizeObserver(this.handleResize.bind(this));
  }
  getViewType() {
    return VIEW_TYPE_CARD_NAVIGATOR;
  }
  getDisplayText() {
    return "Card Navigator";
  }
  getIcon() {
    return "layers-3";
  }
  calculateIsVertical() {
    const { width, height } = this.leaf.view.containerEl.getBoundingClientRect();
    return height > width;
  }
  handleResize() {
    this.updateLayoutAndRefresh();
  }
  handleKeyDown(event) {
    if (this.containerEl && this.containerEl.contains(document.activeElement)) {
      const { isVertical } = this.cardContainer.getCardSizeAndOrientation();
      switch (event.key) {
        case "ArrowUp":
          this.cardContainer.scrollUp("single");
          event.preventDefault();
          break;
        case "ArrowDown":
          this.cardContainer.scrollDown("single");
          event.preventDefault();
          break;
        case "ArrowLeft":
          this.cardContainer.scrollLeft("single");
          event.preventDefault();
          break;
        case "ArrowRight":
          this.cardContainer.scrollRight("single");
          event.preventDefault();
          break;
        case "PageUp":
          if (isVertical) {
            this.cardContainer.scrollUp("multiple");
          } else {
            this.cardContainer.scrollLeft("multiple");
          }
          event.preventDefault();
          break;
        case "PageDown":
          if (isVertical) {
            this.cardContainer.scrollDown("multiple");
          } else {
            this.cardContainer.scrollRight("multiple");
          }
          event.preventDefault();
          break;
        case "Home":
          this.cardContainer.scrollToCenter();
          event.preventDefault();
          break;
      }
    }
  }
  updateLayoutAndRefresh() {
    this.isVertical = this.calculateIsVertical();
    const containerRect = this.leaf.view.containerEl.getBoundingClientRect();
    const { cardWidth, cardHeight } = calculateCardSize(this.isVertical, containerRect, this.plugin.settings.cardsPerView);
    this.cardContainer.setOrientation(this.isVertical);
    this.cardContainer.setCardSize(cardWidth, cardHeight);
    this.toolbar.setOrientation(this.isVertical);
    this.refresh();
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    const toolbarEl = container.createDiv("card-navigator-toolbar");
    const cardContainerEl = container.createDiv("card-container");
    this.toolbar.initialize(toolbarEl);
    this.cardContainer.initialize(cardContainerEl);
    this.isVertical = this.calculateIsVertical();
    this.updateLayoutAndRefresh();
    this.resizeObserver.observe(this.leaf.view.containerEl);
    this.registerDomEvent(this.containerEl, "keydown", this.handleKeyDown.bind(this));
    this.refresh();
  }
  async onClose() {
    this.resizeObserver.disconnect();
    this.toolbar.onClose();
    this.cardContainer.onClose();
    this.containerEl.removeEventListener("keydown", this.handleKeyDown.bind(this));
  }
  refresh() {
    this.toolbar.refresh();
    this.cardContainer.refresh();
  }
};

// src/ui/settingsTab.ts
var import_obsidian6 = require("obsidian");
var SettingTab = class extends import_obsidian6.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian6.Setting(containerEl).setName("Cards per view").setDesc("Number of cards to display at once").addSlider((slider) => slider.setLimits(3, 9, 1).setValue(this.plugin.settings.cardsPerView).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.cardsPerView = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
    new import_obsidian6.Setting(containerEl).setName("Folder Selection").setDesc("Choose whether to use the active file's folder or a selected folder").addDropdown((dropdown) => dropdown.addOption("active", "Active File's Folder").addOption("selected", "Selected Folder").setValue(this.plugin.settings.useSelectedFolder ? "selected" : "active").onChange(async (value) => {
      this.plugin.settings.useSelectedFolder = value === "selected";
      await this.plugin.saveSettings();
      this.display();
    }));
    if (this.plugin.settings.useSelectedFolder) {
      new import_obsidian6.Setting(containerEl).setName("Select Folder").setDesc("Choose a folder for Card Navigator").addButton((button) => button.setButtonText(this.plugin.settings.selectedFolder || "Choose folder").onClick(() => {
        new FolderSuggestModal(this.plugin, (folder) => {
          this.plugin.settings.selectedFolder = folder.path;
          this.plugin.saveSettings();
          this.display();
        }).open();
      }));
    }
    new import_obsidian6.Setting(containerEl).setName("Default sort method").setDesc("Choose the default sorting method for cards").addDropdown((dropdown) => {
      dropdown.addOption("fileName_asc", "File name (A to Z)").addOption("fileName_desc", "File name (Z to A)").addOption("lastModified_desc", "Last modified (newest first)").addOption("lastModified_asc", "Last modified (oldest first)").addOption("created_desc", "Created (newest first)").addOption("created_asc", "Created (oldest first)").setValue(`${this.plugin.settings.sortCriterion}_${this.plugin.settings.sortOrder}`).onChange(async (value) => {
        const [criterion, order] = value.split("_");
        this.plugin.settings.sortCriterion = criterion;
        this.plugin.settings.sortOrder = order;
        await this.plugin.saveSettings();
        this.plugin.refreshViews();
      });
    });
    new import_obsidian6.Setting(containerEl).setName("Fixed Card Height").setDesc("If enabled, all cards will have the same height. If disabled, card height will adjust to content.").addToggle((toggle) => toggle.setValue(this.plugin.settings.fixedCardHeight).onChange(async (value) => {
      this.plugin.settings.fixedCardHeight = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
    new import_obsidian6.Setting(containerEl).setName("Render Content as HTML").setDesc("If enabled, card content will be rendered as HTML").addToggle((toggle) => toggle.setValue(this.plugin.settings.renderContentAsHtml).onChange(async (value) => {
      this.plugin.settings.renderContentAsHtml = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
    new import_obsidian6.Setting(containerEl).setName("Drag and Drop Content").setDesc("When enabled, dragging a card will insert the note content instead of a link.").addToggle((toggle) => toggle.setValue(this.plugin.settings.dragDropContent).onChange(async (value) => {
      this.plugin.settings.dragDropContent = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
    containerEl.createEl("h3", { text: "Display items Settings" });
    new import_obsidian6.Setting(containerEl).setName("Show File Name").setDesc("Toggle to display or hide the file name on cards").addToggle((toggle) => toggle.setValue(this.plugin.settings.showFileName).onChange(async (value) => {
      this.plugin.settings.showFileName = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
    new import_obsidian6.Setting(containerEl).setName("File Name Size").setDesc("Set the font size for the file name").addSlider((slider) => slider.setLimits(15, 25, 1).setValue(this.plugin.settings.fileNameSize).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.fileNameSize = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
    new import_obsidian6.Setting(containerEl).setName("Show First Header").setDesc("Toggle to display or hide the first header on cards").addToggle((toggle) => toggle.setValue(this.plugin.settings.showFirstHeader).onChange(async (value) => {
      this.plugin.settings.showFirstHeader = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
    new import_obsidian6.Setting(containerEl).setName("First Header Size").setDesc("Set the font size for the first header").addSlider((slider) => slider.setLimits(15, 25, 1).setValue(this.plugin.settings.firstHeaderSize).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.firstHeaderSize = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
    new import_obsidian6.Setting(containerEl).setName("Show Content").setDesc("Toggle to display or hide the content on cards").addToggle((toggle) => toggle.setValue(this.plugin.settings.showContent).onChange(async (value) => {
      this.plugin.settings.showContent = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
    new import_obsidian6.Setting(containerEl).setName("Content Size").setDesc("Set the font size for the content").addSlider((slider) => slider.setLimits(10, 20, 1).setValue(this.plugin.settings.contentSize).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.contentSize = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
    new import_obsidian6.Setting(containerEl).setName("Content Length").setDesc("Maximum content length displayed on each card").addSlider((slider) => slider.setLimits(1, 10, 1).setValue(this.plugin.settings.contentLength).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.contentLength = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
  }
};

// src/common/settings.ts
var DEFAULT_SETTINGS = {
  cardsPerView: 6,
  useSelectedFolder: false,
  selectedFolder: null,
  sortCriterion: "fileName",
  sortOrder: "asc",
  fixedCardHeight: true,
  renderContentAsHtml: false,
  centerCardMethod: "scroll",
  activeCardBorderColor: "var(--active-border-color)",
  activeCardBackgroundColor: "var(--active-background-color)",
  dragDropContent: false,
  showFileName: true,
  fileNameSize: 20,
  showFirstHeader: true,
  firstHeaderSize: 18,
  showContent: true,
  contentSize: 15,
  contentLength: 5
};

// src/main.ts
var CardNavigatorPlugin = class extends import_obsidian7.Plugin {
  constructor() {
    super(...arguments);
    this.settings = DEFAULT_SETTINGS;
    this.selectedFolder = null;
  }
  async onload() {
    await this.loadSettings();
    this.registerView(
      VIEW_TYPE_CARD_NAVIGATOR,
      (leaf) => new CardNavigator(leaf, this)
    );
    this.addSettingTab(new SettingTab(this.app, this));
    this.addRibbonIcon("layers-3", "Activate Card Navigator", () => {
      this.activateView();
    });
    this.addCommand({
      id: "activate-card-navigator",
      name: "Activate Card Navigator",
      callback: () => {
        this.activateView();
      }
    });
    this.addCommand({
      id: "select-folder",
      name: "Select folder for Card Navigator",
      callback: () => {
        const view = this.app.workspace.getActiveViewOfType(CardNavigator);
        if (view) {
          view.toolbar.openFolderSelector();
        }
      }
    });
    this.app.workspace.onLayoutReady(() => {
      this.activateView();
    });
  }
  async onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.refreshViews();
  }
  refreshViews() {
    const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR);
    leaves.forEach((leaf) => {
      if (leaf.view instanceof CardNavigator) {
        leaf.view.updateLayoutAndRefresh();
      }
    });
  }
  displayFilteredCards(filteredFiles) {
    const view = this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR)[0].view;
    view.cardContainer.displayCards(filteredFiles);
  }
  sortCards(criterion, order) {
    const view = this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR)[0].view;
    view.cardContainer.sortCards(criterion, order);
  }
  async activateView() {
    const { workspace } = this.app;
    let leaves = workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR);
    let leaf = leaves[0];
    if (!leaf) {
      const rightLeaf = workspace.getRightLeaf(false);
      if (rightLeaf) {
        await rightLeaf.setViewState({ type: VIEW_TYPE_CARD_NAVIGATOR, active: true });
        leaves = workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR);
        leaf = leaves[0];
      }
    }
    if (leaf) {
      workspace.revealLeaf(leaf);
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL3VpL2NhcmROYXZpZ2F0b3IudHMiLCAic3JjL3VpL3Rvb2xiYXIvdG9vbGJhci50cyIsICJzcmMvdWkvdG9vbGJhci90b29sYmFyQWN0aW9ucy50cyIsICJzcmMvdWkvY2FyZENvbnRhaW5lci9jYXJkQ29udGFpbmVyLnRzIiwgInNyYy91aS9jYXJkQ29udGFpbmVyL2NhcmRNYWtlci50cyIsICJzcmMvY29tbW9uL3V0aWxzLnRzIiwgInNyYy91aS9zZXR0aW5nc1RhYi50cyIsICJzcmMvY29tbW9uL3NldHRpbmdzLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvLyBzcmMvbWFpbi50c1xuXG5pbXBvcnQgeyBQbHVnaW4sIFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgQ2FyZE5hdmlnYXRvciwgVklFV19UWVBFX0NBUkRfTkFWSUdBVE9SIH0gZnJvbSAnLi91aS9jYXJkTmF2aWdhdG9yJztcbmltcG9ydCB7IFNldHRpbmdUYWIgfSBmcm9tICcuL3VpL3NldHRpbmdzVGFiJztcbmltcG9ydCB7IENhcmROYXZpZ2F0b3JTZXR0aW5ncyB9IGZyb20gJy4vY29tbW9uL3R5cGVzJztcbmltcG9ydCB7IERFRkFVTFRfU0VUVElOR1MgfSBmcm9tICcuL2NvbW1vbi9zZXR0aW5ncyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmROYXZpZ2F0b3JQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xuICAgIHNldHRpbmdzOiBDYXJkTmF2aWdhdG9yU2V0dGluZ3MgPSBERUZBVUxUX1NFVFRJTkdTO1xuXHRzZWxlY3RlZEZvbGRlcjogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG5cdHB1YmxpYyBjb250YWluZXJFbDogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ7XG5cbiAgICBhc3luYyBvbmxvYWQoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG5cbiAgICAgICAgdGhpcy5yZWdpc3RlclZpZXcoXG4gICAgICAgICAgICBWSUVXX1RZUEVfQ0FSRF9OQVZJR0FUT1IsXG4gICAgICAgICAgICAobGVhZikgPT4gbmV3IENhcmROYXZpZ2F0b3IobGVhZiwgdGhpcylcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IFNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcblxuICAgICAgICB0aGlzLmFkZFJpYmJvbkljb24oJ2xheWVycy0zJywgJ0FjdGl2YXRlIENhcmQgTmF2aWdhdG9yJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hY3RpdmF0ZVZpZXcoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiAnYWN0aXZhdGUtY2FyZC1uYXZpZ2F0b3InLFxuICAgICAgICAgICAgbmFtZTogJ0FjdGl2YXRlIENhcmQgTmF2aWdhdG9yJyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmF0ZVZpZXcoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiAnc2VsZWN0LWZvbGRlcicsXG4gICAgICAgICAgICBuYW1lOiAnU2VsZWN0IGZvbGRlciBmb3IgQ2FyZCBOYXZpZ2F0b3InLFxuICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB2aWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoQ2FyZE5hdmlnYXRvcik7XG4gICAgICAgICAgICAgICAgaWYgKHZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmlldy50b29sYmFyLm9wZW5Gb2xkZXJTZWxlY3RvcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hcHAud29ya3NwYWNlLm9uTGF5b3V0UmVhZHkoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hY3RpdmF0ZVZpZXcoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgb251bmxvYWQoKSB7XG4gICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS5kZXRhY2hMZWF2ZXNPZlR5cGUoVklFV19UWVBFX0NBUkRfTkFWSUdBVE9SKTtcbiAgICB9XG5cbiAgICBhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuICAgIH1cblxuICAgIGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcbiAgICAgICAgdGhpcy5yZWZyZXNoVmlld3MoKTtcbiAgICB9XG5cdFxuICAgIHJlZnJlc2hWaWV3cygpIHtcbiAgICAgICAgY29uc3QgbGVhdmVzID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZShWSUVXX1RZUEVfQ0FSRF9OQVZJR0FUT1IpO1xuICAgICAgICBsZWF2ZXMuZm9yRWFjaCgobGVhZikgPT4ge1xuICAgICAgICAgICAgaWYgKGxlYWYudmlldyBpbnN0YW5jZW9mIENhcmROYXZpZ2F0b3IpIHtcbiAgICAgICAgICAgICAgICBsZWFmLnZpZXcudXBkYXRlTGF5b3V0QW5kUmVmcmVzaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cblx0ZGlzcGxheUZpbHRlcmVkQ2FyZHMoZmlsdGVyZWRGaWxlczogVEZpbGVbXSkge1xuICAgICAgICBjb25zdCB2aWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZShWSUVXX1RZUEVfQ0FSRF9OQVZJR0FUT1IpWzBdLnZpZXcgYXMgQ2FyZE5hdmlnYXRvcjtcbiAgICAgICAgdmlldy5jYXJkQ29udGFpbmVyLmRpc3BsYXlDYXJkcyhmaWx0ZXJlZEZpbGVzKTtcbiAgICB9XG5cdFxuXHRzb3J0Q2FyZHMoY3JpdGVyaW9uOiAnZmlsZU5hbWUnIHwgJ2xhc3RNb2RpZmllZCcgfCAnY3JlYXRlZCcsIG9yZGVyOiAnYXNjJyB8ICdkZXNjJykge1xuXHRcdGNvbnN0IHZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKFZJRVdfVFlQRV9DQVJEX05BVklHQVRPUilbMF0udmlldyBhcyBDYXJkTmF2aWdhdG9yO1xuXHRcdHZpZXcuY2FyZENvbnRhaW5lci5zb3J0Q2FyZHMoY3JpdGVyaW9uLCBvcmRlcik7XG5cdH1cblxuXHRhc3luYyBhY3RpdmF0ZVZpZXcoKSB7XG5cdFx0Y29uc3QgeyB3b3Jrc3BhY2UgfSA9IHRoaXMuYXBwO1xuXHRcdGxldCBsZWF2ZXMgPSB3b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKFZJRVdfVFlQRV9DQVJEX05BVklHQVRPUik7XG5cdFx0bGV0IGxlYWYgPSBsZWF2ZXNbMF07XG5cdFxuXHRcdGlmICghbGVhZikge1xuXHRcdFx0Y29uc3QgcmlnaHRMZWFmID0gd29ya3NwYWNlLmdldFJpZ2h0TGVhZihmYWxzZSk7XG5cdFx0XHRpZiAocmlnaHRMZWFmKSB7XG5cdFx0XHRcdGF3YWl0IHJpZ2h0TGVhZi5zZXRWaWV3U3RhdGUoeyB0eXBlOiBWSUVXX1RZUEVfQ0FSRF9OQVZJR0FUT1IsIGFjdGl2ZTogdHJ1ZSB9KTtcblx0XHRcdFx0bGVhdmVzID0gd29ya3NwYWNlLmdldExlYXZlc09mVHlwZShWSUVXX1RZUEVfQ0FSRF9OQVZJR0FUT1IpOyAvLyBcdUIyRTRcdUMyREMgXHVBQzAwXHVDODM4XHVDNjI0XHVBRTMwXG5cdFx0XHRcdGxlYWYgPSBsZWF2ZXNbMF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHRpZiAobGVhZikge1xuXHRcdFx0d29ya3NwYWNlLnJldmVhbExlYWYobGVhZik7XG5cdFx0fVxuXHR9XG5cdFxufVxuIiwgIi8vIHNyYy91aS9jYXJkTmF2aWdhdG9yLnRzXG5cbmltcG9ydCB7IEl0ZW1WaWV3LCBXb3Jrc3BhY2VMZWFmIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgQ2FyZE5hdmlnYXRvclBsdWdpbiBmcm9tICcuLi9tYWluJztcbmltcG9ydCB7IFRvb2xiYXIgfSBmcm9tICcuL3Rvb2xiYXIvdG9vbGJhcic7XG5pbXBvcnQgeyBDYXJkQ29udGFpbmVyIH0gZnJvbSAnLi9jYXJkQ29udGFpbmVyL2NhcmRDb250YWluZXInO1xuaW1wb3J0IHsgY2FsY3VsYXRlQ2FyZFNpemUgfSBmcm9tICcuLi9jb21tb24vdXRpbHMnO1xuXG5leHBvcnQgY29uc3QgVklFV19UWVBFX0NBUkRfTkFWSUdBVE9SID0gXCJjYXJkLW5hdmlnYXRvci12aWV3XCI7XG5cbmV4cG9ydCBjbGFzcyBDYXJkTmF2aWdhdG9yIGV4dGVuZHMgSXRlbVZpZXcge1xuICAgIHByaXZhdGUgcGx1Z2luOiBDYXJkTmF2aWdhdG9yUGx1Z2luO1xuICAgIHB1YmxpYyB0b29sYmFyOiBUb29sYmFyO1xuICAgIHB1YmxpYyBjYXJkQ29udGFpbmVyOiBDYXJkQ29udGFpbmVyO1xuICAgIHByaXZhdGUgcmVzaXplT2JzZXJ2ZXI6IFJlc2l6ZU9ic2VydmVyO1xuXHRwcml2YXRlIGlzVmVydGljYWw6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihsZWFmOiBXb3Jrc3BhY2VMZWFmLCBwbHVnaW46IENhcmROYXZpZ2F0b3JQbHVnaW4pIHtcbiAgICAgICAgc3VwZXIobGVhZik7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgICAgICB0aGlzLnRvb2xiYXIgPSBuZXcgVG9vbGJhcih0aGlzLnBsdWdpbik7XG4gICAgICAgIHRoaXMuY2FyZENvbnRhaW5lciA9IG5ldyBDYXJkQ29udGFpbmVyKHRoaXMucGx1Z2luLCB0aGlzLmxlYWYpO1xuXHRcdHRoaXMuaXNWZXJ0aWNhbCA9IHRoaXMuY2FsY3VsYXRlSXNWZXJ0aWNhbCgpO1xuICAgICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKHRoaXMuaGFuZGxlUmVzaXplLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIGdldFZpZXdUeXBlKCkge1xuICAgICAgICByZXR1cm4gVklFV19UWVBFX0NBUkRfTkFWSUdBVE9SO1xuICAgIH1cblxuICAgIGdldERpc3BsYXlUZXh0KCkge1xuICAgICAgICByZXR1cm4gXCJDYXJkIE5hdmlnYXRvclwiO1xuICAgIH1cblxuICAgIGdldEljb24oKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwibGF5ZXJzLTNcIjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNhbGN1bGF0ZUlzVmVydGljYWwoKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gdGhpcy5sZWFmLnZpZXcuY29udGFpbmVyRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHJldHVybiBoZWlnaHQgPiB3aWR0aDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZVJlc2l6ZSgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVMYXlvdXRBbmRSZWZyZXNoKCk7XG4gICAgfVxuICAgIFxuXHRwcml2YXRlIGhhbmRsZUtleURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcblx0XHRpZiAodGhpcy5jb250YWluZXJFbCAmJiB0aGlzLmNvbnRhaW5lckVsLmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG5cdFx0XHRjb25zdCB7IGlzVmVydGljYWwgfSA9IHRoaXMuY2FyZENvbnRhaW5lci5nZXRDYXJkU2l6ZUFuZE9yaWVudGF0aW9uKCk7XG5cdFx0XHRzd2l0Y2ggKGV2ZW50LmtleSkge1xuXHRcdFx0XHRjYXNlICdBcnJvd1VwJzpcblx0XHRcdFx0XHR0aGlzLmNhcmRDb250YWluZXIuc2Nyb2xsVXAoJ3NpbmdsZScpO1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0Fycm93RG93bic6XG5cdFx0XHRcdFx0dGhpcy5jYXJkQ29udGFpbmVyLnNjcm9sbERvd24oJ3NpbmdsZScpO1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0Fycm93TGVmdCc6XG5cdFx0XHRcdFx0dGhpcy5jYXJkQ29udGFpbmVyLnNjcm9sbExlZnQoJ3NpbmdsZScpO1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0Fycm93UmlnaHQnOlxuXHRcdFx0XHRcdHRoaXMuY2FyZENvbnRhaW5lci5zY3JvbGxSaWdodCgnc2luZ2xlJyk7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnUGFnZVVwJzpcblx0XHRcdFx0XHRpZiAoaXNWZXJ0aWNhbCkge1xuXHRcdFx0XHRcdFx0dGhpcy5jYXJkQ29udGFpbmVyLnNjcm9sbFVwKCdtdWx0aXBsZScpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLmNhcmRDb250YWluZXIuc2Nyb2xsTGVmdCgnbXVsdGlwbGUnKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnUGFnZURvd24nOlxuXHRcdFx0XHRcdGlmIChpc1ZlcnRpY2FsKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmNhcmRDb250YWluZXIuc2Nyb2xsRG93bignbXVsdGlwbGUnKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy5jYXJkQ29udGFpbmVyLnNjcm9sbFJpZ2h0KCdtdWx0aXBsZScpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdIb21lJzpcblx0XHRcdFx0XHR0aGlzLmNhcmRDb250YWluZXIuc2Nyb2xsVG9DZW50ZXIoKTtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyB1cGRhdGVMYXlvdXRBbmRSZWZyZXNoKCkge1xuXHRcdHRoaXMuaXNWZXJ0aWNhbCA9IHRoaXMuY2FsY3VsYXRlSXNWZXJ0aWNhbCgpO1xuXHRcdGNvbnN0IGNvbnRhaW5lclJlY3QgPSB0aGlzLmxlYWYudmlldy5jb250YWluZXJFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRjb25zdCB7IGNhcmRXaWR0aCwgY2FyZEhlaWdodCB9ID0gY2FsY3VsYXRlQ2FyZFNpemUodGhpcy5pc1ZlcnRpY2FsLCBjb250YWluZXJSZWN0LCB0aGlzLnBsdWdpbi5zZXR0aW5ncy5jYXJkc1BlclZpZXcpO1xuXHRcdFxuXHRcdHRoaXMuY2FyZENvbnRhaW5lci5zZXRPcmllbnRhdGlvbih0aGlzLmlzVmVydGljYWwpO1xuXHRcdHRoaXMuY2FyZENvbnRhaW5lci5zZXRDYXJkU2l6ZShjYXJkV2lkdGgsIGNhcmRIZWlnaHQpO1xuXHRcdHRoaXMudG9vbGJhci5zZXRPcmllbnRhdGlvbih0aGlzLmlzVmVydGljYWwpO1xuXHRcdFxuXHRcdHRoaXMucmVmcmVzaCgpO1xuXHR9XG5cbiAgICBhc3luYyBvbk9wZW4oKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyRWwuY2hpbGRyZW5bMV0gYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgIGNvbnRhaW5lci5lbXB0eSgpO1xuXG4gICAgICAgIGNvbnN0IHRvb2xiYXJFbCA9IGNvbnRhaW5lci5jcmVhdGVEaXYoJ2NhcmQtbmF2aWdhdG9yLXRvb2xiYXInKTtcbiAgICAgICAgY29uc3QgY2FyZENvbnRhaW5lckVsID0gY29udGFpbmVyLmNyZWF0ZURpdignY2FyZC1jb250YWluZXInKTtcblxuICAgICAgICB0aGlzLnRvb2xiYXIuaW5pdGlhbGl6ZSh0b29sYmFyRWwpO1xuICAgICAgICB0aGlzLmNhcmRDb250YWluZXIuaW5pdGlhbGl6ZShjYXJkQ29udGFpbmVyRWwpO1xuXG5cdFx0dGhpcy5pc1ZlcnRpY2FsID0gdGhpcy5jYWxjdWxhdGVJc1ZlcnRpY2FsKCk7XG4gICAgICAgIHRoaXMudXBkYXRlTGF5b3V0QW5kUmVmcmVzaCgpO1xuICAgICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyLm9ic2VydmUodGhpcy5sZWFmLnZpZXcuY29udGFpbmVyRWwpO1xuXG5cdFx0dGhpcy5yZWdpc3RlckRvbUV2ZW50KHRoaXMuY29udGFpbmVyRWwsICdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlEb3duLmJpbmQodGhpcykpO1xuXG4gICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgIH1cblxuICAgIGFzeW5jIG9uQ2xvc2UoKSB7XG4gICAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICB0aGlzLnRvb2xiYXIub25DbG9zZSgpO1xuICAgICAgICB0aGlzLmNhcmRDb250YWluZXIub25DbG9zZSgpO1xuXG5cdFx0dGhpcy5jb250YWluZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlEb3duLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIHJlZnJlc2goKSB7XG4gICAgICAgIHRoaXMudG9vbGJhci5yZWZyZXNoKCk7XG4gICAgICAgIHRoaXMuY2FyZENvbnRhaW5lci5yZWZyZXNoKCk7XG4gICAgfVxufVxuIiwgIi8vIHNyYy91aS90b29sYmFyL3Rvb2xiYXIudHNcblxuaW1wb3J0IHsgc2V0SWNvbiwgVEZvbGRlciwgZGVib3VuY2UgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgQ2FyZE5hdmlnYXRvclBsdWdpbiBmcm9tICcuLi8uLi9tYWluJztcbmltcG9ydCB7IENhcmROYXZpZ2F0b3IgfSBmcm9tICcuLi9jYXJkTmF2aWdhdG9yJztcbmltcG9ydCB7IEZvbGRlclN1Z2dlc3RNb2RhbCB9IGZyb20gJy4vdG9vbGJhckFjdGlvbnMnO1xuaW1wb3J0IHsgdG9nZ2xlU29ydCwgdG9nZ2xlU2V0dGluZ3MgfSBmcm9tICcuL3Rvb2xiYXJBY3Rpb25zJztcblxuZXhwb3J0IGNsYXNzIFRvb2xiYXIge1xuICAgIHByaXZhdGUgY29udGFpbmVyRWw6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICAgIHByaXZhdGUgaXNWZXJ0aWNhbDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcGx1Z2luOiBDYXJkTmF2aWdhdG9yUGx1Z2luKSB7XG4gICAgICAgIHRoaXMuaXNWZXJ0aWNhbCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGluaXRpYWxpemUoY29udGFpbmVyRWw6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwgPSBjb250YWluZXJFbDtcbiAgICAgICAgdGhpcy5jcmVhdGVUb29sYmFyKCk7XG4gICAgfVxuXG5cdHNldE9yaWVudGF0aW9uKGlzVmVydGljYWw6IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCAhPT0gaXNWZXJ0aWNhbCkge1xuICAgICAgICAgICAgdGhpcy5pc1ZlcnRpY2FsID0gaXNWZXJ0aWNhbDtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVG9vbGJhclN0eWxlKCk7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVRvb2xiYXIoKTtcbiAgICAgICAgfVxuICAgIH1cblxuXHRwcml2YXRlIHVwZGF0ZVRvb2xiYXJTdHlsZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29udGFpbmVyRWwpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwuY2xhc3NMaXN0LnRvZ2dsZSgndmVydGljYWwnLCB0aGlzLmlzVmVydGljYWwpO1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbC5jbGFzc0xpc3QudG9nZ2xlKCdob3Jpem9udGFsJywgIXRoaXMuaXNWZXJ0aWNhbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZVRvb2xiYXIoKSB7XG4gICAgICAgIGlmICghdGhpcy5jb250YWluZXJFbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5lbXB0eSgpO1xuXG4gICAgICAgIGNvbnN0IHRvb2xiYXJDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdG9vbGJhckNvbnRhaW5lci5jbGFzc05hbWUgPSAnY2FyZC1uYXZpZ2F0b3ItdG9vbGJhci1jb250YWluZXInO1xuXG4gICAgICAgIGNvbnN0IHNlYXJjaENvbnRhaW5lciA9IHRoaXMuY3JlYXRlU2VhcmNoQ29udGFpbmVyKCk7XG4gICAgICAgIGNvbnN0IHNlcGFyYXRvciA9IHRoaXMuY3JlYXRlU2VwYXJhdG9yKCk7XG4gICAgICAgIGNvbnN0IGFjdGlvbkljb25zQ29udGFpbmVyID0gdGhpcy5jcmVhdGVBY3Rpb25JY29uc0NvbnRhaW5lcigpO1xuXG4gICAgICAgIHRvb2xiYXJDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VhcmNoQ29udGFpbmVyKTtcbiAgICAgICAgdG9vbGJhckNvbnRhaW5lci5hcHBlbmRDaGlsZChzZXBhcmF0b3IpO1xuICAgICAgICB0b29sYmFyQ29udGFpbmVyLmFwcGVuZENoaWxkKGFjdGlvbkljb25zQ29udGFpbmVyKTtcblxuICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmFwcGVuZENoaWxkKHRvb2xiYXJDb250YWluZXIpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlU2VhcmNoQ29udGFpbmVyKCk6IEhUTUxFbGVtZW50IHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnRhaW5lci5jbGFzc05hbWUgPSAnY2FyZC1uYXZpZ2F0b3Itc2VhcmNoLWNvbnRhaW5lcic7XG5cbiAgICAgICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICBpbnB1dC50eXBlID0gJ3RleHQnO1xuICAgICAgICBpbnB1dC5wbGFjZWhvbGRlciA9ICdTZWFyY2guLi4nO1xuICAgICAgICBpbnB1dC5jbGFzc05hbWUgPSAnY2FyZC1uYXZpZ2F0b3Itc2VhcmNoLWlucHV0JztcblxuICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGRlYm91bmNlKGFzeW5jIChlOiBFdmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2VhcmNoVGVybSA9IChlLnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZTtcbiAgICAgICAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLnBsdWdpbi5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZSgnY2FyZC1uYXZpZ2F0b3ItdmlldycpWzBdLnZpZXcgYXMgQ2FyZE5hdmlnYXRvcjtcbiAgICAgICAgICAgIGF3YWl0IHZpZXcuY2FyZENvbnRhaW5lci5zZWFyY2hDYXJkcyhzZWFyY2hUZXJtKTtcbiAgICAgICAgfSwgMzAwKSk7XG5cbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGlucHV0KTtcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZUFjdGlvbkljb25zQ29udGFpbmVyKCk6IEhUTUxFbGVtZW50IHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnRhaW5lci5jbGFzc05hbWUgPSAnY2FyZC1uYXZpZ2F0b3ItYWN0aW9uLWljb25zLWNvbnRhaW5lcic7XG5cbiAgICAgICAgY29uc3QgaWNvbnMgPSBbXG4gICAgICAgICAgICB7IG5hbWU6ICdmb2xkZXInLCBsYWJlbDogJ1NlbGVjdCBmb2xkZXInLCBhY3Rpb246ICgpID0+IHRoaXMub3BlbkZvbGRlclNlbGVjdG9yKCkgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ2Fycm93LXVwLW5hcnJvdy13aWRlJywgbGFiZWw6ICdTb3J0IGNhcmRzJywgYWN0aW9uOiAoKSA9PiB0b2dnbGVTb3J0KHRoaXMucGx1Z2luKSB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnc2V0dGluZ3MnLCBsYWJlbDogJ1NldHRpbmdzJywgYWN0aW9uOiAoKSA9PiB0b2dnbGVTZXR0aW5ncyh0aGlzLnBsdWdpbikgfSxcbiAgICAgICAgXTtcblxuICAgICAgICBpY29ucy5mb3JFYWNoKGljb24gPT4ge1xuICAgICAgICAgICAgY29uc3QgaWNvbkVsZW1lbnQgPSB0aGlzLmNyZWF0ZVRvb2xiYXJJY29uKGljb24ubmFtZSwgaWNvbi5sYWJlbCwgaWNvbi5hY3Rpb24pO1xuICAgICAgICAgICAgaWYgKGljb24ubmFtZSA9PT0gJ2Fycm93LXVwLW5hcnJvdy13aWRlJykge1xuICAgICAgICAgICAgICAgIGljb25FbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoJ2FjdGl2ZScsIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zb3J0Q3JpdGVyaW9uICE9PSAnZmlsZU5hbWUnIHx8IFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zb3J0T3JkZXIgIT09ICdhc2MnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChpY29uRWxlbWVudCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVUb29sYmFySWNvbihpY29uTmFtZTogc3RyaW5nLCBhcmlhTGFiZWw6IHN0cmluZywgYWN0aW9uOiAoZTogTW91c2VFdmVudCkgPT4gdm9pZCk6IEhUTUxFbGVtZW50IHtcbiAgICAgICAgY29uc3QgaWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBpY29uLmNsYXNzTmFtZSA9ICdjbGlja2FibGUtaWNvbic7XG4gICAgICAgIGljb24uc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgYXJpYUxhYmVsKTtcblxuICAgICAgICBzZXRJY29uKGljb24sIGljb25OYW1lKTtcbiAgICAgICAgaWNvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFjdGlvbik7XG5cbiAgICAgICAgcmV0dXJuIGljb247XG4gICAgfVxuXHRcblx0cHJpdmF0ZSBjcmVhdGVTZXBhcmF0b3IoKTogSFRNTEVsZW1lbnQge1xuICAgICAgICBjb25zdCBzZXBhcmF0b3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgc2VwYXJhdG9yLmNsYXNzTmFtZSA9ICd0b29sYmFyLXNlcGFyYXRvcic7XG4gICAgICAgIHJldHVybiBzZXBhcmF0b3I7XG4gICAgfVxuXG5cdHB1YmxpYyBvcGVuRm9sZGVyU2VsZWN0b3IoKSB7XG5cdFx0bmV3IEZvbGRlclN1Z2dlc3RNb2RhbCh0aGlzLnBsdWdpbiwgKGZvbGRlcjogVEZvbGRlcikgPT4ge1xuXHRcdFx0Y29uc3QgdmlldyA9IHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShDYXJkTmF2aWdhdG9yKTtcblx0XHRcdGlmICh2aWV3KSB7XG5cdFx0XHRcdHZpZXcuY2FyZENvbnRhaW5lci5kaXNwbGF5Q2FyZHNGb3JGb2xkZXIoZm9sZGVyKTtcblx0XHRcdH1cblx0XHR9KS5vcGVuKCk7XG5cdH1cblxuICAgIHJlZnJlc2goKSB7XG4gICAgICAgIC8vIEltcGxlbWVudCByZWZyZXNoIGxvZ2ljIGlmIG5lY2Vzc2FyeVxuICAgIH1cblxuICAgIG9uQ2xvc2UoKSB7XG4gICAgICAgIC8vIENsZWFudXAgdG9vbGJhci1yZWxhdGVkIHJlc291cmNlc1xuICAgIH1cbn1cbiIsICIvLyBzcmMvdWkvdG9vbGJhci90b29sYmFyQWN0aW9ucy50c1xuXG5pbXBvcnQgeyBURm9sZGVyLCBGdXp6eVN1Z2dlc3RNb2RhbCB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IENhcmROYXZpZ2F0b3IgfSBmcm9tICcuLi9jYXJkTmF2aWdhdG9yJztcbmltcG9ydCB7IFZJRVdfVFlQRV9DQVJEX05BVklHQVRPUiB9IGZyb20gJy4uL2NhcmROYXZpZ2F0b3InO1xuaW1wb3J0IENhcmROYXZpZ2F0b3JQbHVnaW4gZnJvbSAnLi4vLi4vbWFpbic7XG5pbXBvcnQgeyBTb3J0Q3JpdGVyaW9uIH0gZnJvbSAnLi4vLi4vY29tbW9uL3R5cGVzJztcblxuZXhwb3J0IGNsYXNzIEZvbGRlclN1Z2dlc3RNb2RhbCBleHRlbmRzIEZ1enp5U3VnZ2VzdE1vZGFsPFRGb2xkZXI+IHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBsdWdpbjogQ2FyZE5hdmlnYXRvclBsdWdpbiwgcHJpdmF0ZSBvblNlbGVjdDogKGZvbGRlcjogVEZvbGRlcikgPT4gdm9pZCkge1xuICAgICAgICBzdXBlcihwbHVnaW4uYXBwKTtcbiAgICB9XG5cbiAgICBnZXRJdGVtcygpOiBURm9sZGVyW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5wbHVnaW4uYXBwLnZhdWx0LmdldEFsbExvYWRlZEZpbGVzKClcbiAgICAgICAgICAgIC5maWx0ZXIoKGZpbGUpOiBmaWxlIGlzIFRGb2xkZXIgPT4gZmlsZSBpbnN0YW5jZW9mIFRGb2xkZXIpO1xuICAgIH1cblxuICAgIGdldEl0ZW1UZXh0KGZvbGRlcjogVEZvbGRlcik6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBmb2xkZXIucGF0aDtcbiAgICB9XG5cbiAgICBvbkNob29zZUl0ZW0oZm9sZGVyOiBURm9sZGVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMub25TZWxlY3QoZm9sZGVyKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlQ2FyZHMoZGlyZWN0aW9uOiBzdHJpbmcsIHBsdWdpbjogQ2FyZE5hdmlnYXRvclBsdWdpbiwgYW1vdW50OiAnc2luZ2xlJyB8ICdtdWx0aXBsZScgPSAnc2luZ2xlJykge1xuICAgIGNvbnN0IGxlYXZlcyA9IHBsdWdpbi5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZShWSUVXX1RZUEVfQ0FSRF9OQVZJR0FUT1IpO1xuICAgIGlmIChsZWF2ZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICBjb25zdCB2aWV3ID0gbGVhdmVzWzBdLnZpZXcgYXMgQ2FyZE5hdmlnYXRvcjtcbiAgICBpZiAoIXZpZXcgfHwgIXZpZXcuY2FyZENvbnRhaW5lcikgcmV0dXJuO1xuXG4gICAgY29uc3QgY2FyZENvbnRhaW5lciA9IHZpZXcuY2FyZENvbnRhaW5lcjtcblxuICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG4gICAgICAgIGNhc2UgJ3VwJzpcbiAgICAgICAgICAgIGNhcmRDb250YWluZXIuc2Nyb2xsVXAoYW1vdW50KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkb3duJzpcbiAgICAgICAgICAgIGNhcmRDb250YWluZXIuc2Nyb2xsRG93bihhbW91bnQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgY2FyZENvbnRhaW5lci5zY3JvbGxMZWZ0KGFtb3VudCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgY2FyZENvbnRhaW5lci5zY3JvbGxSaWdodChhbW91bnQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICAgICAgICBjYXJkQ29udGFpbmVyLnNjcm9sbFRvQ2VudGVyKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGVTb3J0KHBsdWdpbjogQ2FyZE5hdmlnYXRvclBsdWdpbikge1xuICAgIGxldCBzb3J0UG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2FyZC1uYXZpZ2F0b3Itc29ydC1wb3B1cCcpIGFzIEhUTUxFbGVtZW50O1xuXG4gICAgaWYgKCFzb3J0UG9wdXApIHtcbiAgICAgICAgc29ydFBvcHVwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHNvcnRQb3B1cC5jbGFzc05hbWUgPSAnY2FyZC1uYXZpZ2F0b3Itc29ydC1wb3B1cCc7XG5cbiAgICAgICAgY29uc3QgY3VycmVudFNvcnQgPSBgJHtwbHVnaW4uc2V0dGluZ3Muc29ydENyaXRlcmlvbn1fJHtwbHVnaW4uc2V0dGluZ3Muc29ydE9yZGVyfWA7XG5cbiAgICAgICAgY29uc3QgYWRkU29ydE9wdGlvbiA9ICh2YWx1ZTogc3RyaW5nLCBsYWJlbDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICAgIG9wdGlvbi50ZXh0Q29udGVudCA9IGxhYmVsO1xuICAgICAgICAgICAgb3B0aW9uLmNsYXNzTGlzdC50b2dnbGUoJ2FjdGl2ZScsIGN1cnJlbnRTb3J0ID09PSB2YWx1ZSk7XG4gICAgICAgICAgICBvcHRpb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgW2NyaXRlcmlvbiwgb3JkZXJdID0gdmFsdWUuc3BsaXQoJ18nKSBhcyBbU29ydENyaXRlcmlvbiwgJ2FzYycgfCAnZGVzYyddO1xuICAgICAgICAgICAgICAgIHBsdWdpbi5zZXR0aW5ncy5zb3J0Q3JpdGVyaW9uID0gY3JpdGVyaW9uO1xuICAgICAgICAgICAgICAgIHBsdWdpbi5zZXR0aW5ncy5zb3J0T3JkZXIgPSBvcmRlcjtcbiAgICAgICAgICAgICAgICBhd2FpdCBwbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgcGx1Z2luLnJlZnJlc2hWaWV3cygpO1xuICAgICAgICAgICAgICAgIHNvcnRQb3B1cC5yZW1vdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc29ydFBvcHVwLmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgICAgIH07XG5cbiAgICAgICAgYWRkU29ydE9wdGlvbignZmlsZU5hbWVfYXNjJywgJ0ZpbGUgbmFtZSAoQSB0byBaKScpO1xuICAgICAgICBhZGRTb3J0T3B0aW9uKCdmaWxlTmFtZV9kZXNjJywgJ0ZpbGUgbmFtZSAoWiB0byBBKScpO1xuICAgICAgICBhZGRTb3J0T3B0aW9uKCdsYXN0TW9kaWZpZWRfZGVzYycsICdMYXN0IG1vZGlmaWVkIChuZXdlc3QgZmlyc3QpJyk7XG4gICAgICAgIGFkZFNvcnRPcHRpb24oJ2xhc3RNb2RpZmllZF9hc2MnLCAnTGFzdCBtb2RpZmllZCAob2xkZXN0IGZpcnN0KScpO1xuICAgICAgICBhZGRTb3J0T3B0aW9uKCdjcmVhdGVkX2Rlc2MnLCAnQ3JlYXRlZCAobmV3ZXN0IGZpcnN0KScpO1xuICAgICAgICBhZGRTb3J0T3B0aW9uKCdjcmVhdGVkX2FzYycsICdDcmVhdGVkIChvbGRlc3QgZmlyc3QpJyk7XG5cbiAgICAgICAgLy8gXHVEMjM0XHVCQzE0IFx1RDU1OFx1QjJFOFx1QzVEMCBcdUJDMzBcdUNFNThcbiAgICAgICAgY29uc3QgdG9vbGJhckVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmQtbmF2aWdhdG9yLXRvb2xiYXItY29udGFpbmVyJyk7XG4gICAgICAgIGlmICh0b29sYmFyRWwpIHtcbiAgICAgICAgICAgIHRvb2xiYXJFbC5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyZW5kJywgc29ydFBvcHVwKTtcblxuICAgICAgICAgICAgLy8gXHVENjU0XHVCQTc0XHVDNzU4IFx1QjJFNFx1Qjk3OCBcdUFDRjNcdUM3NDQgXHVEMDc0XHVCOUFEXHVENTU4XHVCQTc0IFx1RDMxRFx1QzVDNVx1Qzc0NCBcdUIyRUJcdUIyOTQgXHVDNzc0XHVCQ0E0XHVEMkI4IFx1Q0Q5NFx1QUMwMFxuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiBvbkNsaWNrT3V0c2lkZShldmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChzb3J0UG9wdXAgJiYgIXNvcnRQb3B1cC5jb250YWlucyhldmVudC50YXJnZXQgYXMgTm9kZSkgJiYgIXRvb2xiYXJFbC5jb250YWlucyhldmVudC50YXJnZXQgYXMgTm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc29ydFBvcHVwLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQ2xpY2tPdXRzaWRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHNvcnRQb3B1cC5yZW1vdmUoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGVTZXR0aW5ncyhwbHVnaW46IENhcmROYXZpZ2F0b3JQbHVnaW4pIHtcbiAgICBsZXQgc2V0dGluZ3NQb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkLW5hdmlnYXRvci1zZXR0aW5ncy1wb3B1cCcpIGFzIEhUTUxFbGVtZW50O1xuXG4gICAgaWYgKCFzZXR0aW5nc1BvcHVwKSB7XG4gICAgICAgIHNldHRpbmdzUG9wdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgc2V0dGluZ3NQb3B1cC5jbGFzc05hbWUgPSAnY2FyZC1uYXZpZ2F0b3Itc2V0dGluZ3MtcG9wdXAnO1xuXG4gICAgICAgIC8vIFx1Q0U3NFx1QjREQyBcdUMyMTggXHVDMTI0XHVDODE1XG4gICAgICAgIGNvbnN0IGNhcmRzUGVyVmlld1NldHRpbmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICBjYXJkc1BlclZpZXdTZXR0aW5nLnR5cGUgPSAncmFuZ2UnO1xuICAgICAgICBjYXJkc1BlclZpZXdTZXR0aW5nLm1pbiA9ICcxJztcbiAgICAgICAgY2FyZHNQZXJWaWV3U2V0dGluZy5tYXggPSAnMTAnO1xuICAgICAgICBjYXJkc1BlclZpZXdTZXR0aW5nLnZhbHVlID0gcGx1Z2luLnNldHRpbmdzLmNhcmRzUGVyVmlldy50b1N0cmluZygpO1xuICAgICAgICBjYXJkc1BlclZpZXdTZXR0aW5nLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xuICAgICAgICAgICAgcGx1Z2luLnNldHRpbmdzLmNhcmRzUGVyVmlldyA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgICAgICAgICBwbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICBwbHVnaW4ucmVmcmVzaFZpZXdzKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBjYXJkc1BlclZpZXdMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgICAgIGNhcmRzUGVyVmlld0xhYmVsLnRleHRDb250ZW50ID0gJ0NhcmRzIFBlciBWaWV3Oic7XG4gICAgICAgIHNldHRpbmdzUG9wdXAuYXBwZW5kQ2hpbGQoY2FyZHNQZXJWaWV3TGFiZWwpO1xuICAgICAgICBzZXR0aW5nc1BvcHVwLmFwcGVuZENoaWxkKGNhcmRzUGVyVmlld1NldHRpbmcpO1xuXG4gICAgICAgIC8vIFx1QUUwMFx1Qzc5MCBcdUQwNkNcdUFFMzAgXHVDMTI0XHVDODE1XG4gICAgICAgIGNvbnN0IGZvbnRTaXplU2V0dGluZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgIGZvbnRTaXplU2V0dGluZy50eXBlID0gJ3JhbmdlJztcbiAgICAgICAgZm9udFNpemVTZXR0aW5nLm1pbiA9ICcxMCc7XG4gICAgICAgIGZvbnRTaXplU2V0dGluZy5tYXggPSAnMzAnO1xuICAgICAgICBmb250U2l6ZVNldHRpbmcudmFsdWUgPSBwbHVnaW4uc2V0dGluZ3MuY29udGVudFNpemUudG9TdHJpbmcoKTtcbiAgICAgICAgZm9udFNpemVTZXR0aW5nLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xuICAgICAgICAgICAgcGx1Z2luLnNldHRpbmdzLmNvbnRlbnRTaXplID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICAgICAgICAgIHBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgIHBsdWdpbi5yZWZyZXNoVmlld3MoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGZvbnRTaXplTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgICAgICBmb250U2l6ZUxhYmVsLnRleHRDb250ZW50ID0gJ0NvbnRlbnQgRm9udCBTaXplOic7XG4gICAgICAgIHNldHRpbmdzUG9wdXAuYXBwZW5kQ2hpbGQoZm9udFNpemVMYWJlbCk7XG4gICAgICAgIHNldHRpbmdzUG9wdXAuYXBwZW5kQ2hpbGQoZm9udFNpemVTZXR0aW5nKTtcblxuICAgICAgICAvLyBcdUQ0NUNcdUMyREMgXHVENTZEXHVCQUE5IFx1QzEyMFx1RDBERFx1Qzc0NCBcdUM3MDRcdUQ1NUMgXHVEMUEwXHVBRTAwIFx1QkM4NFx1RDJCQ1x1QjRFNFxuICAgICAgICBjb25zdCBjcmVhdGVUb2dnbGUgPSAobGFiZWxUZXh0OiBzdHJpbmcsIGluaXRpYWxWYWx1ZTogYm9vbGVhbiwgb25DaGFuZ2U6ICh2YWx1ZTogYm9vbGVhbikgPT4gdm9pZCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBjb25zdCBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgICAgICAgICBsYWJlbC50ZXh0Q29udGVudCA9IGxhYmVsVGV4dDtcblxuICAgICAgICAgICAgY29uc3QgdG9nZ2xlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgIHRvZ2dsZS50eXBlID0gJ2NoZWNrYm94JztcbiAgICAgICAgICAgIHRvZ2dsZS5jaGVja2VkID0gaW5pdGlhbFZhbHVlO1xuICAgICAgICAgICAgdG9nZ2xlLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgb25DaGFuZ2UoKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLmNoZWNrZWQpO1xuICAgICAgICAgICAgICAgIHBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICBwbHVnaW4ucmVmcmVzaFZpZXdzKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGxhYmVsKTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0b2dnbGUpO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBGaWxlIE5hbWUgXHVENDVDXHVDMkRDXG4gICAgICAgIGNvbnN0IGZpbGVOYW1lVG9nZ2xlID0gY3JlYXRlVG9nZ2xlKCdTaG93IEZpbGUgTmFtZScsIHBsdWdpbi5zZXR0aW5ncy5zaG93RmlsZU5hbWUsICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgcGx1Z2luLnNldHRpbmdzLnNob3dGaWxlTmFtZSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgICAgc2V0dGluZ3NQb3B1cC5hcHBlbmRDaGlsZChmaWxlTmFtZVRvZ2dsZSk7XG5cbiAgICAgICAgLy8gRmlyc3QgSGVhZGVyIFx1RDQ1Q1x1QzJEQ1xuICAgICAgICBjb25zdCBmaXJzdEhlYWRlclRvZ2dsZSA9IGNyZWF0ZVRvZ2dsZSgnU2hvdyBGaXJzdCBIZWFkZXInLCBwbHVnaW4uc2V0dGluZ3Muc2hvd0ZpcnN0SGVhZGVyLCAodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHBsdWdpbi5zZXR0aW5ncy5zaG93Rmlyc3RIZWFkZXIgPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNldHRpbmdzUG9wdXAuYXBwZW5kQ2hpbGQoZmlyc3RIZWFkZXJUb2dnbGUpO1xuXG4gICAgICAgIC8vIENvbnRlbnQgXHVENDVDXHVDMkRDXG4gICAgICAgIGNvbnN0IGNvbnRlbnRUb2dnbGUgPSBjcmVhdGVUb2dnbGUoJ1Nob3cgQ29udGVudCcsIHBsdWdpbi5zZXR0aW5ncy5zaG93Q29udGVudCwgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBwbHVnaW4uc2V0dGluZ3Muc2hvd0NvbnRlbnQgPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNldHRpbmdzUG9wdXAuYXBwZW5kQ2hpbGQoY29udGVudFRvZ2dsZSk7XG5cbiAgICAgICAgLy8gRHJhZyBhbmQgRHJvcCBDb250ZW50IFx1RDQ1Q1x1QzJEQyAoXHVDMEM4XHVCODVDIFx1Q0Q5NFx1QUMwMFx1QjQxQyBcdUJEODBcdUJEODQpXG4gICAgICAgIGNvbnN0IGRyYWdEcm9wQ29udGVudFRvZ2dsZSA9IGNyZWF0ZVRvZ2dsZSgnRHJhZyBhbmQgRHJvcCBDb250ZW50JywgcGx1Z2luLnNldHRpbmdzLmRyYWdEcm9wQ29udGVudCwgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBwbHVnaW4uc2V0dGluZ3MuZHJhZ0Ryb3BDb250ZW50ID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICBzZXR0aW5nc1BvcHVwLmFwcGVuZENoaWxkKGRyYWdEcm9wQ29udGVudFRvZ2dsZSk7XG5cbiAgICAgICAgLy8gXHVEMjM0XHVCQzE0IFx1RDU1OFx1QjJFOFx1QzVEMCBcdUJDMzBcdUNFNThcbiAgICAgICAgY29uc3QgdG9vbGJhckVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmQtbmF2aWdhdG9yLXRvb2xiYXItY29udGFpbmVyJyk7XG4gICAgICAgIGlmICh0b29sYmFyRWwpIHtcbiAgICAgICAgICAgIHRvb2xiYXJFbC5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyZW5kJywgc2V0dGluZ3NQb3B1cCk7XG5cbiAgICAgICAgICAgIC8vIFx1RDY1NFx1QkE3NFx1Qzc1OCBcdUIyRTRcdUI5NzggXHVBQ0YzXHVDNzQ0IFx1RDA3NFx1QjlBRFx1RDU1OFx1QkE3NCBcdUQzMURcdUM1QzVcdUM3NDQgXHVCMkVCXHVCMjk0IFx1Qzc3NFx1QkNBNFx1RDJCOCBcdUNEOTRcdUFDMDBcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gb25DbGlja091dHNpZGUoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2V0dGluZ3NQb3B1cCAmJiAhc2V0dGluZ3NQb3B1cC5jb250YWlucyhldmVudC50YXJnZXQgYXMgTm9kZSkgJiYgIXRvb2xiYXJFbC5jb250YWlucyhldmVudC50YXJnZXQgYXMgTm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3NQb3B1cC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsaWNrT3V0c2lkZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBzZXR0aW5nc1BvcHVwLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicpO1xuICAgIH1cbn1cbiIsICIvLyBzcmMvdWkvY2FyZENvbnRhaW5lci9jYXJkQ29udGFpbmVyLnRzXG5cbmltcG9ydCB7IFdvcmtzcGFjZUxlYWYsIFRGaWxlLCBURm9sZGVyIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgQ2FyZE5hdmlnYXRvclBsdWdpbiBmcm9tICdtYWluJztcbmltcG9ydCB7IENhcmRNYWtlciB9IGZyb20gJy4vY2FyZE1ha2VyJ1xuaW1wb3J0IHsgZGVib3VuY2UsIHNvcnRGaWxlcywgc2V0Q29udGFpbmVyU2l6ZSB9IGZyb20gJy4uLy4uL2NvbW1vbi91dGlscyc7XG5pbXBvcnQgeyBDYXJkLCBTb3J0Q3JpdGVyaW9uIH0gZnJvbSAnLi4vLi4vY29tbW9uL3R5cGVzJztcblxuZXhwb3J0IGNsYXNzIENhcmRDb250YWluZXIge1xuICAgIHByaXZhdGUgbGVhZjogV29ya3NwYWNlTGVhZjtcbiAgICBwcml2YXRlIGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xuICAgIHByaXZhdGUgY2FyZE1ha2VyOiBDYXJkTWFrZXI7XG4gICAgcHJpdmF0ZSBwbHVnaW46IENhcmROYXZpZ2F0b3JQbHVnaW47XG5cdHByaXZhdGUgaXNWZXJ0aWNhbDogYm9vbGVhbjtcblx0cHJpdmF0ZSBjYXJkV2lkdGggPSAwO1xuICAgIHByaXZhdGUgY2FyZEhlaWdodCA9IDA7XG5cbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IENhcmROYXZpZ2F0b3JQbHVnaW4sIGxlYWY6IFdvcmtzcGFjZUxlYWYpIHtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgICAgIHRoaXMubGVhZiA9IGxlYWY7XG4gICAgICAgIHRoaXMuY2FyZE1ha2VyID0gbmV3IENhcmRNYWtlcih0aGlzLnBsdWdpbik7XG4gICAgICAgIHRoaXMuaXNWZXJ0aWNhbCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGFzeW5jIGluaXRpYWxpemUoY29udGFpbmVyRWw6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwgPSBjb250YWluZXJFbDtcbiAgICAgICAgYXdhaXQgdGhpcy53YWl0Rm9yTGVhZkNyZWF0aW9uKCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudHMoKTtcbiAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVDb250YWluZXJTdHlsZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29udGFpbmVyRWwpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwuc3R5bGUuZmxleERpcmVjdGlvbiA9IHRoaXMuaXNWZXJ0aWNhbCA/ICdjb2x1bW4nIDogJ3Jvdyc7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lckVsLnN0eWxlLm92ZXJmbG93WCA9IHRoaXMuaXNWZXJ0aWNhbCA/ICdoaWRkZW4nIDogJ2F1dG8nO1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbC5zdHlsZS5vdmVyZmxvd1kgPSB0aGlzLmlzVmVydGljYWwgPyAnYXV0bycgOiAnaGlkZGVuJztcblx0XHRcdHRoaXMuY29udGFpbmVyRWwuc3R5bGUubWFyZ2luVG9wID0gdGhpcy5pc1ZlcnRpY2FsID8gJ3ZhcigtLWNhcmQtbmF2aWdhdG9yLXRvb2xiYXItaGVpZ2h0KScgOiAnMCc7XG5cdFx0XHR0aGlzLmNvbnRhaW5lckVsLnN0eWxlLnBhZGRpbmcgPSB0aGlzLmlzVmVydGljYWwgPyAnMCcgOiAnMXJlbSc7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lckVsLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgICB9XG4gICAgfVxuXG5cdHByaXZhdGUgcmVuZGVyQ2FyZHMoY2FyZHNEYXRhOiBDYXJkW10sIGNhcmRXaWR0aDogbnVtYmVyLCBjYXJkSGVpZ2h0OiBudW1iZXIpIHtcblx0XHRjb25zdCBjb250YWluZXJFbCA9IHRoaXMuY29udGFpbmVyRWw7XG5cdFx0aWYgKCFjb250YWluZXJFbCkgcmV0dXJuO1xuXHRcblx0XHRjb250YWluZXJFbC5pbm5lckhUTUwgPSAnJztcblx0XG4gICAgICAgIGNhcmRzRGF0YS5mb3JFYWNoKChjYXJkRGF0YSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2FyZCA9IHRoaXMuY2FyZE1ha2VyLmNyZWF0ZUNhcmRFbGVtZW50KGNhcmREYXRhKTtcbiAgICAgICAgICAgIGNhcmQuc3R5bGUud2lkdGggPSBgJHtjYXJkV2lkdGh9cHhgO1xuICAgICAgICAgICAgY2FyZC5zdHlsZS5mbGV4U2hyaW5rID0gJzAnO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MuZml4ZWRDYXJkSGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgY2FyZC5zdHlsZS5oZWlnaHQgPSBgJHtjYXJkSGVpZ2h0fXB4YDtcbiAgICAgICAgICAgICAgICBjYXJkLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhcmQuc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nO1xuICAgICAgICAgICAgICAgIGNhcmQuc3R5bGUubWF4SGVpZ2h0ID0gJ25vbmUnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250YWluZXJFbC5hcHBlbmRDaGlsZChjYXJkKTtcblx0XG5cdFx0XHQvLyBcdUM3NzRcdUJCRjhcdUM5QzAgXHVCODVDXHVCNTI5IFx1Q0M5OFx1QjlBQ1xuXHRcdFx0aWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLnJlbmRlckNvbnRlbnRBc0h0bWwpIHtcblx0XHRcdFx0Y2FyZC5xdWVyeVNlbGVjdG9yQWxsKCdpbWcnKS5mb3JFYWNoKChpbWc6IEhUTUxJbWFnZUVsZW1lbnQpID0+IHtcblx0XHRcdFx0XHRpbWcuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcblx0XHRcdFx0XHRcdHRoaXMuYWRqdXN0Q2FyZFNpemUoY2FyZCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFx1RDY1Q1x1QzEzMSBcdUNFNzRcdUI0REMgXHVDQzk4XHVCOUFDXG5cdFx0XHRpZiAoY2FyZERhdGEuZmlsZSA9PT0gdGhpcy5wbHVnaW4uYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCkpIHtcblx0XHRcdFx0Y2FyZC5jbGFzc0xpc3QuYWRkKCdjYXJkLW5hdmlnYXRvci1hY3RpdmUnKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XG5cdFx0Ly8gXHVDMkE0XHVEMDZDXHVCODY0IFx1QzcwNFx1Q0U1OCBcdUM4NzBcdUM4MTVcblx0XHRpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MuY2VudGVyQ2FyZE1ldGhvZCA9PT0gJ3Njcm9sbCcpIHtcblx0XHRcdHRoaXMuc2Nyb2xsVG9BY3RpdmVDYXJkKCk7XG5cdFx0fVxuXHR9XG5cbiAgICBwcml2YXRlIHNjcm9sbFRvQWN0aXZlQ2FyZCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbnRhaW5lckVsKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGFjdGl2ZUNhcmQgPSB0aGlzLmNvbnRhaW5lckVsLnF1ZXJ5U2VsZWN0b3IoJy5jYXJkLW5hdmlnYXRvci1hY3RpdmUnKSBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgaWYgKGFjdGl2ZUNhcmQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVmVydGljYWwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250YWluZXJUb3AgPSB0aGlzLmNvbnRhaW5lckVsLnNjcm9sbFRvcDtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250YWluZXJIZWlnaHQgPSB0aGlzLmNvbnRhaW5lckVsLmNsaWVudEhlaWdodDtcbiAgICAgICAgICAgICAgICBjb25zdCBhY3RpdmVDYXJkVG9wID0gYWN0aXZlQ2FyZC5vZmZzZXRUb3A7XG4gICAgICAgICAgICAgICAgY29uc3QgYWN0aXZlQ2FyZEhlaWdodCA9IGFjdGl2ZUNhcmQuY2xpZW50SGVpZ2h0O1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjcm9sbFRvcCA9IGFjdGl2ZUNhcmRUb3AgLSBjb250YWluZXJUb3AgLSAoY29udGFpbmVySGVpZ2h0IC8gMikgKyAoYWN0aXZlQ2FyZEhlaWdodCAvIDIpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwuc2Nyb2xsVG9wICs9IHNjcm9sbFRvcDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGFpbmVyTGVmdCA9IHRoaXMuY29udGFpbmVyRWwuc2Nyb2xsTGVmdDtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250YWluZXJXaWR0aCA9IHRoaXMuY29udGFpbmVyRWwuY2xpZW50V2lkdGg7XG4gICAgICAgICAgICAgICAgY29uc3QgYWN0aXZlQ2FyZExlZnQgPSBhY3RpdmVDYXJkLm9mZnNldExlZnQ7XG4gICAgICAgICAgICAgICAgY29uc3QgYWN0aXZlQ2FyZFdpZHRoID0gYWN0aXZlQ2FyZC5jbGllbnRXaWR0aDtcbiAgICAgICAgICAgICAgICBjb25zdCBzY3JvbGxMZWZ0ID0gYWN0aXZlQ2FyZExlZnQgLSBjb250YWluZXJMZWZ0IC0gKGNvbnRhaW5lcldpZHRoIC8gMikgKyAoYWN0aXZlQ2FyZFdpZHRoIC8gMik7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbC5zY3JvbGxMZWZ0ICs9IHNjcm9sbExlZnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblx0c2V0T3JpZW50YXRpb24oaXNWZXJ0aWNhbDogYm9vbGVhbikge1xuICAgICAgICB0aGlzLmlzVmVydGljYWwgPSBpc1ZlcnRpY2FsO1xuICAgICAgICB0aGlzLnVwZGF0ZUNvbnRhaW5lclN0eWxlKCk7XG4gICAgfVxuXG4gICAgc2V0Q2FyZFNpemUoY2FyZFdpZHRoOiBudW1iZXIsIGNhcmRIZWlnaHQ6IG51bWJlcikge1xuICAgICAgICB0aGlzLmNhcmRXaWR0aCA9IGNhcmRXaWR0aDtcbiAgICAgICAgdGhpcy5jYXJkSGVpZ2h0ID0gY2FyZEhlaWdodDtcbiAgICB9XG5cbiAgICBnZXRDb250YWluZXJFbCgpOiBIVE1MRWxlbWVudCB8IG51bGwge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXJFbDtcbiAgICB9XG5cbiAgICBnZXRDYXJkU2l6ZUFuZE9yaWVudGF0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2FyZFdpZHRoOiB0aGlzLmNhcmRXaWR0aCxcbiAgICAgICAgICAgIGNhcmRIZWlnaHQ6IHRoaXMuY2FyZEhlaWdodCxcbiAgICAgICAgICAgIGlzVmVydGljYWw6IHRoaXMuaXNWZXJ0aWNhbCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBzY3JvbGxVcChhbW91bnQ6ICdzaW5nbGUnIHwgJ211bHRpcGxlJykge1xuICAgICAgICBpZiAoIXRoaXMuY29udGFpbmVyRWwpIHJldHVybjtcbiAgICAgICAgY29uc3Qgc2Nyb2xsQW1vdW50ID0gYW1vdW50ID09PSAnc2luZ2xlJyA/IHRoaXMuY2FyZEhlaWdodCA6IHRoaXMuY2FyZEhlaWdodCAqIHRoaXMucGx1Z2luLnNldHRpbmdzLmNhcmRzUGVyVmlldztcbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5zY3JvbGxCeSh7IHRvcDogLXNjcm9sbEFtb3VudCwgYmVoYXZpb3I6ICdzbW9vdGgnIH0pO1xuICAgIH1cblxuICAgIHNjcm9sbERvd24oYW1vdW50OiAnc2luZ2xlJyB8ICdtdWx0aXBsZScpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbnRhaW5lckVsKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHNjcm9sbEFtb3VudCA9IGFtb3VudCA9PT0gJ3NpbmdsZScgPyB0aGlzLmNhcmRIZWlnaHQgOiB0aGlzLmNhcmRIZWlnaHQgKiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5jYXJkc1BlclZpZXc7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuc2Nyb2xsQnkoeyB0b3A6IHNjcm9sbEFtb3VudCwgYmVoYXZpb3I6ICdzbW9vdGgnIH0pO1xuICAgIH1cblxuICAgIHNjcm9sbExlZnQoYW1vdW50OiAnc2luZ2xlJyB8ICdtdWx0aXBsZScpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbnRhaW5lckVsKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHNjcm9sbEFtb3VudCA9IGFtb3VudCA9PT0gJ3NpbmdsZScgPyB0aGlzLmNhcmRXaWR0aCA6IHRoaXMuY2FyZFdpZHRoICogdGhpcy5wbHVnaW4uc2V0dGluZ3MuY2FyZHNQZXJWaWV3O1xuICAgICAgICB0aGlzLmNvbnRhaW5lckVsLnNjcm9sbEJ5KHsgbGVmdDogLXNjcm9sbEFtb3VudCwgYmVoYXZpb3I6ICdzbW9vdGgnIH0pO1xuICAgIH1cblxuICAgIHNjcm9sbFJpZ2h0KGFtb3VudDogJ3NpbmdsZScgfCAnbXVsdGlwbGUnKSB7XG4gICAgICAgIGlmICghdGhpcy5jb250YWluZXJFbCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBzY3JvbGxBbW91bnQgPSBhbW91bnQgPT09ICdzaW5nbGUnID8gdGhpcy5jYXJkV2lkdGggOiB0aGlzLmNhcmRXaWR0aCAqIHRoaXMucGx1Z2luLnNldHRpbmdzLmNhcmRzUGVyVmlldztcbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5zY3JvbGxCeSh7IGxlZnQ6IHNjcm9sbEFtb3VudCwgYmVoYXZpb3I6ICdzbW9vdGgnIH0pO1xuICAgIH1cblxuICAgIHNjcm9sbFRvQ2VudGVyKCkge1xuICAgICAgICBpZiAoIXRoaXMuY29udGFpbmVyRWwpIHJldHVybjtcbiAgICAgICAgY29uc3QgYWN0aXZlQ2FyZCA9IHRoaXMuY29udGFpbmVyRWwucXVlcnlTZWxlY3RvcignLmNhcmQtbmF2aWdhdG9yLWFjdGl2ZScpIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICBpZiAoYWN0aXZlQ2FyZCkge1xuICAgICAgICAgICAgYWN0aXZlQ2FyZC5zY3JvbGxJbnRvVmlldyh7IGJlaGF2aW9yOiAnc21vb3RoJywgYmxvY2s6ICdjZW50ZXInLCBpbmxpbmU6ICdjZW50ZXInIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyB3YWl0Rm9yTGVhZkNyZWF0aW9uKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrTGVhZiA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb250YWluZXJFbCAmJiB0aGlzLmNvbnRhaW5lckVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNoZWNrTGVhZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNoZWNrTGVhZigpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlZ2lzdGVyRXZlbnRzKCkge1xuICAgICAgICB0aGlzLnBsdWdpbi5yZWdpc3RlckV2ZW50KFxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uYXBwLndvcmtzcGFjZS5vbignYWN0aXZlLWxlYWYtY2hhbmdlJywgZGVib3VuY2UodGhpcy5yZWZyZXNoLmJpbmQodGhpcyksIDEwMCkpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMucGx1Z2luLnJlZ2lzdGVyRXZlbnQoXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5hcHAudmF1bHQub24oJ21vZGlmeScsIGRlYm91bmNlKHRoaXMucmVmcmVzaC5iaW5kKHRoaXMpLCAxMDApKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGFzeW5jIHJlZnJlc2goKSB7XG4gICAgICAgIGxldCBmb2xkZXI6IFRGb2xkZXIgfCBudWxsID0gbnVsbDtcblxuICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MudXNlU2VsZWN0ZWRGb2xkZXIgJiYgdGhpcy5wbHVnaW4uc2V0dGluZ3Muc2VsZWN0ZWRGb2xkZXIpIHtcbiAgICAgICAgICAgIGZvbGRlciA9IHRoaXMucGx1Z2luLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2VsZWN0ZWRGb2xkZXIpIGFzIFRGb2xkZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBhY3RpdmVGaWxlID0gdGhpcy5wbHVnaW4uYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG4gICAgICAgICAgICBmb2xkZXIgPSBhY3RpdmVGaWxlPy5wYXJlbnQgfHwgbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZm9sZGVyIHx8ICF0aGlzLmNvbnRhaW5lckVsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBzZXRDb250YWluZXJTaXplKHRoaXMuY29udGFpbmVyRWwsIHRoaXMuY2FyZFdpZHRoLCB0aGlzLmNhcmRIZWlnaHQsIHRoaXMucGx1Z2luLnNldHRpbmdzLmNhcmRzUGVyVmlldywgdGhpcy5pc1ZlcnRpY2FsKTtcblxuICAgICAgICBjb25zdCBmaWxlcyA9IGZvbGRlci5jaGlsZHJlbi5maWx0ZXIoKGZpbGUpOiBmaWxlIGlzIFRGaWxlID0+IGZpbGUgaW5zdGFuY2VvZiBURmlsZSk7XG4gICAgICAgIGNvbnN0IHNvcnRlZEZpbGVzID0gc29ydEZpbGVzKGZpbGVzLCB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zb3J0Q3JpdGVyaW9uLCB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zb3J0T3JkZXIpO1xuICAgICAgICBjb25zdCBjYXJkc0RhdGEgPSBhd2FpdCBQcm9taXNlLmFsbChzb3J0ZWRGaWxlcy5tYXAoZmlsZSA9PiB0aGlzLmNhcmRNYWtlci5jcmVhdGVDYXJkKGZpbGUpKSk7XG4gICAgICAgIHRoaXMucmVuZGVyQ2FyZHMoY2FyZHNEYXRhLCB0aGlzLmNhcmRXaWR0aCwgdGhpcy5jYXJkSGVpZ2h0KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkanVzdENhcmRTaXplKGNhcmQ6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBjYXJkLnF1ZXJ5U2VsZWN0b3IoJy5jYXJkLW5hdmlnYXRvci1jb250ZW50Jyk7XG4gICAgICAgIGlmIChjb250ZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5maXhlZENhcmRIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50LnN0eWxlLm1heEhlaWdodCA9IGAke2NhcmQuY2xpZW50SGVpZ2h0IC0gNDB9cHhgOyAvLyA0MHB4XHVCMjk0IFx1QjMwMFx1QjdCNVx1QzgwMVx1Qzc3OCBcdUM1RUNcdUJDMzFcbiAgICAgICAgICAgICAgICBjb250ZW50LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQuc3R5bGUubWF4SGVpZ2h0ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgIGNvbnRlbnQuc3R5bGUub3ZlcmZsb3cgPSAndmlzaWJsZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlckFjdGl2ZUNhcmRDZW50ZXJlZChjYXJkc0RhdGE6IENhcmRbXSwgYWN0aXZlSW5kZXg6IG51bWJlciwgY2FyZFdpZHRoOiBudW1iZXIsIGNhcmRIZWlnaHQ6IG51bWJlcikge1xuICAgICAgICBjb25zdCBjb250YWluZXJFbCA9IHRoaXMuY29udGFpbmVyRWw7XG4gICAgICAgIGlmICghY29udGFpbmVyRWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGlzVmVydGljYWwgPSB0aGlzLmlzVmVydGljYWw7XG5cbiAgICAgICAgY29uc3QgbGVmdENhcmRzID0gY2FyZHNEYXRhLnNsaWNlKDAsIGFjdGl2ZUluZGV4KTtcbiAgICAgICAgY29uc3QgcmlnaHRDYXJkcyA9IGNhcmRzRGF0YS5zbGljZShhY3RpdmVJbmRleCArIDEpO1xuXG4gICAgICAgIGNvbnN0IGNhcmRTcGFjaW5nID0gMTU7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lclNpemUgPSBpc1ZlcnRpY2FsID8gY2FyZEhlaWdodCA6IGNhcmRXaWR0aDtcbiAgICAgICAgY29uc3QgdG90YWxTaXplID0gKGNvbnRhaW5lclNpemUgKyBjYXJkU3BhY2luZykgKiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5jYXJkc1BlclZpZXcgLSBjYXJkU3BhY2luZztcbiAgICAgICAgY29uc3QgYWN0aXZlQ2FyZE9mZnNldCA9ICgodG90YWxTaXplIC0gY29udGFpbmVyU2l6ZSkgLyAyKTtcblxuICAgICAgICBsZXQgY3VycmVudE9mZnNldCA9IGFjdGl2ZUNhcmRPZmZzZXQgLSAoKGxlZnRDYXJkcy5sZW5ndGggKiBjb250YWluZXJTaXplKSArIChsZWZ0Q2FyZHMubGVuZ3RoICogY2FyZFNwYWNpbmcpKTtcblxuICAgICAgICBsZWZ0Q2FyZHMuZm9yRWFjaCgoY2FyZERhdGEpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNhcmQgPSB0aGlzLmNhcmRNYWtlci5jcmVhdGVDYXJkRWxlbWVudChjYXJkRGF0YSk7XG4gICAgICAgICAgICBjYXJkLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgICAgIGNhcmQuc3R5bGUud2lkdGggPSBgJHtjYXJkV2lkdGh9cHhgO1xuICAgICAgICAgICAgY2FyZC5zdHlsZS5oZWlnaHQgPSBgJHtjYXJkSGVpZ2h0fXB4YDtcbiAgICAgICAgICAgIGlmIChpc1ZlcnRpY2FsKSB7XG4gICAgICAgICAgICAgICAgY2FyZC5zdHlsZS50b3AgPSBgJHtjdXJyZW50T2Zmc2V0fXB4YDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FyZC5zdHlsZS5sZWZ0ID0gYCR7Y3VycmVudE9mZnNldH1weGA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250YWluZXJFbC5hcHBlbmRDaGlsZChjYXJkKTtcbiAgICAgICAgICAgIGN1cnJlbnRPZmZzZXQgKz0gY29udGFpbmVyU2l6ZSArIGNhcmRTcGFjaW5nO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBhY3RpdmVDYXJkID0gdGhpcy5jYXJkTWFrZXIuY3JlYXRlQ2FyZEVsZW1lbnQoY2FyZHNEYXRhW2FjdGl2ZUluZGV4XSk7XG4gICAgICAgIGFjdGl2ZUNhcmQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICBhY3RpdmVDYXJkLnN0eWxlLndpZHRoID0gYCR7Y2FyZFdpZHRofXB4YDtcbiAgICAgICAgYWN0aXZlQ2FyZC5zdHlsZS5oZWlnaHQgPSBgJHtjYXJkSGVpZ2h0fXB4YDtcbiAgICAgICAgaWYgKGlzVmVydGljYWwpIHtcbiAgICAgICAgICAgIGFjdGl2ZUNhcmQuc3R5bGUudG9wID0gYCR7YWN0aXZlQ2FyZE9mZnNldH1weGA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY3RpdmVDYXJkLnN0eWxlLmxlZnQgPSBgJHthY3RpdmVDYXJkT2Zmc2V0fXB4YDtcbiAgICAgICAgfVxuICAgICAgICBjb250YWluZXJFbC5hcHBlbmRDaGlsZChhY3RpdmVDYXJkKTtcblxuICAgICAgICBjdXJyZW50T2Zmc2V0ID0gYWN0aXZlQ2FyZE9mZnNldCArIGNvbnRhaW5lclNpemUgKyBjYXJkU3BhY2luZztcbiAgICAgICAgcmlnaHRDYXJkcy5mb3JFYWNoKChjYXJkRGF0YSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2FyZCA9IHRoaXMuY2FyZE1ha2VyLmNyZWF0ZUNhcmRFbGVtZW50KGNhcmREYXRhKTtcbiAgICAgICAgICAgIGNhcmQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICAgICAgY2FyZC5zdHlsZS53aWR0aCA9IGAke2NhcmRXaWR0aH1weGA7XG4gICAgICAgICAgICBjYXJkLnN0eWxlLmhlaWdodCA9IGAke2NhcmRIZWlnaHR9cHhgO1xuICAgICAgICAgICAgaWYgKGlzVmVydGljYWwpIHtcbiAgICAgICAgICAgICAgICBjYXJkLnN0eWxlLnRvcCA9IGAke2N1cnJlbnRPZmZzZXR9cHhgO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYXJkLnN0eWxlLmxlZnQgPSBgJHtjdXJyZW50T2Zmc2V0fXB4YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRhaW5lckVsLmFwcGVuZENoaWxkKGNhcmQpO1xuICAgICAgICAgICAgY3VycmVudE9mZnNldCArPSBjb250YWluZXJTaXplICsgY2FyZFNwYWNpbmc7XG4gICAgICAgIH0pO1xuICAgIH1cblxuXHRwdWJsaWMgZGlzcGxheUNhcmRzKGZpbHRlcmVkRmlsZXM6IFRGaWxlW10pIHtcblx0fVxuXG5cdHB1YmxpYyBhc3luYyBzZWFyY2hDYXJkcyhzZWFyY2hUZXJtOiBzdHJpbmcpIHtcblx0XHRjb25zdCBhY3RpdmVGaWxlID0gdGhpcy5wbHVnaW4uYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG5cdFx0aWYgKCFhY3RpdmVGaWxlKSByZXR1cm47XG5cdFxuXHRcdGNvbnN0IGZvbGRlciA9IGFjdGl2ZUZpbGUucGFyZW50O1xuXHRcdGlmICghZm9sZGVyKSByZXR1cm47XG5cdFxuXHRcdGNvbnN0IGZpbGVzID0gZm9sZGVyLmNoaWxkcmVuLmZpbHRlcigoZmlsZSk6IGZpbGUgaXMgVEZpbGUgPT4gZmlsZSBpbnN0YW5jZW9mIFRGaWxlKTtcblx0XHRjb25zdCBmaWx0ZXJlZEZpbGVzID0gYXdhaXQgdGhpcy5maWx0ZXJGaWxlc0J5Q29udGVudChmaWxlcywgc2VhcmNoVGVybSk7XG5cdFxuXHRcdGNvbnN0IGNhcmRzID0gYXdhaXQgUHJvbWlzZS5hbGwoZmlsdGVyZWRGaWxlcy5tYXAoZmlsZSA9PiB0aGlzLmNhcmRNYWtlci5jcmVhdGVDYXJkKGZpbGUpKSk7XG5cdFx0dGhpcy5yZW5kZXJDYXJkcyhjYXJkcywgdGhpcy5jYXJkV2lkdGgsIHRoaXMuY2FyZEhlaWdodCk7XG5cdH1cblx0XG5cdGFzeW5jIGRpc3BsYXlDYXJkc0ZvckZvbGRlcihmb2xkZXI6IFRGb2xkZXIpIHtcblx0XHRjb25zdCBmaWxlcyA9IGZvbGRlci5jaGlsZHJlbi5maWx0ZXIoKGZpbGUpOiBmaWxlIGlzIFRGaWxlID0+IGZpbGUgaW5zdGFuY2VvZiBURmlsZSk7XG5cdFx0Y29uc3QgY2FyZHMgPSBhd2FpdCBQcm9taXNlLmFsbChmaWxlcy5tYXAoZmlsZSA9PiB0aGlzLmNhcmRNYWtlci5jcmVhdGVDYXJkKGZpbGUpKSk7XG5cdFx0dGhpcy5yZW5kZXJDYXJkcyhjYXJkcywgdGhpcy5jYXJkV2lkdGgsIHRoaXMuY2FyZEhlaWdodCk7XG5cdH1cblxuXHRwcml2YXRlIGFzeW5jIGZpbHRlckZpbGVzQnlDb250ZW50KGZpbGVzOiBURmlsZVtdLCBzZWFyY2hUZXJtOiBzdHJpbmcpOiBQcm9taXNlPFRGaWxlW10+IHtcblx0XHRjb25zdCBsb3dlcmNhc2VTZWFyY2hUZXJtID0gc2VhcmNoVGVybS50b0xvd2VyQ2FzZSgpO1xuXHRcdGNvbnN0IGZpbHRlcmVkRmlsZXMgPSBbXTtcblx0XHRmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpIHtcblx0XHRcdGNvbnN0IGNvbnRlbnQgPSBhd2FpdCB0aGlzLnBsdWdpbi5hcHAudmF1bHQuY2FjaGVkUmVhZChmaWxlKTtcblx0XHRcdGlmIChmaWxlLmJhc2VuYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMobG93ZXJjYXNlU2VhcmNoVGVybSkgfHxcblx0XHRcdFx0Y29udGVudC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGxvd2VyY2FzZVNlYXJjaFRlcm0pKSB7XG5cdFx0XHRcdGZpbHRlcmVkRmlsZXMucHVzaChmaWxlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGZpbHRlcmVkRmlsZXM7XG5cdH1cblxuICAgIHB1YmxpYyBhc3luYyBzb3J0Q2FyZHMoY3JpdGVyaW9uOiBTb3J0Q3JpdGVyaW9uLCBvcmRlcjogJ2FzYycgfCAnZGVzYycpIHtcbiAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Muc29ydENyaXRlcmlvbiA9IGNyaXRlcmlvbjtcbiAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Muc29ydE9yZGVyID0gb3JkZXI7XG4gICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICB9XG5cbiAgICBvbkNsb3NlKCkge31cbn1cbiIsICIvLyBzcmMvdWkvY2FyZENvbnRhaW5lci9jYXJkTWFrZXIudHNcblxuaW1wb3J0IHsgTWVudSwgVEZpbGUsIE1hcmtkb3duUmVuZGVyZXIgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgQ2FyZE5hdmlnYXRvclBsdWdpbiBmcm9tICcuLi8uLi9tYWluJztcbmltcG9ydCB7IENhcmQgfSBmcm9tICcuLi8uLi9jb21tb24vdHlwZXMnO1xuaW1wb3J0IHsgc29ydEZpbGVzLCBzZXBhcmF0ZUZyb250bWF0dGVyQW5kQ29udGVudCB9IGZyb20gJy4uLy4uL2NvbW1vbi91dGlscyc7XG5cbmV4cG9ydCBjbGFzcyBDYXJkTWFrZXIge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcGx1Z2luOiBDYXJkTmF2aWdhdG9yUGx1Z2luKSB7fVxuXG5cdGFzeW5jIGdldENhcmRzRm9yQWN0aXZlRmlsZShhY3RpdmVGaWxlOiBURmlsZSk6IFByb21pc2U8Q2FyZFtdPiB7XG5cdFx0Y29uc3QgZm9sZGVyID0gYWN0aXZlRmlsZS5wYXJlbnQ7XG5cdFx0aWYgKCFmb2xkZXIpIHtcblx0XHRcdHJldHVybiBbXTtcblx0XHR9XG5cdFx0Y29uc3QgZmlsZXMgPSBmb2xkZXIuY2hpbGRyZW4uZmlsdGVyKChmaWxlKTogZmlsZSBpcyBURmlsZSA9PiBmaWxlIGluc3RhbmNlb2YgVEZpbGUpO1xuXHRcdGNvbnN0IHNvcnRlZEZpbGVzID0gc29ydEZpbGVzKFxuXHRcdFx0ZmlsZXMsIFxuXHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3Muc29ydENyaXRlcmlvbiwgXG5cdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5zb3J0T3JkZXJcblx0XHQpO1xuXHRcdHJldHVybiBhd2FpdCBQcm9taXNlLmFsbChzb3J0ZWRGaWxlcy5tYXAoZmlsZSA9PiB0aGlzLmNyZWF0ZUNhcmQoZmlsZSkpKTtcblx0fVxuXG4gICAgcHVibGljIGFzeW5jIGNyZWF0ZUNhcmQoZmlsZTogVEZpbGUpOiBQcm9taXNlPENhcmQ+IHtcbiAgICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IHRoaXMucGx1Z2luLmFwcC52YXVsdC5jYWNoZWRSZWFkKGZpbGUpO1xuICAgICAgICBjb25zdCB7IGNsZWFuQ29udGVudCB9ID0gc2VwYXJhdGVGcm9udG1hdHRlckFuZENvbnRlbnQoY29udGVudCk7XG4gICAgICAgIGNvbnN0IGNvbnRlbnRXaXRob3V0SGVhZGVyID0gdGhpcy5yZW1vdmVGaXJzdEhlYWRlcihjbGVhbkNvbnRlbnQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgIGZpbGVOYW1lOiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93RmlsZU5hbWUgPyBmaWxlLmJhc2VuYW1lIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmlyc3RIZWFkZXI6IHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dGaXJzdEhlYWRlciA/IHRoaXMuZmluZEZpcnN0SGVhZGVyKGNsZWFuQ29udGVudCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjb250ZW50OiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93Q29udGVudCA/IHRoaXMudHJ1bmNhdGVDb250ZW50KGNvbnRlbnRXaXRob3V0SGVhZGVyKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbW92ZUZpcnN0SGVhZGVyKGNvbnRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IGhlYWRlclJlZ2V4ID0gL14jK1xccysoLispJC9tO1xuICAgICAgICByZXR1cm4gY29udGVudC5yZXBsYWNlKGhlYWRlclJlZ2V4LCAnJykudHJpbSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZmluZEZpcnN0SGVhZGVyKGNvbnRlbnQ6IHN0cmluZyk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGNvbnN0IGhlYWRlclJlZ2V4ID0gL14jK1xccysoLispJC9tO1xuICAgICAgICBjb25zdCBtYXRjaCA9IGNvbnRlbnQubWF0Y2goaGVhZGVyUmVnZXgpO1xuICAgICAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXS50cmltKCkgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB0cnVuY2F0ZUNvbnRlbnQoY29udGVudDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgbWF4TGVuZ3RoID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuY29udGVudExlbmd0aCAqIDEwMDtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQubGVuZ3RoIDw9IG1heExlbmd0aCA/IGNvbnRlbnQgOiBjb250ZW50LnNsaWNlKDAsIG1heExlbmd0aCkgKyAnLi4uJztcbiAgICB9XG5cbiAgICBjcmVhdGVDYXJkRWxlbWVudChjYXJkOiBDYXJkKTogSFRNTEVsZW1lbnQge1xuICAgICAgICBjb25zdCBjYXJkRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjYXJkRWxlbWVudC5jbGFzc05hbWUgPSAnY2FyZC1uYXZpZ2F0b3ItY2FyZCc7XG5cbiAgICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dGaWxlTmFtZSAmJiBjYXJkLmZpbGVOYW1lKSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlTmFtZUVsID0gY2FyZEVsZW1lbnQuY3JlYXRlRWwoJ2gzJywgeyB0ZXh0OiBjYXJkLmZpbGVOYW1lIH0pO1xuICAgICAgICAgICAgZmlsZU5hbWVFbC5jbGFzc05hbWUgPSAnY2FyZC1uYXZpZ2F0b3ItZmlsZW5hbWUnO1xuICAgICAgICAgICAgZmlsZU5hbWVFbC5zdHlsZS5mb250U2l6ZSA9IGAke3RoaXMucGx1Z2luLnNldHRpbmdzLmZpbGVOYW1lU2l6ZX1weGA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd0ZpcnN0SGVhZGVyICYmIGNhcmQuZmlyc3RIZWFkZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlckVsID0gY2FyZEVsZW1lbnQuY3JlYXRlRWwoJ2g0JywgeyB0ZXh0OiBjYXJkLmZpcnN0SGVhZGVyIH0pO1xuICAgICAgICAgICAgaGVhZGVyRWwuY2xhc3NOYW1lID0gJ2NhcmQtbmF2aWdhdG9yLWZpcnN0LWhlYWRlcic7XG4gICAgICAgICAgICBoZWFkZXJFbC5zdHlsZS5mb250U2l6ZSA9IGAke3RoaXMucGx1Z2luLnNldHRpbmdzLmZpcnN0SGVhZGVyU2l6ZX1weGA7XG4gICAgICAgIH1cblxuXHRcdGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93Q29udGVudCAmJiBjYXJkLmNvbnRlbnQpIHtcblx0XHRcdGNvbnN0IGNvbnRlbnRFbCA9IGNhcmRFbGVtZW50LmNyZWF0ZUVsKCdkaXYnKTtcblx0XHRcdGNvbnRlbnRFbC5jbGFzc05hbWUgPSAnY2FyZC1uYXZpZ2F0b3ItY29udGVudCc7XG5cdFx0XHRjb250ZW50RWwuc3R5bGUuZm9udFNpemUgPSBgJHt0aGlzLnBsdWdpbi5zZXR0aW5ncy5jb250ZW50U2l6ZX1weGA7XG5cdFx0XG5cdFx0XHRpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MucmVuZGVyQ29udGVudEFzSHRtbCkge1xuXHRcdFx0XHRNYXJrZG93blJlbmRlcmVyLnJlbmRlcihcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5hcHAsXG5cdFx0XHRcdFx0Y2FyZC5jb250ZW50LFxuXHRcdFx0XHRcdGNvbnRlbnRFbCxcblx0XHRcdFx0XHRjYXJkLmZpbGUucGF0aCxcblx0XHRcdFx0XHR0aGlzLnBsdWdpblxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29udGVudEVsLnRleHRDb250ZW50ID0gY2FyZC5jb250ZW50O1xuXHRcdFx0XHRjb250ZW50RWwuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcblx0XHRcdFx0Y29udGVudEVsLnN0eWxlLnRleHRPdmVyZmxvdyA9ICdlbGxpcHNpcyc7XG5cdFx0XHRcdGNvbnRlbnRFbC5zdHlsZS5kaXNwbGF5ID0gJy13ZWJraXQtYm94Jztcblx0XHRcdH1cblx0XHR9XG5cbiAgICAgICAgaWYgKHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpID09PSBjYXJkLmZpbGUpIHtcbiAgICAgICAgICAgIGNhcmRFbGVtZW50LmFkZENsYXNzKCdjYXJkLW5hdmlnYXRvci1hY3RpdmUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFx1Q0U3NFx1QjREQyBcdUMwRERcdUMxMzEgXHVENkM0IFx1QjREQ1x1Qjc5OFx1QURGOCBcdUM1NjQgXHVCNERDXHVCODZEIFx1QkMwRiBcdUIyRTRcdUI5NzggXHVDNzc4XHVEMTMwXHVCNzk5XHVDMTU4IFx1QzEyNFx1QzgxNVxuICAgICAgICB0aGlzLmFkZENhcmRJbnRlcmFjdGlvbnMoY2FyZEVsZW1lbnQsIGNhcmQpO1xuXG4gICAgICAgIHJldHVybiBjYXJkRWxlbWVudDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZENhcmRJbnRlcmFjdGlvbnMoY2FyZEVsZW1lbnQ6IEhUTUxFbGVtZW50LCBjYXJkOiBDYXJkKSB7XG4gICAgICAgIGNhcmRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5vcGVuRmlsZShjYXJkLmZpbGUpKTtcbiAgICAgICAgdGhpcy5zZXR1cERyYWdBbmREcm9wKGNhcmRFbGVtZW50LCBjYXJkKTtcbiAgICAgICAgdGhpcy5zZXR1cENvbnRleHRNZW51KGNhcmRFbGVtZW50LCBjYXJkLmZpbGUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0dXBEcmFnQW5kRHJvcChjYXJkRWxlbWVudDogSFRNTEVsZW1lbnQsIGNhcmQ6IENhcmQpIHtcbiAgICAgICAgY2FyZEVsZW1lbnQuc2V0QXR0cmlidXRlKCdkcmFnZ2FibGUnLCAndHJ1ZScpO1xuICAgICAgICBjYXJkRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC5kYXRhVHJhbnNmZXIpIHtcbiAgICAgICAgICAgICAgICBsZXQgZHJhZ0NvbnRlbnQgPSAnJztcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5kcmFnRHJvcENvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gXHVDRTc0XHVCNERDXHVDNUQwIFx1RDQ1Q1x1QzJEQ1x1QjQxOFx1QjI5NCBcdUQ1NkRcdUJBQTlcdUM1RDAgXHVCNTMwXHVCNzdDIFx1QjREQ1x1Qjc5OFx1QURGOCBcdUM1NjQgXHVCNERDXHVCODZEIFx1QzJEQyBcdUMwQkRcdUM3ODVcdUQ1NjAgXHVCMEI0XHVDNkE5IFx1QUNCMFx1QzgxNVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd0ZpbGVOYW1lICYmIGNhcmQuZmlsZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdDb250ZW50ICs9IGAjIyAke2NhcmQuZmlsZU5hbWV9XFxuXFxuYDsgLy8gXHVEMzBDXHVDNzdDXHVCQTg1IFx1QzU1RVx1QzVEMCBcdUQ1RTRcdUIzNTQgXHVDRDk0XHVBQzAwXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd0ZpcnN0SGVhZGVyICYmIGNhcmQuZmlyc3RIZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdDb250ZW50ICs9IGAjICR7Y2FyZC5maXJzdEhlYWRlcn1cXG5cXG5gOyAvLyBcdUNDQUIgXHVCQzg4XHVDOUY4IFx1RDVFNFx1QjM1NCBcdUM1NUVcdUM1RDAgXHVENUU0XHVCMzU0IFx1Q0Q5NFx1QUMwMFxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dDb250ZW50ICYmIGNhcmQuY29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ0NvbnRlbnQgKz0gYCR7Y2FyZC5jb250ZW50fVxcblxcbmA7IC8vIFx1QkNGOFx1QkIzOCBcdUIwQjRcdUM2QTkgXHVDRDk0XHVBQzAwXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZHJhZ0NvbnRlbnQgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBcdUI5Q0NcdUM1N0QgXHVENDVDXHVDMkRDIFx1QzEyNFx1QzgxNVx1Qzc3NCBcdUI0MThcdUM1QjRcdUM3ODhcdUM5QzAgXHVDNTRBXHVDNzNDXHVCQTc0IFx1QUUzMFx1QkNGOCBcdUQzMENcdUM3N0MgXHVCOUMxXHVEMDZDIFx1QzBCRFx1Qzc4NVxuICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ0NvbnRlbnQgPSBgW1ske2NhcmQuZmlsZS5uYW1lfV1dYDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFwiRHJhZyBhbmQgRHJvcCBDb250ZW50XCIgXHVDNjM1XHVDMTU4XHVDNzc0IFx1QkU0NFx1RDY1Q1x1QzEzMVx1RDY1NFx1QjQxQyBcdUFDQkRcdUM2QjAgXHVEMzBDXHVDNzdDXHVCQTg1IFx1QjlDMVx1RDA2Q1x1Qjk3QyBcdUMwQkRcdUM3ODVcbiAgICAgICAgICAgICAgICAgICAgZHJhZ0NvbnRlbnQgPSBgW1ske2NhcmQuZmlsZS5uYW1lfV1dYDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBldmVudC5kYXRhVHJhbnNmZXIuc2V0RGF0YSgndGV4dC9wbGFpbicsIGRyYWdDb250ZW50LnRyaW0oKSk7XG5cdFx0XHRcdGV2ZW50LmRhdGFUcmFuc2Zlci5zZXREcmFnSW1hZ2UoY2FyZEVsZW1lbnQsIDAsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldHVwQ29udGV4dE1lbnUoY2FyZEVsZW1lbnQ6IEhUTUxFbGVtZW50LCBmaWxlOiBURmlsZSkge1xuICAgICAgICBjYXJkRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIChlKSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBjb25zdCBtZW51ID0gbmV3IE1lbnUoKTtcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UudHJpZ2dlcignZmlsZS1tZW51JywgbWVudSwgZmlsZSwgJ21vcmUtb3B0aW9ucycpO1xuICAgICAgICAgICAgbWVudS5zaG93QXRQb3NpdGlvbih7IHg6IGUuY2xpZW50WCwgeTogZS5jbGllbnRZIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9wZW5GaWxlKGZpbGU6IFRGaWxlKSB7XG4gICAgICAgIHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UuZ2V0TGVhZigpLm9wZW5GaWxlKGZpbGUpO1xuICAgIH1cbn1cbiIsICIvLyBzcmMvY29tbW9uL3V0aWxzLnRzXG5cbmltcG9ydCB7IFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgU29ydENyaXRlcmlvbiB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZGVib3VuY2U8RiBleHRlbmRzICguLi5hcmdzOiB1bmtub3duW10pID0+IHVua25vd24+KGZ1bmM6IEYsIHdhaXRGb3I6IG51bWJlcikge1xuICAgIGxldCB0aW1lb3V0OiBOb2RlSlMuVGltZW91dCB8IG51bGwgPSBudWxsO1xuXG4gICAgcmV0dXJuICguLi5hcmdzOiBQYXJhbWV0ZXJzPEY+KTogUHJvbWlzZTxSZXR1cm5UeXBlPEY+PiA9PiB7XG4gICAgICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPFJldHVyblR5cGU8Rj4+KChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gZnVuYyguLi5hcmdzKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCBhcyBSZXR1cm5UeXBlPEY+KTtcbiAgICAgICAgICAgIH0sIHdhaXRGb3IpO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VwYXJhdGVGcm9udG1hdHRlckFuZENvbnRlbnQoY29udGVudDogc3RyaW5nKTogeyBmcm9udG1hdHRlcjogc3RyaW5nIHwgbnVsbCwgY2xlYW5Db250ZW50OiBzdHJpbmcgfSB7XG4gICAgY29uc3QgZnJvbnRtYXR0ZXJSZWdleCA9IC9eLS0tXFxzKlxcbihbXFxzXFxTXSo/KVxcbi0tLVxccypcXG4vO1xuICAgIGNvbnN0IG1hdGNoID0gY29udGVudC5tYXRjaChmcm9udG1hdHRlclJlZ2V4KTtcbiAgICByZXR1cm4gbWF0Y2hcbiAgICAgICAgPyB7IGZyb250bWF0dGVyOiBtYXRjaFsxXSwgY2xlYW5Db250ZW50OiBjb250ZW50LnNsaWNlKG1hdGNoWzBdLmxlbmd0aCkudHJpbSgpIH1cbiAgICAgICAgOiB7IGZyb250bWF0dGVyOiBudWxsLCBjbGVhbkNvbnRlbnQ6IGNvbnRlbnQudHJpbSgpIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzb3J0RmlsZXMoZmlsZXM6IFRGaWxlW10sIGNyaXRlcmlvbjogU29ydENyaXRlcmlvbiwgb3JkZXI6ICdhc2MnIHwgJ2Rlc2MnKTogVEZpbGVbXSB7XG4gICAgcmV0dXJuIGZpbGVzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgbGV0IGNvbXBhcmlzb24gPSAwO1xuICAgICAgICBzd2l0Y2ggKGNyaXRlcmlvbikge1xuICAgICAgICAgICAgY2FzZSAnZmlsZU5hbWUnOlxuICAgICAgICAgICAgICAgIGNvbXBhcmlzb24gPSBhLmJhc2VuYW1lLmxvY2FsZUNvbXBhcmUoYi5iYXNlbmFtZSwgdW5kZWZpbmVkLCB7IG51bWVyaWM6IHRydWUsIHNlbnNpdGl2aXR5OiAnYmFzZScgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdsYXN0TW9kaWZpZWQnOlxuICAgICAgICAgICAgICAgIGNvbXBhcmlzb24gPSBhLnN0YXQubXRpbWUgLSBiLnN0YXQubXRpbWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjcmVhdGVkJzpcbiAgICAgICAgICAgICAgICBjb21wYXJpc29uID0gYS5zdGF0LmN0aW1lIC0gYi5zdGF0LmN0aW1lO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcmRlciA9PT0gJ2FzYycgPyBjb21wYXJpc29uIDogLWNvbXBhcmlzb247XG4gICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVDYXJkU2l6ZShcbiAgICBpc1ZlcnRpY2FsOiBib29sZWFuLCBcbiAgICBjb250YWluZXJSZWN0OiBET01SZWN0LCBcbiAgICBjYXJkc1BlclZpZXc6IG51bWJlciwgXG4gICAgcGFkZGluZyA9IDE1XG4pIHtcbiAgICBjb25zdCB7IHdpZHRoOiBsZWFmV2lkdGgsIGhlaWdodDogbGVhZkhlaWdodCB9ID0gY29udGFpbmVyUmVjdDtcblxuICAgIGxldCBjYXJkV2lkdGg6IG51bWJlciwgY2FyZEhlaWdodDogbnVtYmVyO1xuXG4gICAgaWYgKGlzVmVydGljYWwpIHtcbiAgICAgICAgY2FyZFdpZHRoID0gbGVhZldpZHRoIC0gMiAqIHBhZGRpbmc7XG4gICAgICAgIGNhcmRIZWlnaHQgPSBsZWFmSGVpZ2h0IC8gY2FyZHNQZXJWaWV3O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcmRXaWR0aCA9IGxlYWZXaWR0aCAvIGNhcmRzUGVyVmlldztcbiAgICAgICAgY2FyZEhlaWdodCA9IGxlYWZIZWlnaHQgLSAyICogcGFkZGluZyAtIDgwO1xuICAgIH1cblxuICAgIHJldHVybiB7IGNhcmRXaWR0aCwgY2FyZEhlaWdodCB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0Q29udGFpbmVyU2l6ZShcbiAgICBjb250YWluZXJFbDogSFRNTEVsZW1lbnQsXG4gICAgY2FyZFdpZHRoOiBudW1iZXIsXG4gICAgY2FyZEhlaWdodDogbnVtYmVyLFxuICAgIGNhcmRzUGVyVmlldzogbnVtYmVyLFxuICAgIGlzVmVydGljYWw6IGJvb2xlYW5cbikge1xuICAgIGlmIChpc1ZlcnRpY2FsKSB7XG4gICAgICAgIGNvbnRhaW5lckVsLnN0eWxlLmZsZXhEaXJlY3Rpb24gPSAnY29sdW1uJztcbiAgICAgICAgY29udGFpbmVyRWwuc3R5bGUud2lkdGggPSBgJHtjYXJkV2lkdGh9cHhgO1xuICAgICAgICBjb250YWluZXJFbC5zdHlsZS5oZWlnaHQgPSBgJHtjYXJkSGVpZ2h0ICogY2FyZHNQZXJWaWV3fXB4YDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb250YWluZXJFbC5zdHlsZS5mbGV4RGlyZWN0aW9uID0gJ3Jvdyc7XG4gICAgICAgIGNvbnRhaW5lckVsLnN0eWxlLndpZHRoID0gYCR7Y2FyZFdpZHRoICogY2FyZHNQZXJWaWV3IC0gMzB9cHhgO1xuICAgICAgICBjb250YWluZXJFbC5zdHlsZS5oZWlnaHQgPSBgJHtjYXJkSGVpZ2h0fXB4YDtcbiAgICB9XG59XG4iLCAiLy8gc3JjL3VpL3NldHRpbmdzVGFiLnRzXG5cbmltcG9ydCB7IEFwcCwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZyB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCBDYXJkTmF2aWdhdG9yUGx1Z2luIGZyb20gJy4uL21haW4nO1xuaW1wb3J0IHsgRm9sZGVyU3VnZ2VzdE1vZGFsIH0gZnJvbSAnLi90b29sYmFyL3Rvb2xiYXJBY3Rpb25zJztcbmltcG9ydCB7IFNvcnRDcml0ZXJpb24gfSBmcm9tICcuLi9jb21tb24vdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwcml2YXRlIHBsdWdpbjogQ2FyZE5hdmlnYXRvclBsdWdpbikge1xuICAgICAgICBzdXBlcihhcHAsIHBsdWdpbik7XG4gICAgfVxuXG4gICAgZGlzcGxheSgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdDYXJkcyBwZXIgdmlldycpXG4gICAgICAgICAgICAuc2V0RGVzYygnTnVtYmVyIG9mIGNhcmRzIHRvIGRpc3BsYXkgYXQgb25jZScpXG4gICAgICAgICAgICAuYWRkU2xpZGVyKHNsaWRlciA9PiBzbGlkZXJcbiAgICAgICAgICAgICAgICAuc2V0TGltaXRzKDMsIDksIDEpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmNhcmRzUGVyVmlldylcbiAgICAgICAgICAgICAgICAuc2V0RHluYW1pY1Rvb2x0aXAoKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuY2FyZHNQZXJWaWV3ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5yZWZyZXNoVmlld3MoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHQuc2V0TmFtZSgnRm9sZGVyIFNlbGVjdGlvbicpXG5cdFx0LnNldERlc2MoJ0Nob29zZSB3aGV0aGVyIHRvIHVzZSB0aGUgYWN0aXZlIGZpbGVcXCdzIGZvbGRlciBvciBhIHNlbGVjdGVkIGZvbGRlcicpXG5cdFx0LmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IGRyb3Bkb3duXG5cdFx0XHQuYWRkT3B0aW9uKCdhY3RpdmUnLCAnQWN0aXZlIEZpbGVcXCdzIEZvbGRlcicpXG5cdFx0XHQuYWRkT3B0aW9uKCdzZWxlY3RlZCcsICdTZWxlY3RlZCBGb2xkZXInKVxuXHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnVzZVNlbGVjdGVkRm9sZGVyID8gJ3NlbGVjdGVkJyA6ICdhY3RpdmUnKVxuXHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy51c2VTZWxlY3RlZEZvbGRlciA9IHZhbHVlID09PSAnc2VsZWN0ZWQnO1xuXHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0dGhpcy5kaXNwbGF5KCk7IC8vIFx1QzEyNFx1QzgxNSBcdUJDQzBcdUFDQkQgXHVDMkRDIFx1RDY1NFx1QkE3NCBcdUMwQzhcdUI4NUNcdUFDRTBcdUNFNjhcblx0XHRcdH0pKTtcblxuXHRcdGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy51c2VTZWxlY3RlZEZvbGRlcikge1xuXHRcdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHRcdC5zZXROYW1lKCdTZWxlY3QgRm9sZGVyJylcblx0XHRcdFx0LnNldERlc2MoJ0Nob29zZSBhIGZvbGRlciBmb3IgQ2FyZCBOYXZpZ2F0b3InKVxuXHRcdFx0XHQuYWRkQnV0dG9uKGJ1dHRvbiA9PiBidXR0b25cblx0XHRcdFx0XHQuc2V0QnV0dG9uVGV4dCh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zZWxlY3RlZEZvbGRlciB8fCAnQ2hvb3NlIGZvbGRlcicpXG5cdFx0XHRcdFx0Lm9uQ2xpY2soKCkgPT4ge1xuXHRcdFx0XHRcdFx0bmV3IEZvbGRlclN1Z2dlc3RNb2RhbCh0aGlzLnBsdWdpbiwgKGZvbGRlcikgPT4ge1xuXHRcdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5zZWxlY3RlZEZvbGRlciA9IGZvbGRlci5wYXRoO1xuXHRcdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHRcdFx0dGhpcy5kaXNwbGF5KCk7IC8vIFx1RDNGNFx1QjM1NCBcdUMxMjBcdUQwREQgXHVENkM0IFx1RDY1NFx1QkE3NCBcdUMwQzhcdUI4NUNcdUFDRTBcdUNFNjhcblx0XHRcdFx0XHRcdH0pLm9wZW4oKTtcblx0XHRcdFx0XHR9KSk7XG5cdFx0fVxuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ0RlZmF1bHQgc29ydCBtZXRob2QnKVxuICAgICAgICAgICAgLnNldERlc2MoJ0Nob29zZSB0aGUgZGVmYXVsdCBzb3J0aW5nIG1ldGhvZCBmb3IgY2FyZHMnKVxuICAgICAgICAgICAgLmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IHtcbiAgICAgICAgICAgICAgICBkcm9wZG93blxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKCdmaWxlTmFtZV9hc2MnLCAnRmlsZSBuYW1lIChBIHRvIFopJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbignZmlsZU5hbWVfZGVzYycsICdGaWxlIG5hbWUgKFogdG8gQSknKVxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKCdsYXN0TW9kaWZpZWRfZGVzYycsICdMYXN0IG1vZGlmaWVkIChuZXdlc3QgZmlyc3QpJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbignbGFzdE1vZGlmaWVkX2FzYycsICdMYXN0IG1vZGlmaWVkIChvbGRlc3QgZmlyc3QpJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbignY3JlYXRlZF9kZXNjJywgJ0NyZWF0ZWQgKG5ld2VzdCBmaXJzdCknKVxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKCdjcmVhdGVkX2FzYycsICdDcmVhdGVkIChvbGRlc3QgZmlyc3QpJylcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKGAke3RoaXMucGx1Z2luLnNldHRpbmdzLnNvcnRDcml0ZXJpb259XyR7dGhpcy5wbHVnaW4uc2V0dGluZ3Muc29ydE9yZGVyfWApXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFtjcml0ZXJpb24sIG9yZGVyXSA9IHZhbHVlLnNwbGl0KCdfJykgYXMgW1NvcnRDcml0ZXJpb24sICdhc2MnIHwgJ2Rlc2MnXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnNvcnRDcml0ZXJpb24gPSBjcml0ZXJpb247XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zb3J0T3JkZXIgPSBvcmRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4ucmVmcmVzaFZpZXdzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdGaXhlZCBDYXJkIEhlaWdodCcpXG5cdFx0XHQuc2V0RGVzYygnSWYgZW5hYmxlZCwgYWxsIGNhcmRzIHdpbGwgaGF2ZSB0aGUgc2FtZSBoZWlnaHQuIElmIGRpc2FibGVkLCBjYXJkIGhlaWdodCB3aWxsIGFkanVzdCB0byBjb250ZW50LicpXG5cdFx0XHQuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmZpeGVkQ2FyZEhlaWdodClcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5maXhlZENhcmRIZWlnaHQgPSB2YWx1ZTtcblx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdHRoaXMucGx1Z2luLnJlZnJlc2hWaWV3cygpO1xuXHRcdFx0XHR9KSk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdSZW5kZXIgQ29udGVudCBhcyBIVE1MJylcblx0XHRcdC5zZXREZXNjKCdJZiBlbmFibGVkLCBjYXJkIGNvbnRlbnQgd2lsbCBiZSByZW5kZXJlZCBhcyBIVE1MJylcblx0XHRcdC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucmVuZGVyQ29udGVudEFzSHRtbClcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnJlbmRlckNvbnRlbnRBc0h0bWwgPSB2YWx1ZTtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5yZWZyZXNoVmlld3MoKTtcblx0XHRcdFx0fSkpO1xuXG5cdFx0Ly8gbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0Ly8gXHQuc2V0TmFtZSgnQ2VudGVyIENhcmQgTWV0aG9kJylcblx0XHQvLyBcdC5zZXREZXNjKCdDaG9vc2UgaG93IHRvIGNlbnRlciB0aGUgYWN0aXZlIGNhcmQgaW4gdGhlIHZpZXcnKVxuXHRcdC8vIFx0LmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IGRyb3Bkb3duXG5cdFx0Ly8gXHRcdC5hZGRPcHRpb24oJ3Njcm9sbCcsICdTY3JvbGwgdG8gYWN0aXZlIGNhcmQnKVxuXHRcdC8vIFx0XHQuYWRkT3B0aW9uKCdjZW50ZXJlZCcsICdSZW5kZXIgdGhlIGFjdGl2ZSBjYXJkIGNlbnRyZWQnKVxuXHRcdC8vIFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuY2VudGVyQ2FyZE1ldGhvZClcblx0XHQvLyBcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdC8vIFx0XHRcdGNvbnN0IG1ldGhvZCA9IHZhbHVlIGFzICdzY3JvbGwnIHwgJ2NlbnRlcmVkJztcblx0XHQvLyBcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5jZW50ZXJDYXJkTWV0aG9kID0gbWV0aG9kO1xuXHRcdC8vIFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdC8vIFx0XHRcdHRoaXMucGx1Z2luLnJlZnJlc2hWaWV3cygpO1xuXHRcdC8vIFx0XHR9KSk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHQuc2V0TmFtZSgnRHJhZyBhbmQgRHJvcCBDb250ZW50Jylcblx0XHQuc2V0RGVzYygnV2hlbiBlbmFibGVkLCBkcmFnZ2luZyBhIGNhcmQgd2lsbCBpbnNlcnQgdGhlIG5vdGUgY29udGVudCBpbnN0ZWFkIG9mIGEgbGluay4nKVxuXHRcdC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxuXHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmRyYWdEcm9wQ29udGVudClcblx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZHJhZ0Ryb3BDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR0aGlzLnBsdWdpbi5yZWZyZXNoVmlld3MoKTtcblx0XHRcdH0pKTtcblxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogJ0Rpc3BsYXkgaXRlbXMgU2V0dGluZ3MnIH0pO1xuXG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHQuc2V0TmFtZSgnU2hvdyBGaWxlIE5hbWUnKVxuXHRcdC5zZXREZXNjKCdUb2dnbGUgdG8gZGlzcGxheSBvciBoaWRlIHRoZSBmaWxlIG5hbWUgb24gY2FyZHMnKVxuXHRcdC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxuXHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dGaWxlTmFtZSlcblx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd0ZpbGVOYW1lID0gdmFsdWU7XG5cdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR0aGlzLnBsdWdpbi5yZWZyZXNoVmlld3MoKTtcblx0XHRcdH0pKTtcblxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJ0ZpbGUgTmFtZSBTaXplJylcblx0XHRcdC5zZXREZXNjKCdTZXQgdGhlIGZvbnQgc2l6ZSBmb3IgdGhlIGZpbGUgbmFtZScpXG5cdFx0XHQuYWRkU2xpZGVyKHNsaWRlciA9PiBzbGlkZXJcblx0XHRcdFx0LnNldExpbWl0cygxNSwgMjUsIDEpXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5maWxlTmFtZVNpemUpXG5cdFx0XHRcdC5zZXREeW5hbWljVG9vbHRpcCgpXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5maWxlTmFtZVNpemUgPSB2YWx1ZTtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5yZWZyZXNoVmlld3MoKTtcblx0XHRcdFx0fSkpO1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnU2hvdyBGaXJzdCBIZWFkZXInKVxuXHRcdFx0LnNldERlc2MoJ1RvZ2dsZSB0byBkaXNwbGF5IG9yIGhpZGUgdGhlIGZpcnN0IGhlYWRlciBvbiBjYXJkcycpXG5cdFx0XHQuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dGaXJzdEhlYWRlcilcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dGaXJzdEhlYWRlciA9IHZhbHVlO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnJlZnJlc2hWaWV3cygpO1xuXHRcdFx0XHR9KSk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdGaXJzdCBIZWFkZXIgU2l6ZScpXG5cdFx0XHQuc2V0RGVzYygnU2V0IHRoZSBmb250IHNpemUgZm9yIHRoZSBmaXJzdCBoZWFkZXInKVxuXHRcdFx0LmFkZFNsaWRlcihzbGlkZXIgPT4gc2xpZGVyXG5cdFx0XHRcdC5zZXRMaW1pdHMoMTUsIDI1LCAxKVxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZmlyc3RIZWFkZXJTaXplKVxuXHRcdFx0XHQuc2V0RHluYW1pY1Rvb2x0aXAoKVxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZmlyc3RIZWFkZXJTaXplID0gdmFsdWU7XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4ucmVmcmVzaFZpZXdzKCk7XG5cdFx0XHRcdH0pKTtcblxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJ1Nob3cgQ29udGVudCcpXG5cdFx0XHQuc2V0RGVzYygnVG9nZ2xlIHRvIGRpc3BsYXkgb3IgaGlkZSB0aGUgY29udGVudCBvbiBjYXJkcycpXG5cdFx0XHQuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dDb250ZW50KVxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd0NvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5yZWZyZXNoVmlld3MoKTtcblx0XHRcdFx0fSkpO1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnQ29udGVudCBTaXplJylcblx0XHRcdC5zZXREZXNjKCdTZXQgdGhlIGZvbnQgc2l6ZSBmb3IgdGhlIGNvbnRlbnQnKVxuXHRcdFx0LmFkZFNsaWRlcihzbGlkZXIgPT4gc2xpZGVyXG5cdFx0XHRcdC5zZXRMaW1pdHMoMTAsIDIwLCAxKVxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuY29udGVudFNpemUpXG5cdFx0XHRcdC5zZXREeW5hbWljVG9vbHRpcCgpXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5jb250ZW50U2l6ZSA9IHZhbHVlO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnJlZnJlc2hWaWV3cygpO1xuXHRcdFx0XHR9KSk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHQuc2V0TmFtZSgnQ29udGVudCBMZW5ndGgnKVxuXHRcdC5zZXREZXNjKCdNYXhpbXVtIGNvbnRlbnQgbGVuZ3RoIGRpc3BsYXllZCBvbiBlYWNoIGNhcmQnKVxuXHRcdC5hZGRTbGlkZXIoc2xpZGVyID0+IHNsaWRlclxuXHRcdFx0LnNldExpbWl0cygxLCAxMCwgMSlcblx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5jb250ZW50TGVuZ3RoKVxuXHRcdFx0LnNldER5bmFtaWNUb29sdGlwKClcblx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuY29udGVudExlbmd0aCA9IHZhbHVlO1xuXHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0dGhpcy5wbHVnaW4ucmVmcmVzaFZpZXdzKCk7XG5cdFx0XHR9KSk7XG4gICAgfVxufVxuIiwgIi8vIHNyYy9jb21tb24vc2V0dGluZ3MudHNcblxuaW1wb3J0IHsgQ2FyZE5hdmlnYXRvclNldHRpbmdzLCBTb3J0Q3JpdGVyaW9uIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1NFVFRJTkdTOiBDYXJkTmF2aWdhdG9yU2V0dGluZ3MgPSB7XG4gICAgY2FyZHNQZXJWaWV3OiA2LFxuXHR1c2VTZWxlY3RlZEZvbGRlcjogZmFsc2UsXG4gICAgc2VsZWN0ZWRGb2xkZXI6IG51bGwsXG5cdHNvcnRDcml0ZXJpb246ICdmaWxlTmFtZScgYXMgU29ydENyaXRlcmlvbixcbiAgICBzb3J0T3JkZXI6ICdhc2MnIGFzICdhc2MnIHwgJ2Rlc2MnLFxuXHRmaXhlZENhcmRIZWlnaHQ6IHRydWUsXG5cdHJlbmRlckNvbnRlbnRBc0h0bWw6IGZhbHNlLFxuICAgIGNlbnRlckNhcmRNZXRob2Q6ICdzY3JvbGwnLFxuICAgIGFjdGl2ZUNhcmRCb3JkZXJDb2xvcjogJ3ZhcigtLWFjdGl2ZS1ib3JkZXItY29sb3IpJyxcbiAgICBhY3RpdmVDYXJkQmFja2dyb3VuZENvbG9yOiAndmFyKC0tYWN0aXZlLWJhY2tncm91bmQtY29sb3IpJyxcblx0ZHJhZ0Ryb3BDb250ZW50OiBmYWxzZSxcbiAgICBzaG93RmlsZU5hbWU6IHRydWUsXG4gICAgZmlsZU5hbWVTaXplOiAyMCxcbiAgICBzaG93Rmlyc3RIZWFkZXI6IHRydWUsXG4gICAgZmlyc3RIZWFkZXJTaXplOiAxOCxcbiAgICBzaG93Q29udGVudDogdHJ1ZSxcbiAgICBjb250ZW50U2l6ZTogMTUsXG4gICAgY29udGVudExlbmd0aDogNSxcbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUEsSUFBQUEsbUJBQThCOzs7QUNBOUIsSUFBQUMsbUJBQXdDOzs7QUNBeEMsSUFBQUMsbUJBQTJDOzs7QUNBM0Msc0JBQTJDO0FBTXBDLElBQU0scUJBQU4sY0FBaUMsa0NBQTJCO0FBQUEsRUFDL0QsWUFBb0IsUUFBcUMsVUFBcUM7QUFDMUYsVUFBTSxPQUFPLEdBQUc7QUFEQTtBQUFxQztBQUFBLEVBRXpEO0FBQUEsRUFFQSxXQUFzQjtBQUNsQixXQUFPLEtBQUssT0FBTyxJQUFJLE1BQU0sa0JBQWtCLEVBQzFDLE9BQU8sQ0FBQyxTQUEwQixnQkFBZ0IsdUJBQU87QUFBQSxFQUNsRTtBQUFBLEVBRUEsWUFBWSxRQUF5QjtBQUNqQyxXQUFPLE9BQU87QUFBQSxFQUNsQjtBQUFBLEVBRUEsYUFBYSxRQUF1QjtBQUNoQyxTQUFLLFNBQVMsTUFBTTtBQUFBLEVBQ3hCO0FBQ0o7QUE4Qk8sU0FBUyxXQUFXLFFBQTZCO0FBQ3BELE1BQUksWUFBWSxTQUFTLGNBQWMsNEJBQTRCO0FBRW5FLE1BQUksQ0FBQyxXQUFXO0FBQ1osZ0JBQVksU0FBUyxjQUFjLEtBQUs7QUFDeEMsY0FBVSxZQUFZO0FBRXRCLFVBQU0sY0FBYyxHQUFHLE9BQU8sU0FBUyxhQUFhLElBQUksT0FBTyxTQUFTLFNBQVM7QUFFakYsVUFBTSxnQkFBZ0IsQ0FBQyxPQUFlLFVBQWtCO0FBQ3BELFlBQU0sU0FBUyxTQUFTLGNBQWMsUUFBUTtBQUM5QyxhQUFPLGNBQWM7QUFDckIsYUFBTyxVQUFVLE9BQU8sVUFBVSxnQkFBZ0IsS0FBSztBQUN2RCxhQUFPLGlCQUFpQixTQUFTLFlBQVk7QUFDekMsY0FBTSxDQUFDLFdBQVcsS0FBSyxJQUFJLE1BQU0sTUFBTSxHQUFHO0FBQzFDLGVBQU8sU0FBUyxnQkFBZ0I7QUFDaEMsZUFBTyxTQUFTLFlBQVk7QUFDNUIsY0FBTSxPQUFPLGFBQWE7QUFDMUIsZUFBTyxhQUFhO0FBQ3BCLGtCQUFVLE9BQU87QUFBQSxNQUNyQixDQUFDO0FBQ0QsZ0JBQVUsWUFBWSxNQUFNO0FBQUEsSUFDaEM7QUFFQSxrQkFBYyxnQkFBZ0Isb0JBQW9CO0FBQ2xELGtCQUFjLGlCQUFpQixvQkFBb0I7QUFDbkQsa0JBQWMscUJBQXFCLDhCQUE4QjtBQUNqRSxrQkFBYyxvQkFBb0IsOEJBQThCO0FBQ2hFLGtCQUFjLGdCQUFnQix3QkFBd0I7QUFDdEQsa0JBQWMsZUFBZSx3QkFBd0I7QUFHckQsVUFBTSxZQUFZLFNBQVMsY0FBYyxtQ0FBbUM7QUFDNUUsUUFBSSxXQUFXO0FBQ1gsZ0JBQVUsc0JBQXNCLFlBQVksU0FBUztBQUdyRCxlQUFTLGlCQUFpQixTQUFTLFNBQVMsZUFBZSxPQUFPO0FBQzlELFlBQUksYUFBYSxDQUFDLFVBQVUsU0FBUyxNQUFNLE1BQWMsS0FBSyxDQUFDLFVBQVUsU0FBUyxNQUFNLE1BQWMsR0FBRztBQUNyRyxvQkFBVSxPQUFPO0FBQ2pCLG1CQUFTLG9CQUFvQixTQUFTLGNBQWM7QUFBQSxRQUN4RDtBQUFBLE1BQ0osQ0FBQztBQUFBLElBQ0w7QUFBQSxFQUNKLE9BQU87QUFDSCxjQUFVLE9BQU87QUFBQSxFQUNyQjtBQUNKO0FBRU8sU0FBUyxlQUFlLFFBQTZCO0FBQ3hELE1BQUksZ0JBQWdCLFNBQVMsY0FBYyxnQ0FBZ0M7QUFFM0UsTUFBSSxDQUFDLGVBQWU7QUFDaEIsb0JBQWdCLFNBQVMsY0FBYyxLQUFLO0FBQzVDLGtCQUFjLFlBQVk7QUFHMUIsVUFBTSxzQkFBc0IsU0FBUyxjQUFjLE9BQU87QUFDMUQsd0JBQW9CLE9BQU87QUFDM0Isd0JBQW9CLE1BQU07QUFDMUIsd0JBQW9CLE1BQU07QUFDMUIsd0JBQW9CLFFBQVEsT0FBTyxTQUFTLGFBQWEsU0FBUztBQUNsRSx3QkFBb0IsaUJBQWlCLFNBQVMsQ0FBQyxNQUFNO0FBQ2pELFlBQU0sUUFBUyxFQUFFLE9BQTRCO0FBQzdDLGFBQU8sU0FBUyxlQUFlLFNBQVMsT0FBTyxFQUFFO0FBQ2pELGFBQU8sYUFBYTtBQUNwQixhQUFPLGFBQWE7QUFBQSxJQUN4QixDQUFDO0FBQ0QsVUFBTSxvQkFBb0IsU0FBUyxjQUFjLE9BQU87QUFDeEQsc0JBQWtCLGNBQWM7QUFDaEMsa0JBQWMsWUFBWSxpQkFBaUI7QUFDM0Msa0JBQWMsWUFBWSxtQkFBbUI7QUFHN0MsVUFBTSxrQkFBa0IsU0FBUyxjQUFjLE9BQU87QUFDdEQsb0JBQWdCLE9BQU87QUFDdkIsb0JBQWdCLE1BQU07QUFDdEIsb0JBQWdCLE1BQU07QUFDdEIsb0JBQWdCLFFBQVEsT0FBTyxTQUFTLFlBQVksU0FBUztBQUM3RCxvQkFBZ0IsaUJBQWlCLFNBQVMsQ0FBQyxNQUFNO0FBQzdDLFlBQU0sUUFBUyxFQUFFLE9BQTRCO0FBQzdDLGFBQU8sU0FBUyxjQUFjLFNBQVMsT0FBTyxFQUFFO0FBQ2hELGFBQU8sYUFBYTtBQUNwQixhQUFPLGFBQWE7QUFBQSxJQUN4QixDQUFDO0FBQ0QsVUFBTSxnQkFBZ0IsU0FBUyxjQUFjLE9BQU87QUFDcEQsa0JBQWMsY0FBYztBQUM1QixrQkFBYyxZQUFZLGFBQWE7QUFDdkMsa0JBQWMsWUFBWSxlQUFlO0FBR3pDLFVBQU0sZUFBZSxDQUFDLFdBQW1CLGNBQXVCLGFBQXVDO0FBQ25HLFlBQU0sWUFBWSxTQUFTLGNBQWMsS0FBSztBQUM5QyxZQUFNLFFBQVEsU0FBUyxjQUFjLE9BQU87QUFDNUMsWUFBTSxjQUFjO0FBRXBCLFlBQU0sU0FBUyxTQUFTLGNBQWMsT0FBTztBQUM3QyxhQUFPLE9BQU87QUFDZCxhQUFPLFVBQVU7QUFDakIsYUFBTyxpQkFBaUIsVUFBVSxDQUFDLE1BQU07QUFDckMsaUJBQVUsRUFBRSxPQUE0QixPQUFPO0FBQy9DLGVBQU8sYUFBYTtBQUNwQixlQUFPLGFBQWE7QUFBQSxNQUN4QixDQUFDO0FBRUQsZ0JBQVUsWUFBWSxLQUFLO0FBQzNCLGdCQUFVLFlBQVksTUFBTTtBQUM1QixhQUFPO0FBQUEsSUFDWDtBQUdBLFVBQU0saUJBQWlCLGFBQWEsa0JBQWtCLE9BQU8sU0FBUyxjQUFjLENBQUMsVUFBVTtBQUMzRixhQUFPLFNBQVMsZUFBZTtBQUFBLElBQ25DLENBQUM7QUFDRCxrQkFBYyxZQUFZLGNBQWM7QUFHeEMsVUFBTSxvQkFBb0IsYUFBYSxxQkFBcUIsT0FBTyxTQUFTLGlCQUFpQixDQUFDLFVBQVU7QUFDcEcsYUFBTyxTQUFTLGtCQUFrQjtBQUFBLElBQ3RDLENBQUM7QUFDRCxrQkFBYyxZQUFZLGlCQUFpQjtBQUczQyxVQUFNLGdCQUFnQixhQUFhLGdCQUFnQixPQUFPLFNBQVMsYUFBYSxDQUFDLFVBQVU7QUFDdkYsYUFBTyxTQUFTLGNBQWM7QUFBQSxJQUNsQyxDQUFDO0FBQ0Qsa0JBQWMsWUFBWSxhQUFhO0FBR3ZDLFVBQU0sd0JBQXdCLGFBQWEseUJBQXlCLE9BQU8sU0FBUyxpQkFBaUIsQ0FBQyxVQUFVO0FBQzVHLGFBQU8sU0FBUyxrQkFBa0I7QUFBQSxJQUN0QyxDQUFDO0FBQ0Qsa0JBQWMsWUFBWSxxQkFBcUI7QUFHL0MsVUFBTSxZQUFZLFNBQVMsY0FBYyxtQ0FBbUM7QUFDNUUsUUFBSSxXQUFXO0FBQ1gsZ0JBQVUsc0JBQXNCLFlBQVksYUFBYTtBQUd6RCxlQUFTLGlCQUFpQixTQUFTLFNBQVMsZUFBZSxPQUFPO0FBQzlELFlBQUksaUJBQWlCLENBQUMsY0FBYyxTQUFTLE1BQU0sTUFBYyxLQUFLLENBQUMsVUFBVSxTQUFTLE1BQU0sTUFBYyxHQUFHO0FBQzdHLHdCQUFjLE9BQU87QUFDckIsbUJBQVMsb0JBQW9CLFNBQVMsY0FBYztBQUFBLFFBQ3hEO0FBQUEsTUFDSixDQUFDO0FBQUEsSUFDTDtBQUFBLEVBQ0osT0FBTztBQUNILGtCQUFjLFVBQVUsT0FBTyxRQUFRO0FBQUEsRUFDM0M7QUFDSjs7O0FEck1PLElBQU0sVUFBTixNQUFjO0FBQUEsRUFJakIsWUFBb0IsUUFBNkI7QUFBN0I7QUFIcEIsU0FBUSxjQUF1QztBQUkzQyxTQUFLLGFBQWE7QUFBQSxFQUN0QjtBQUFBLEVBRUEsV0FBVyxhQUEwQjtBQUNqQyxTQUFLLGNBQWM7QUFDbkIsU0FBSyxjQUFjO0FBQUEsRUFDdkI7QUFBQSxFQUVILGVBQWUsWUFBcUI7QUFDN0IsUUFBSSxLQUFLLGVBQWUsWUFBWTtBQUNoQyxXQUFLLGFBQWE7QUFDbEIsV0FBSyxtQkFBbUI7QUFDeEIsV0FBSyxjQUFjO0FBQUEsSUFDdkI7QUFBQSxFQUNKO0FBQUEsRUFFSyxxQkFBcUI7QUFDdEIsUUFBSSxLQUFLLGFBQWE7QUFDbEIsV0FBSyxZQUFZLFVBQVUsT0FBTyxZQUFZLEtBQUssVUFBVTtBQUM3RCxXQUFLLFlBQVksVUFBVSxPQUFPLGNBQWMsQ0FBQyxLQUFLLFVBQVU7QUFBQSxJQUNwRTtBQUFBLEVBQ0o7QUFBQSxFQUVRLGdCQUFnQjtBQUNwQixRQUFJLENBQUMsS0FBSyxhQUFhO0FBQ25CO0FBQUEsSUFDSjtBQUVBLFNBQUssWUFBWSxNQUFNO0FBRXZCLFVBQU0sbUJBQW1CLFNBQVMsY0FBYyxLQUFLO0FBQ3JELHFCQUFpQixZQUFZO0FBRTdCLFVBQU0sa0JBQWtCLEtBQUssc0JBQXNCO0FBQ25ELFVBQU0sWUFBWSxLQUFLLGdCQUFnQjtBQUN2QyxVQUFNLHVCQUF1QixLQUFLLDJCQUEyQjtBQUU3RCxxQkFBaUIsWUFBWSxlQUFlO0FBQzVDLHFCQUFpQixZQUFZLFNBQVM7QUFDdEMscUJBQWlCLFlBQVksb0JBQW9CO0FBRWpELFNBQUssWUFBWSxZQUFZLGdCQUFnQjtBQUFBLEVBQ2pEO0FBQUEsRUFFUSx3QkFBcUM7QUFDekMsVUFBTSxZQUFZLFNBQVMsY0FBYyxLQUFLO0FBQzlDLGNBQVUsWUFBWTtBQUV0QixVQUFNLFFBQVEsU0FBUyxjQUFjLE9BQU87QUFDNUMsVUFBTSxPQUFPO0FBQ2IsVUFBTSxjQUFjO0FBQ3BCLFVBQU0sWUFBWTtBQUVsQixVQUFNLGlCQUFpQixhQUFTLDJCQUFTLE9BQU8sTUFBYTtBQUN6RCxZQUFNLGFBQWMsRUFBRSxPQUE0QjtBQUNsRCxZQUFNLE9BQU8sS0FBSyxPQUFPLElBQUksVUFBVSxnQkFBZ0IscUJBQXFCLEVBQUUsQ0FBQyxFQUFFO0FBQ2pGLFlBQU0sS0FBSyxjQUFjLFlBQVksVUFBVTtBQUFBLElBQ25ELEdBQUcsR0FBRyxDQUFDO0FBRVAsY0FBVSxZQUFZLEtBQUs7QUFDM0IsV0FBTztBQUFBLEVBQ1g7QUFBQSxFQUVRLDZCQUEwQztBQUM5QyxVQUFNLFlBQVksU0FBUyxjQUFjLEtBQUs7QUFDOUMsY0FBVSxZQUFZO0FBRXRCLFVBQU0sUUFBUTtBQUFBLE1BQ1YsRUFBRSxNQUFNLFVBQVUsT0FBTyxpQkFBaUIsUUFBUSxNQUFNLEtBQUssbUJBQW1CLEVBQUU7QUFBQSxNQUNsRixFQUFFLE1BQU0sd0JBQXdCLE9BQU8sY0FBYyxRQUFRLE1BQU0sV0FBVyxLQUFLLE1BQU0sRUFBRTtBQUFBLE1BQzNGLEVBQUUsTUFBTSxZQUFZLE9BQU8sWUFBWSxRQUFRLE1BQU0sZUFBZSxLQUFLLE1BQU0sRUFBRTtBQUFBLElBQ3JGO0FBRUEsVUFBTSxRQUFRLFVBQVE7QUFDbEIsWUFBTSxjQUFjLEtBQUssa0JBQWtCLEtBQUssTUFBTSxLQUFLLE9BQU8sS0FBSyxNQUFNO0FBQzdFLFVBQUksS0FBSyxTQUFTLHdCQUF3QjtBQUN0QyxvQkFBWSxVQUFVO0FBQUEsVUFBTztBQUFBLFVBQ3pCLEtBQUssT0FBTyxTQUFTLGtCQUFrQixjQUN2QyxLQUFLLE9BQU8sU0FBUyxjQUFjO0FBQUEsUUFDdkM7QUFBQSxNQUNKO0FBQ0EsZ0JBQVUsWUFBWSxXQUFXO0FBQUEsSUFDckMsQ0FBQztBQUVELFdBQU87QUFBQSxFQUNYO0FBQUEsRUFFUSxrQkFBa0IsVUFBa0IsV0FBbUIsUUFBOEM7QUFDekcsVUFBTSxPQUFPLFNBQVMsY0FBYyxLQUFLO0FBQ3pDLFNBQUssWUFBWTtBQUNqQixTQUFLLGFBQWEsY0FBYyxTQUFTO0FBRXpDLGtDQUFRLE1BQU0sUUFBUTtBQUN0QixTQUFLLGlCQUFpQixTQUFTLE1BQU07QUFFckMsV0FBTztBQUFBLEVBQ1g7QUFBQSxFQUVLLGtCQUErQjtBQUNoQyxVQUFNLFlBQVksU0FBUyxjQUFjLEtBQUs7QUFDOUMsY0FBVSxZQUFZO0FBQ3RCLFdBQU87QUFBQSxFQUNYO0FBQUEsRUFFSSxxQkFBcUI7QUFDM0IsUUFBSSxtQkFBbUIsS0FBSyxRQUFRLENBQUMsV0FBb0I7QUFDeEQsWUFBTSxPQUFPLEtBQUssT0FBTyxJQUFJLFVBQVUsb0JBQW9CLGFBQWE7QUFDeEUsVUFBSSxNQUFNO0FBQ1QsYUFBSyxjQUFjLHNCQUFzQixNQUFNO0FBQUEsTUFDaEQ7QUFBQSxJQUNELENBQUMsRUFBRSxLQUFLO0FBQUEsRUFDVDtBQUFBLEVBRUcsVUFBVTtBQUFBLEVBRVY7QUFBQSxFQUVBLFVBQVU7QUFBQSxFQUVWO0FBQ0o7OztBRW5JQSxJQUFBQyxtQkFBOEM7OztBQ0E5QyxJQUFBQyxtQkFBOEM7OztBQ0d2QyxTQUFTQyxVQUFvRCxNQUFTLFNBQWlCO0FBQzFGLE1BQUksVUFBaUM7QUFFckMsU0FBTyxJQUFJLFNBQWdEO0FBQ3ZELFFBQUksU0FBUztBQUNULG1CQUFhLE9BQU87QUFBQSxJQUN4QjtBQUNBLFdBQU8sSUFBSSxRQUF1QixDQUFDLFlBQVk7QUFDM0MsZ0JBQVUsV0FBVyxNQUFNO0FBQ3ZCLGNBQU0sU0FBUyxLQUFLLEdBQUcsSUFBSTtBQUMzQixnQkFBUSxNQUF1QjtBQUFBLE1BQ25DLEdBQUcsT0FBTztBQUFBLElBQ2QsQ0FBQztBQUFBLEVBQ0w7QUFDSjtBQUVPLFNBQVMsOEJBQThCLFNBQXVFO0FBQ2pILFFBQU0sbUJBQW1CO0FBQ3pCLFFBQU0sUUFBUSxRQUFRLE1BQU0sZ0JBQWdCO0FBQzVDLFNBQU8sUUFDRCxFQUFFLGFBQWEsTUFBTSxDQUFDLEdBQUcsY0FBYyxRQUFRLE1BQU0sTUFBTSxDQUFDLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUM3RSxFQUFFLGFBQWEsTUFBTSxjQUFjLFFBQVEsS0FBSyxFQUFFO0FBQzVEO0FBRU8sU0FBUyxVQUFVLE9BQWdCLFdBQTBCLE9BQWdDO0FBQ2hHLFNBQU8sTUFBTSxLQUFLLENBQUMsR0FBRyxNQUFNO0FBQ3hCLFFBQUksYUFBYTtBQUNqQixZQUFRLFdBQVc7QUFBQSxNQUNmLEtBQUs7QUFDRCxxQkFBYSxFQUFFLFNBQVMsY0FBYyxFQUFFLFVBQVUsUUFBVyxFQUFFLFNBQVMsTUFBTSxhQUFhLE9BQU8sQ0FBQztBQUNuRztBQUFBLE1BQ0osS0FBSztBQUNELHFCQUFhLEVBQUUsS0FBSyxRQUFRLEVBQUUsS0FBSztBQUNuQztBQUFBLE1BQ0osS0FBSztBQUNELHFCQUFhLEVBQUUsS0FBSyxRQUFRLEVBQUUsS0FBSztBQUNuQztBQUFBLElBQ1I7QUFDQSxXQUFPLFVBQVUsUUFBUSxhQUFhLENBQUM7QUFBQSxFQUMzQyxDQUFDO0FBQ0w7QUFFTyxTQUFTLGtCQUNaLFlBQ0EsZUFDQSxjQUNBLFVBQVUsSUFDWjtBQUNFLFFBQU0sRUFBRSxPQUFPLFdBQVcsUUFBUSxXQUFXLElBQUk7QUFFakQsTUFBSSxXQUFtQjtBQUV2QixNQUFJLFlBQVk7QUFDWixnQkFBWSxZQUFZLElBQUk7QUFDNUIsaUJBQWEsYUFBYTtBQUFBLEVBQzlCLE9BQU87QUFDSCxnQkFBWSxZQUFZO0FBQ3hCLGlCQUFhLGFBQWEsSUFBSSxVQUFVO0FBQUEsRUFDNUM7QUFFQSxTQUFPLEVBQUUsV0FBVyxXQUFXO0FBQ25DO0FBRU8sU0FBUyxpQkFDWixhQUNBLFdBQ0EsWUFDQSxjQUNBLFlBQ0Y7QUFDRSxNQUFJLFlBQVk7QUFDWixnQkFBWSxNQUFNLGdCQUFnQjtBQUNsQyxnQkFBWSxNQUFNLFFBQVEsR0FBRyxTQUFTO0FBQ3RDLGdCQUFZLE1BQU0sU0FBUyxHQUFHLGFBQWEsWUFBWTtBQUFBLEVBQzNELE9BQU87QUFDSCxnQkFBWSxNQUFNLGdCQUFnQjtBQUNsQyxnQkFBWSxNQUFNLFFBQVEsR0FBRyxZQUFZLGVBQWUsRUFBRTtBQUMxRCxnQkFBWSxNQUFNLFNBQVMsR0FBRyxVQUFVO0FBQUEsRUFDNUM7QUFDSjs7O0FEN0VPLElBQU0sWUFBTixNQUFnQjtBQUFBLEVBQ25CLFlBQW9CLFFBQTZCO0FBQTdCO0FBQUEsRUFBOEI7QUFBQSxFQUVyRCxNQUFNLHNCQUFzQixZQUFvQztBQUMvRCxVQUFNLFNBQVMsV0FBVztBQUMxQixRQUFJLENBQUMsUUFBUTtBQUNaLGFBQU8sQ0FBQztBQUFBLElBQ1Q7QUFDQSxVQUFNLFFBQVEsT0FBTyxTQUFTLE9BQU8sQ0FBQyxTQUF3QixnQkFBZ0Isc0JBQUs7QUFDbkYsVUFBTSxjQUFjO0FBQUEsTUFDbkI7QUFBQSxNQUNBLEtBQUssT0FBTyxTQUFTO0FBQUEsTUFDckIsS0FBSyxPQUFPLFNBQVM7QUFBQSxJQUN0QjtBQUNBLFdBQU8sTUFBTSxRQUFRLElBQUksWUFBWSxJQUFJLFVBQVEsS0FBSyxXQUFXLElBQUksQ0FBQyxDQUFDO0FBQUEsRUFDeEU7QUFBQSxFQUVHLE1BQWEsV0FBVyxNQUE0QjtBQUNoRCxVQUFNLFVBQVUsTUFBTSxLQUFLLE9BQU8sSUFBSSxNQUFNLFdBQVcsSUFBSTtBQUMzRCxVQUFNLEVBQUUsYUFBYSxJQUFJLDhCQUE4QixPQUFPO0FBQzlELFVBQU0sdUJBQXVCLEtBQUssa0JBQWtCLFlBQVk7QUFDaEUsV0FBTztBQUFBLE1BQ0g7QUFBQSxNQUNBLFVBQVUsS0FBSyxPQUFPLFNBQVMsZUFBZSxLQUFLLFdBQVc7QUFBQSxNQUM5RCxhQUFhLEtBQUssT0FBTyxTQUFTLGtCQUFrQixLQUFLLGdCQUFnQixZQUFZLElBQUk7QUFBQSxNQUN6RixTQUFTLEtBQUssT0FBTyxTQUFTLGNBQWMsS0FBSyxnQkFBZ0Isb0JBQW9CLElBQUk7QUFBQSxJQUM3RjtBQUFBLEVBQ0o7QUFBQSxFQUVRLGtCQUFrQixTQUF5QjtBQUMvQyxVQUFNLGNBQWM7QUFDcEIsV0FBTyxRQUFRLFFBQVEsYUFBYSxFQUFFLEVBQUUsS0FBSztBQUFBLEVBQ2pEO0FBQUEsRUFFUSxnQkFBZ0IsU0FBcUM7QUFDekQsVUFBTSxjQUFjO0FBQ3BCLFVBQU0sUUFBUSxRQUFRLE1BQU0sV0FBVztBQUN2QyxXQUFPLFFBQVEsTUFBTSxDQUFDLEVBQUUsS0FBSyxJQUFJO0FBQUEsRUFDckM7QUFBQSxFQUVRLGdCQUFnQixTQUF5QjtBQUM3QyxVQUFNLFlBQVksS0FBSyxPQUFPLFNBQVMsZ0JBQWdCO0FBQ3ZELFdBQU8sUUFBUSxVQUFVLFlBQVksVUFBVSxRQUFRLE1BQU0sR0FBRyxTQUFTLElBQUk7QUFBQSxFQUNqRjtBQUFBLEVBRUEsa0JBQWtCLE1BQXlCO0FBQ3ZDLFVBQU0sY0FBYyxTQUFTLGNBQWMsS0FBSztBQUNoRCxnQkFBWSxZQUFZO0FBRXhCLFFBQUksS0FBSyxPQUFPLFNBQVMsZ0JBQWdCLEtBQUssVUFBVTtBQUNwRCxZQUFNLGFBQWEsWUFBWSxTQUFTLE1BQU0sRUFBRSxNQUFNLEtBQUssU0FBUyxDQUFDO0FBQ3JFLGlCQUFXLFlBQVk7QUFDdkIsaUJBQVcsTUFBTSxXQUFXLEdBQUcsS0FBSyxPQUFPLFNBQVMsWUFBWTtBQUFBLElBQ3BFO0FBRUEsUUFBSSxLQUFLLE9BQU8sU0FBUyxtQkFBbUIsS0FBSyxhQUFhO0FBQzFELFlBQU0sV0FBVyxZQUFZLFNBQVMsTUFBTSxFQUFFLE1BQU0sS0FBSyxZQUFZLENBQUM7QUFDdEUsZUFBUyxZQUFZO0FBQ3JCLGVBQVMsTUFBTSxXQUFXLEdBQUcsS0FBSyxPQUFPLFNBQVMsZUFBZTtBQUFBLElBQ3JFO0FBRU4sUUFBSSxLQUFLLE9BQU8sU0FBUyxlQUFlLEtBQUssU0FBUztBQUNyRCxZQUFNLFlBQVksWUFBWSxTQUFTLEtBQUs7QUFDNUMsZ0JBQVUsWUFBWTtBQUN0QixnQkFBVSxNQUFNLFdBQVcsR0FBRyxLQUFLLE9BQU8sU0FBUyxXQUFXO0FBRTlELFVBQUksS0FBSyxPQUFPLFNBQVMscUJBQXFCO0FBQzdDLDBDQUFpQjtBQUFBLFVBQ2hCLEtBQUssT0FBTztBQUFBLFVBQ1osS0FBSztBQUFBLFVBQ0w7QUFBQSxVQUNBLEtBQUssS0FBSztBQUFBLFVBQ1YsS0FBSztBQUFBLFFBQ047QUFBQSxNQUNELE9BQU87QUFDTixrQkFBVSxjQUFjLEtBQUs7QUFDN0Isa0JBQVUsTUFBTSxXQUFXO0FBQzNCLGtCQUFVLE1BQU0sZUFBZTtBQUMvQixrQkFBVSxNQUFNLFVBQVU7QUFBQSxNQUMzQjtBQUFBLElBQ0Q7QUFFTSxRQUFJLEtBQUssT0FBTyxJQUFJLFVBQVUsY0FBYyxNQUFNLEtBQUssTUFBTTtBQUN6RCxrQkFBWSxTQUFTLHVCQUF1QjtBQUFBLElBQ2hEO0FBR0EsU0FBSyxvQkFBb0IsYUFBYSxJQUFJO0FBRTFDLFdBQU87QUFBQSxFQUNYO0FBQUEsRUFFUSxvQkFBb0IsYUFBMEIsTUFBWTtBQUM5RCxnQkFBWSxpQkFBaUIsU0FBUyxNQUFNLEtBQUssU0FBUyxLQUFLLElBQUksQ0FBQztBQUNwRSxTQUFLLGlCQUFpQixhQUFhLElBQUk7QUFDdkMsU0FBSyxpQkFBaUIsYUFBYSxLQUFLLElBQUk7QUFBQSxFQUNoRDtBQUFBLEVBRVEsaUJBQWlCLGFBQTBCLE1BQVk7QUFDM0QsZ0JBQVksYUFBYSxhQUFhLE1BQU07QUFDNUMsZ0JBQVksaUJBQWlCLGFBQWEsQ0FBQyxVQUFVO0FBQ2pELFVBQUksTUFBTSxjQUFjO0FBQ3BCLFlBQUksY0FBYztBQUVsQixZQUFJLEtBQUssT0FBTyxTQUFTLGlCQUFpQjtBQUV0QyxjQUFJLEtBQUssT0FBTyxTQUFTLGdCQUFnQixLQUFLLFVBQVU7QUFDcEQsMkJBQWUsTUFBTSxLQUFLLFFBQVE7QUFBQTtBQUFBO0FBQUEsVUFDdEM7QUFFQSxjQUFJLEtBQUssT0FBTyxTQUFTLG1CQUFtQixLQUFLLGFBQWE7QUFDMUQsMkJBQWUsS0FBSyxLQUFLLFdBQVc7QUFBQTtBQUFBO0FBQUEsVUFDeEM7QUFFQSxjQUFJLEtBQUssT0FBTyxTQUFTLGVBQWUsS0FBSyxTQUFTO0FBQ2xELDJCQUFlLEdBQUcsS0FBSyxPQUFPO0FBQUE7QUFBQTtBQUFBLFVBQ2xDO0FBRUEsY0FBSSxnQkFBZ0IsSUFBSTtBQUVwQiwwQkFBYyxLQUFLLEtBQUssS0FBSyxJQUFJO0FBQUEsVUFDckM7QUFBQSxRQUNKLE9BQU87QUFFSCx3QkFBYyxLQUFLLEtBQUssS0FBSyxJQUFJO0FBQUEsUUFDckM7QUFFQSxjQUFNLGFBQWEsUUFBUSxjQUFjLFlBQVksS0FBSyxDQUFDO0FBQ3ZFLGNBQU0sYUFBYSxhQUFhLGFBQWEsR0FBRyxDQUFDO0FBQUEsTUFDekM7QUFBQSxJQUNKLENBQUM7QUFBQSxFQUNMO0FBQUEsRUFFUSxpQkFBaUIsYUFBMEIsTUFBYTtBQUM1RCxnQkFBWSxpQkFBaUIsZUFBZSxDQUFDLE1BQU07QUFDL0MsUUFBRSxlQUFlO0FBQ2pCLFlBQU0sT0FBTyxJQUFJLHNCQUFLO0FBQ3RCLFdBQUssT0FBTyxJQUFJLFVBQVUsUUFBUSxhQUFhLE1BQU0sTUFBTSxjQUFjO0FBQ3pFLFdBQUssZUFBZSxFQUFFLEdBQUcsRUFBRSxTQUFTLEdBQUcsRUFBRSxRQUFRLENBQUM7QUFBQSxJQUN0RCxDQUFDO0FBQUEsRUFDTDtBQUFBLEVBRVEsU0FBUyxNQUFhO0FBQzFCLFNBQUssT0FBTyxJQUFJLFVBQVUsUUFBUSxFQUFFLFNBQVMsSUFBSTtBQUFBLEVBQ3JEO0FBQ0o7OztBRGhKTyxJQUFNLGdCQUFOLE1BQW9CO0FBQUEsRUFTdkIsWUFBWSxRQUE2QixNQUFxQjtBQVA5RCxTQUFRLGNBQWtDO0FBSTdDLFNBQVEsWUFBWTtBQUNqQixTQUFRLGFBQWE7QUFHakIsU0FBSyxTQUFTO0FBQ2QsU0FBSyxPQUFPO0FBQ1osU0FBSyxZQUFZLElBQUksVUFBVSxLQUFLLE1BQU07QUFDMUMsU0FBSyxhQUFhO0FBQUEsRUFDdEI7QUFBQSxFQUVBLE1BQU0sV0FBVyxhQUEwQjtBQUN2QyxTQUFLLGNBQWM7QUFDbkIsVUFBTSxLQUFLLG9CQUFvQjtBQUMvQixTQUFLLGVBQWU7QUFDcEIsU0FBSyxRQUFRO0FBQUEsRUFDakI7QUFBQSxFQUVRLHVCQUF1QjtBQUMzQixRQUFJLEtBQUssYUFBYTtBQUNsQixXQUFLLFlBQVksTUFBTSxVQUFVO0FBQ2pDLFdBQUssWUFBWSxNQUFNLGdCQUFnQixLQUFLLGFBQWEsV0FBVztBQUNwRSxXQUFLLFlBQVksTUFBTSxZQUFZLEtBQUssYUFBYSxXQUFXO0FBQ2hFLFdBQUssWUFBWSxNQUFNLFlBQVksS0FBSyxhQUFhLFNBQVM7QUFDdkUsV0FBSyxZQUFZLE1BQU0sWUFBWSxLQUFLLGFBQWEseUNBQXlDO0FBQzlGLFdBQUssWUFBWSxNQUFNLFVBQVUsS0FBSyxhQUFhLE1BQU07QUFDaEQsV0FBSyxZQUFZLE1BQU0sUUFBUTtBQUFBLElBQ25DO0FBQUEsRUFDSjtBQUFBLEVBRUssWUFBWSxXQUFtQixXQUFtQixZQUFvQjtBQUM3RSxVQUFNLGNBQWMsS0FBSztBQUN6QixRQUFJLENBQUMsWUFBYTtBQUVsQixnQkFBWSxZQUFZO0FBRWxCLGNBQVUsUUFBUSxDQUFDLGFBQWE7QUFDNUIsWUFBTSxPQUFPLEtBQUssVUFBVSxrQkFBa0IsUUFBUTtBQUN0RCxXQUFLLE1BQU0sUUFBUSxHQUFHLFNBQVM7QUFDL0IsV0FBSyxNQUFNLGFBQWE7QUFFeEIsVUFBSSxLQUFLLE9BQU8sU0FBUyxpQkFBaUI7QUFDdEMsYUFBSyxNQUFNLFNBQVMsR0FBRyxVQUFVO0FBQ2pDLGFBQUssTUFBTSxXQUFXO0FBQUEsTUFDMUIsT0FBTztBQUNILGFBQUssTUFBTSxTQUFTO0FBQ3BCLGFBQUssTUFBTSxZQUFZO0FBQUEsTUFDM0I7QUFFQSxrQkFBWSxZQUFZLElBQUk7QUFHckMsVUFBSSxLQUFLLE9BQU8sU0FBUyxxQkFBcUI7QUFDN0MsYUFBSyxpQkFBaUIsS0FBSyxFQUFFLFFBQVEsQ0FBQyxRQUEwQjtBQUMvRCxjQUFJLGlCQUFpQixRQUFRLE1BQU07QUFDbEMsaUJBQUssZUFBZSxJQUFJO0FBQUEsVUFDekIsQ0FBQztBQUFBLFFBQ0YsQ0FBQztBQUFBLE1BQ0Y7QUFHQSxVQUFJLFNBQVMsU0FBUyxLQUFLLE9BQU8sSUFBSSxVQUFVLGNBQWMsR0FBRztBQUNoRSxhQUFLLFVBQVUsSUFBSSx1QkFBdUI7QUFBQSxNQUMzQztBQUFBLElBQ0QsQ0FBQztBQUdELFFBQUksS0FBSyxPQUFPLFNBQVMscUJBQXFCLFVBQVU7QUFDdkQsV0FBSyxtQkFBbUI7QUFBQSxJQUN6QjtBQUFBLEVBQ0Q7QUFBQSxFQUVXLHFCQUFxQjtBQUN6QixRQUFJLENBQUMsS0FBSyxZQUFhO0FBQ3ZCLFVBQU0sYUFBYSxLQUFLLFlBQVksY0FBYyx3QkFBd0I7QUFDMUUsUUFBSSxZQUFZO0FBQ1osVUFBSSxLQUFLLFlBQVk7QUFDakIsY0FBTSxlQUFlLEtBQUssWUFBWTtBQUN0QyxjQUFNLGtCQUFrQixLQUFLLFlBQVk7QUFDekMsY0FBTSxnQkFBZ0IsV0FBVztBQUNqQyxjQUFNLG1CQUFtQixXQUFXO0FBQ3BDLGNBQU0sWUFBWSxnQkFBZ0IsZUFBZ0Isa0JBQWtCLElBQU0sbUJBQW1CO0FBQzdGLGFBQUssWUFBWSxhQUFhO0FBQUEsTUFDbEMsT0FBTztBQUNILGNBQU0sZ0JBQWdCLEtBQUssWUFBWTtBQUN2QyxjQUFNLGlCQUFpQixLQUFLLFlBQVk7QUFDeEMsY0FBTSxpQkFBaUIsV0FBVztBQUNsQyxjQUFNLGtCQUFrQixXQUFXO0FBQ25DLGNBQU0sYUFBYSxpQkFBaUIsZ0JBQWlCLGlCQUFpQixJQUFNLGtCQUFrQjtBQUM5RixhQUFLLFlBQVksY0FBYztBQUFBLE1BQ25DO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFBQSxFQUVILGVBQWUsWUFBcUI7QUFDN0IsU0FBSyxhQUFhO0FBQ2xCLFNBQUsscUJBQXFCO0FBQUEsRUFDOUI7QUFBQSxFQUVBLFlBQVksV0FBbUIsWUFBb0I7QUFDL0MsU0FBSyxZQUFZO0FBQ2pCLFNBQUssYUFBYTtBQUFBLEVBQ3RCO0FBQUEsRUFFQSxpQkFBcUM7QUFDakMsV0FBTyxLQUFLO0FBQUEsRUFDaEI7QUFBQSxFQUVBLDRCQUE0QjtBQUN4QixXQUFPO0FBQUEsTUFDSCxXQUFXLEtBQUs7QUFBQSxNQUNoQixZQUFZLEtBQUs7QUFBQSxNQUNqQixZQUFZLEtBQUs7QUFBQSxJQUNyQjtBQUFBLEVBQ0o7QUFBQSxFQUVBLFNBQVMsUUFBK0I7QUFDcEMsUUFBSSxDQUFDLEtBQUssWUFBYTtBQUN2QixVQUFNLGVBQWUsV0FBVyxXQUFXLEtBQUssYUFBYSxLQUFLLGFBQWEsS0FBSyxPQUFPLFNBQVM7QUFDcEcsU0FBSyxZQUFZLFNBQVMsRUFBRSxLQUFLLENBQUMsY0FBYyxVQUFVLFNBQVMsQ0FBQztBQUFBLEVBQ3hFO0FBQUEsRUFFQSxXQUFXLFFBQStCO0FBQ3RDLFFBQUksQ0FBQyxLQUFLLFlBQWE7QUFDdkIsVUFBTSxlQUFlLFdBQVcsV0FBVyxLQUFLLGFBQWEsS0FBSyxhQUFhLEtBQUssT0FBTyxTQUFTO0FBQ3BHLFNBQUssWUFBWSxTQUFTLEVBQUUsS0FBSyxjQUFjLFVBQVUsU0FBUyxDQUFDO0FBQUEsRUFDdkU7QUFBQSxFQUVBLFdBQVcsUUFBK0I7QUFDdEMsUUFBSSxDQUFDLEtBQUssWUFBYTtBQUN2QixVQUFNLGVBQWUsV0FBVyxXQUFXLEtBQUssWUFBWSxLQUFLLFlBQVksS0FBSyxPQUFPLFNBQVM7QUFDbEcsU0FBSyxZQUFZLFNBQVMsRUFBRSxNQUFNLENBQUMsY0FBYyxVQUFVLFNBQVMsQ0FBQztBQUFBLEVBQ3pFO0FBQUEsRUFFQSxZQUFZLFFBQStCO0FBQ3ZDLFFBQUksQ0FBQyxLQUFLLFlBQWE7QUFDdkIsVUFBTSxlQUFlLFdBQVcsV0FBVyxLQUFLLFlBQVksS0FBSyxZQUFZLEtBQUssT0FBTyxTQUFTO0FBQ2xHLFNBQUssWUFBWSxTQUFTLEVBQUUsTUFBTSxjQUFjLFVBQVUsU0FBUyxDQUFDO0FBQUEsRUFDeEU7QUFBQSxFQUVBLGlCQUFpQjtBQUNiLFFBQUksQ0FBQyxLQUFLLFlBQWE7QUFDdkIsVUFBTSxhQUFhLEtBQUssWUFBWSxjQUFjLHdCQUF3QjtBQUMxRSxRQUFJLFlBQVk7QUFDWixpQkFBVyxlQUFlLEVBQUUsVUFBVSxVQUFVLE9BQU8sVUFBVSxRQUFRLFNBQVMsQ0FBQztBQUFBLElBQ3ZGO0FBQUEsRUFDSjtBQUFBLEVBRUEsTUFBYyxzQkFBcUM7QUFDL0MsV0FBTyxJQUFJLFFBQVEsQ0FBQyxZQUFZO0FBQzVCLFlBQU0sWUFBWSxNQUFNO0FBQ3BCLFlBQUksS0FBSyxlQUFlLEtBQUssWUFBWSxzQkFBc0IsRUFBRSxRQUFRLEdBQUc7QUFDeEUsa0JBQVE7QUFBQSxRQUNaLE9BQU87QUFDSCxnQ0FBc0IsU0FBUztBQUFBLFFBQ25DO0FBQUEsTUFDSjtBQUNBLGdCQUFVO0FBQUEsSUFDZCxDQUFDO0FBQUEsRUFDTDtBQUFBLEVBRVEsaUJBQWlCO0FBQ3JCLFNBQUssT0FBTztBQUFBLE1BQ1IsS0FBSyxPQUFPLElBQUksVUFBVSxHQUFHLHNCQUFzQkMsVUFBUyxLQUFLLFFBQVEsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDO0FBQUEsSUFDN0Y7QUFDQSxTQUFLLE9BQU87QUFBQSxNQUNSLEtBQUssT0FBTyxJQUFJLE1BQU0sR0FBRyxVQUFVQSxVQUFTLEtBQUssUUFBUSxLQUFLLElBQUksR0FBRyxHQUFHLENBQUM7QUFBQSxJQUM3RTtBQUFBLEVBQ0o7QUFBQSxFQUVBLE1BQU0sVUFBVTtBQUNaLFFBQUksU0FBeUI7QUFFN0IsUUFBSSxLQUFLLE9BQU8sU0FBUyxxQkFBcUIsS0FBSyxPQUFPLFNBQVMsZ0JBQWdCO0FBQy9FLGVBQVMsS0FBSyxPQUFPLElBQUksTUFBTSxzQkFBc0IsS0FBSyxPQUFPLFNBQVMsY0FBYztBQUFBLElBQzVGLE9BQU87QUFDSCxZQUFNLGFBQWEsS0FBSyxPQUFPLElBQUksVUFBVSxjQUFjO0FBQzNELGdCQUFTLHlDQUFZLFdBQVU7QUFBQSxJQUNuQztBQUVBLFFBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxhQUFhO0FBQzlCO0FBQUEsSUFDSjtBQUVBLHFCQUFpQixLQUFLLGFBQWEsS0FBSyxXQUFXLEtBQUssWUFBWSxLQUFLLE9BQU8sU0FBUyxjQUFjLEtBQUssVUFBVTtBQUV0SCxVQUFNLFFBQVEsT0FBTyxTQUFTLE9BQU8sQ0FBQyxTQUF3QixnQkFBZ0Isc0JBQUs7QUFDbkYsVUFBTSxjQUFjLFVBQVUsT0FBTyxLQUFLLE9BQU8sU0FBUyxlQUFlLEtBQUssT0FBTyxTQUFTLFNBQVM7QUFDdkcsVUFBTSxZQUFZLE1BQU0sUUFBUSxJQUFJLFlBQVksSUFBSSxVQUFRLEtBQUssVUFBVSxXQUFXLElBQUksQ0FBQyxDQUFDO0FBQzVGLFNBQUssWUFBWSxXQUFXLEtBQUssV0FBVyxLQUFLLFVBQVU7QUFBQSxFQUMvRDtBQUFBLEVBRVEsZUFBZSxNQUFtQjtBQUN0QyxVQUFNLFVBQVUsS0FBSyxjQUFjLHlCQUF5QjtBQUM1RCxRQUFJLG1CQUFtQixhQUFhO0FBQ2hDLFVBQUksS0FBSyxPQUFPLFNBQVMsaUJBQWlCO0FBQ3RDLGdCQUFRLE1BQU0sWUFBWSxHQUFHLEtBQUssZUFBZSxFQUFFO0FBQ25ELGdCQUFRLE1BQU0sV0FBVztBQUFBLE1BQzdCLE9BQU87QUFDSCxnQkFBUSxNQUFNLFlBQVk7QUFDMUIsZ0JBQVEsTUFBTSxXQUFXO0FBQUEsTUFDN0I7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUFBLEVBRVEseUJBQXlCLFdBQW1CLGFBQXFCLFdBQW1CLFlBQW9CO0FBQzVHLFVBQU0sY0FBYyxLQUFLO0FBQ3pCLFFBQUksQ0FBQyxhQUFhO0FBQ2Q7QUFBQSxJQUNKO0FBRUEsVUFBTSxhQUFhLEtBQUs7QUFFeEIsVUFBTSxZQUFZLFVBQVUsTUFBTSxHQUFHLFdBQVc7QUFDaEQsVUFBTSxhQUFhLFVBQVUsTUFBTSxjQUFjLENBQUM7QUFFbEQsVUFBTSxjQUFjO0FBQ3BCLFVBQU0sZ0JBQWdCLGFBQWEsYUFBYTtBQUNoRCxVQUFNLGFBQWEsZ0JBQWdCLGVBQWUsS0FBSyxPQUFPLFNBQVMsZUFBZTtBQUN0RixVQUFNLG9CQUFxQixZQUFZLGlCQUFpQjtBQUV4RCxRQUFJLGdCQUFnQixvQkFBcUIsVUFBVSxTQUFTLGdCQUFrQixVQUFVLFNBQVM7QUFFakcsY0FBVSxRQUFRLENBQUMsYUFBYTtBQUM1QixZQUFNLE9BQU8sS0FBSyxVQUFVLGtCQUFrQixRQUFRO0FBQ3RELFdBQUssTUFBTSxXQUFXO0FBQ3RCLFdBQUssTUFBTSxRQUFRLEdBQUcsU0FBUztBQUMvQixXQUFLLE1BQU0sU0FBUyxHQUFHLFVBQVU7QUFDakMsVUFBSSxZQUFZO0FBQ1osYUFBSyxNQUFNLE1BQU0sR0FBRyxhQUFhO0FBQUEsTUFDckMsT0FBTztBQUNILGFBQUssTUFBTSxPQUFPLEdBQUcsYUFBYTtBQUFBLE1BQ3RDO0FBQ0Esa0JBQVksWUFBWSxJQUFJO0FBQzVCLHVCQUFpQixnQkFBZ0I7QUFBQSxJQUNyQyxDQUFDO0FBRUQsVUFBTSxhQUFhLEtBQUssVUFBVSxrQkFBa0IsVUFBVSxXQUFXLENBQUM7QUFDMUUsZUFBVyxNQUFNLFdBQVc7QUFDNUIsZUFBVyxNQUFNLFFBQVEsR0FBRyxTQUFTO0FBQ3JDLGVBQVcsTUFBTSxTQUFTLEdBQUcsVUFBVTtBQUN2QyxRQUFJLFlBQVk7QUFDWixpQkFBVyxNQUFNLE1BQU0sR0FBRyxnQkFBZ0I7QUFBQSxJQUM5QyxPQUFPO0FBQ0gsaUJBQVcsTUFBTSxPQUFPLEdBQUcsZ0JBQWdCO0FBQUEsSUFDL0M7QUFDQSxnQkFBWSxZQUFZLFVBQVU7QUFFbEMsb0JBQWdCLG1CQUFtQixnQkFBZ0I7QUFDbkQsZUFBVyxRQUFRLENBQUMsYUFBYTtBQUM3QixZQUFNLE9BQU8sS0FBSyxVQUFVLGtCQUFrQixRQUFRO0FBQ3RELFdBQUssTUFBTSxXQUFXO0FBQ3RCLFdBQUssTUFBTSxRQUFRLEdBQUcsU0FBUztBQUMvQixXQUFLLE1BQU0sU0FBUyxHQUFHLFVBQVU7QUFDakMsVUFBSSxZQUFZO0FBQ1osYUFBSyxNQUFNLE1BQU0sR0FBRyxhQUFhO0FBQUEsTUFDckMsT0FBTztBQUNILGFBQUssTUFBTSxPQUFPLEdBQUcsYUFBYTtBQUFBLE1BQ3RDO0FBQ0Esa0JBQVksWUFBWSxJQUFJO0FBQzVCLHVCQUFpQixnQkFBZ0I7QUFBQSxJQUNyQyxDQUFDO0FBQUEsRUFDTDtBQUFBLEVBRUksYUFBYSxlQUF3QjtBQUFBLEVBQzVDO0FBQUEsRUFFQSxNQUFhLFlBQVksWUFBb0I7QUFDNUMsVUFBTSxhQUFhLEtBQUssT0FBTyxJQUFJLFVBQVUsY0FBYztBQUMzRCxRQUFJLENBQUMsV0FBWTtBQUVqQixVQUFNLFNBQVMsV0FBVztBQUMxQixRQUFJLENBQUMsT0FBUTtBQUViLFVBQU0sUUFBUSxPQUFPLFNBQVMsT0FBTyxDQUFDLFNBQXdCLGdCQUFnQixzQkFBSztBQUNuRixVQUFNLGdCQUFnQixNQUFNLEtBQUsscUJBQXFCLE9BQU8sVUFBVTtBQUV2RSxVQUFNLFFBQVEsTUFBTSxRQUFRLElBQUksY0FBYyxJQUFJLFVBQVEsS0FBSyxVQUFVLFdBQVcsSUFBSSxDQUFDLENBQUM7QUFDMUYsU0FBSyxZQUFZLE9BQU8sS0FBSyxXQUFXLEtBQUssVUFBVTtBQUFBLEVBQ3hEO0FBQUEsRUFFQSxNQUFNLHNCQUFzQixRQUFpQjtBQUM1QyxVQUFNLFFBQVEsT0FBTyxTQUFTLE9BQU8sQ0FBQyxTQUF3QixnQkFBZ0Isc0JBQUs7QUFDbkYsVUFBTSxRQUFRLE1BQU0sUUFBUSxJQUFJLE1BQU0sSUFBSSxVQUFRLEtBQUssVUFBVSxXQUFXLElBQUksQ0FBQyxDQUFDO0FBQ2xGLFNBQUssWUFBWSxPQUFPLEtBQUssV0FBVyxLQUFLLFVBQVU7QUFBQSxFQUN4RDtBQUFBLEVBRUEsTUFBYyxxQkFBcUIsT0FBZ0IsWUFBc0M7QUFDeEYsVUFBTSxzQkFBc0IsV0FBVyxZQUFZO0FBQ25ELFVBQU0sZ0JBQWdCLENBQUM7QUFDdkIsZUFBVyxRQUFRLE9BQU87QUFDekIsWUFBTSxVQUFVLE1BQU0sS0FBSyxPQUFPLElBQUksTUFBTSxXQUFXLElBQUk7QUFDM0QsVUFBSSxLQUFLLFNBQVMsWUFBWSxFQUFFLFNBQVMsbUJBQW1CLEtBQzNELFFBQVEsWUFBWSxFQUFFLFNBQVMsbUJBQW1CLEdBQUc7QUFDckQsc0JBQWMsS0FBSyxJQUFJO0FBQUEsTUFDeEI7QUFBQSxJQUNEO0FBQ0EsV0FBTztBQUFBLEVBQ1I7QUFBQSxFQUVHLE1BQWEsVUFBVSxXQUEwQixPQUF1QjtBQUNwRSxTQUFLLE9BQU8sU0FBUyxnQkFBZ0I7QUFDckMsU0FBSyxPQUFPLFNBQVMsWUFBWTtBQUNqQyxVQUFNLEtBQUssT0FBTyxhQUFhO0FBQy9CLFNBQUssUUFBUTtBQUFBLEVBQ2pCO0FBQUEsRUFFQSxVQUFVO0FBQUEsRUFBQztBQUNmOzs7QUh6VE8sSUFBTSwyQkFBMkI7QUFFakMsSUFBTSxnQkFBTixjQUE0QiwwQkFBUztBQUFBLEVBT3hDLFlBQVksTUFBcUIsUUFBNkI7QUFDMUQsVUFBTSxJQUFJO0FBQ1YsU0FBSyxTQUFTO0FBQ2QsU0FBSyxVQUFVLElBQUksUUFBUSxLQUFLLE1BQU07QUFDdEMsU0FBSyxnQkFBZ0IsSUFBSSxjQUFjLEtBQUssUUFBUSxLQUFLLElBQUk7QUFDbkUsU0FBSyxhQUFhLEtBQUssb0JBQW9CO0FBQ3JDLFNBQUssaUJBQWlCLElBQUksZUFBZSxLQUFLLGFBQWEsS0FBSyxJQUFJLENBQUM7QUFBQSxFQUN6RTtBQUFBLEVBRUEsY0FBYztBQUNWLFdBQU87QUFBQSxFQUNYO0FBQUEsRUFFQSxpQkFBaUI7QUFDYixXQUFPO0FBQUEsRUFDWDtBQUFBLEVBRUEsVUFBa0I7QUFDZCxXQUFPO0FBQUEsRUFDWDtBQUFBLEVBRVEsc0JBQStCO0FBQ25DLFVBQU0sRUFBRSxPQUFPLE9BQU8sSUFBSSxLQUFLLEtBQUssS0FBSyxZQUFZLHNCQUFzQjtBQUMzRSxXQUFPLFNBQVM7QUFBQSxFQUNwQjtBQUFBLEVBRVEsZUFBZTtBQUNuQixTQUFLLHVCQUF1QjtBQUFBLEVBQ2hDO0FBQUEsRUFFSyxjQUFjLE9BQXNCO0FBQzNDLFFBQUksS0FBSyxlQUFlLEtBQUssWUFBWSxTQUFTLFNBQVMsYUFBYSxHQUFHO0FBQzFFLFlBQU0sRUFBRSxXQUFXLElBQUksS0FBSyxjQUFjLDBCQUEwQjtBQUNwRSxjQUFRLE1BQU0sS0FBSztBQUFBLFFBQ2xCLEtBQUs7QUFDSixlQUFLLGNBQWMsU0FBUyxRQUFRO0FBQ3BDLGdCQUFNLGVBQWU7QUFDckI7QUFBQSxRQUNELEtBQUs7QUFDSixlQUFLLGNBQWMsV0FBVyxRQUFRO0FBQ3RDLGdCQUFNLGVBQWU7QUFDckI7QUFBQSxRQUNELEtBQUs7QUFDSixlQUFLLGNBQWMsV0FBVyxRQUFRO0FBQ3RDLGdCQUFNLGVBQWU7QUFDckI7QUFBQSxRQUNELEtBQUs7QUFDSixlQUFLLGNBQWMsWUFBWSxRQUFRO0FBQ3ZDLGdCQUFNLGVBQWU7QUFDckI7QUFBQSxRQUNELEtBQUs7QUFDSixjQUFJLFlBQVk7QUFDZixpQkFBSyxjQUFjLFNBQVMsVUFBVTtBQUFBLFVBQ3ZDLE9BQU87QUFDTixpQkFBSyxjQUFjLFdBQVcsVUFBVTtBQUFBLFVBQ3pDO0FBQ0EsZ0JBQU0sZUFBZTtBQUNyQjtBQUFBLFFBQ0QsS0FBSztBQUNKLGNBQUksWUFBWTtBQUNmLGlCQUFLLGNBQWMsV0FBVyxVQUFVO0FBQUEsVUFDekMsT0FBTztBQUNOLGlCQUFLLGNBQWMsWUFBWSxVQUFVO0FBQUEsVUFDMUM7QUFDQSxnQkFBTSxlQUFlO0FBQ3JCO0FBQUEsUUFDRCxLQUFLO0FBQ0osZUFBSyxjQUFjLGVBQWU7QUFDbEMsZ0JBQU0sZUFBZTtBQUNyQjtBQUFBLE1BQ0Y7QUFBQSxJQUNEO0FBQUEsRUFDRDtBQUFBLEVBRU8seUJBQXlCO0FBQy9CLFNBQUssYUFBYSxLQUFLLG9CQUFvQjtBQUMzQyxVQUFNLGdCQUFnQixLQUFLLEtBQUssS0FBSyxZQUFZLHNCQUFzQjtBQUN2RSxVQUFNLEVBQUUsV0FBVyxXQUFXLElBQUksa0JBQWtCLEtBQUssWUFBWSxlQUFlLEtBQUssT0FBTyxTQUFTLFlBQVk7QUFFckgsU0FBSyxjQUFjLGVBQWUsS0FBSyxVQUFVO0FBQ2pELFNBQUssY0FBYyxZQUFZLFdBQVcsVUFBVTtBQUNwRCxTQUFLLFFBQVEsZUFBZSxLQUFLLFVBQVU7QUFFM0MsU0FBSyxRQUFRO0FBQUEsRUFDZDtBQUFBLEVBRUcsTUFBTSxTQUFTO0FBQ1gsVUFBTSxZQUFZLEtBQUssWUFBWSxTQUFTLENBQUM7QUFDN0MsY0FBVSxNQUFNO0FBRWhCLFVBQU0sWUFBWSxVQUFVLFVBQVUsd0JBQXdCO0FBQzlELFVBQU0sa0JBQWtCLFVBQVUsVUFBVSxnQkFBZ0I7QUFFNUQsU0FBSyxRQUFRLFdBQVcsU0FBUztBQUNqQyxTQUFLLGNBQWMsV0FBVyxlQUFlO0FBRW5ELFNBQUssYUFBYSxLQUFLLG9CQUFvQjtBQUNyQyxTQUFLLHVCQUF1QjtBQUM1QixTQUFLLGVBQWUsUUFBUSxLQUFLLEtBQUssS0FBSyxXQUFXO0FBRTVELFNBQUssaUJBQWlCLEtBQUssYUFBYSxXQUFXLEtBQUssY0FBYyxLQUFLLElBQUksQ0FBQztBQUUxRSxTQUFLLFFBQVE7QUFBQSxFQUNqQjtBQUFBLEVBRUEsTUFBTSxVQUFVO0FBQ1osU0FBSyxlQUFlLFdBQVc7QUFDL0IsU0FBSyxRQUFRLFFBQVE7QUFDckIsU0FBSyxjQUFjLFFBQVE7QUFFakMsU0FBSyxZQUFZLG9CQUFvQixXQUFXLEtBQUssY0FBYyxLQUFLLElBQUksQ0FBQztBQUFBLEVBQzNFO0FBQUEsRUFFQSxVQUFVO0FBQ04sU0FBSyxRQUFRLFFBQVE7QUFDckIsU0FBSyxjQUFjLFFBQVE7QUFBQSxFQUMvQjtBQUNKOzs7QU1wSUEsSUFBQUMsbUJBQStDO0FBS3hDLElBQU0sYUFBTixjQUF5QixrQ0FBaUI7QUFBQSxFQUM3QyxZQUFZLEtBQWtCLFFBQTZCO0FBQ3ZELFVBQU0sS0FBSyxNQUFNO0FBRFM7QUFBQSxFQUU5QjtBQUFBLEVBRUEsVUFBZ0I7QUFDWixVQUFNLEVBQUUsWUFBWSxJQUFJO0FBQ3hCLGdCQUFZLE1BQU07QUFFbEIsUUFBSSx5QkFBUSxXQUFXLEVBQ2xCLFFBQVEsZ0JBQWdCLEVBQ3hCLFFBQVEsb0NBQW9DLEVBQzVDLFVBQVUsWUFBVSxPQUNoQixVQUFVLEdBQUcsR0FBRyxDQUFDLEVBQ2pCLFNBQVMsS0FBSyxPQUFPLFNBQVMsWUFBWSxFQUMxQyxrQkFBa0IsRUFDbEIsU0FBUyxPQUFPLFVBQVU7QUFDdkIsV0FBSyxPQUFPLFNBQVMsZUFBZTtBQUNwQyxZQUFNLEtBQUssT0FBTyxhQUFhO0FBQy9CLFdBQUssT0FBTyxhQUFhO0FBQUEsSUFDN0IsQ0FBQyxDQUFDO0FBRWhCLFFBQUkseUJBQVEsV0FBVyxFQUN0QixRQUFRLGtCQUFrQixFQUMxQixRQUFRLHFFQUFzRSxFQUM5RSxZQUFZLGNBQVksU0FDdkIsVUFBVSxVQUFVLHNCQUF1QixFQUMzQyxVQUFVLFlBQVksaUJBQWlCLEVBQ3ZDLFNBQVMsS0FBSyxPQUFPLFNBQVMsb0JBQW9CLGFBQWEsUUFBUSxFQUN2RSxTQUFTLE9BQU8sVUFBVTtBQUMxQixXQUFLLE9BQU8sU0FBUyxvQkFBb0IsVUFBVTtBQUNuRCxZQUFNLEtBQUssT0FBTyxhQUFhO0FBQy9CLFdBQUssUUFBUTtBQUFBLElBQ2QsQ0FBQyxDQUFDO0FBRUgsUUFBSSxLQUFLLE9BQU8sU0FBUyxtQkFBbUI7QUFDM0MsVUFBSSx5QkFBUSxXQUFXLEVBQ3JCLFFBQVEsZUFBZSxFQUN2QixRQUFRLG9DQUFvQyxFQUM1QyxVQUFVLFlBQVUsT0FDbkIsY0FBYyxLQUFLLE9BQU8sU0FBUyxrQkFBa0IsZUFBZSxFQUNwRSxRQUFRLE1BQU07QUFDZCxZQUFJLG1CQUFtQixLQUFLLFFBQVEsQ0FBQyxXQUFXO0FBQy9DLGVBQUssT0FBTyxTQUFTLGlCQUFpQixPQUFPO0FBQzdDLGVBQUssT0FBTyxhQUFhO0FBQ3pCLGVBQUssUUFBUTtBQUFBLFFBQ2QsQ0FBQyxFQUFFLEtBQUs7QUFBQSxNQUNULENBQUMsQ0FBQztBQUFBLElBQ0w7QUFFTSxRQUFJLHlCQUFRLFdBQVcsRUFDbEIsUUFBUSxxQkFBcUIsRUFDN0IsUUFBUSw2Q0FBNkMsRUFDckQsWUFBWSxjQUFZO0FBQ3JCLGVBQ0ssVUFBVSxnQkFBZ0Isb0JBQW9CLEVBQzlDLFVBQVUsaUJBQWlCLG9CQUFvQixFQUMvQyxVQUFVLHFCQUFxQiw4QkFBOEIsRUFDN0QsVUFBVSxvQkFBb0IsOEJBQThCLEVBQzVELFVBQVUsZ0JBQWdCLHdCQUF3QixFQUNsRCxVQUFVLGVBQWUsd0JBQXdCLEVBQ2pELFNBQVMsR0FBRyxLQUFLLE9BQU8sU0FBUyxhQUFhLElBQUksS0FBSyxPQUFPLFNBQVMsU0FBUyxFQUFFLEVBQ2xGLFNBQVMsT0FBTyxVQUFVO0FBQ3ZCLGNBQU0sQ0FBQyxXQUFXLEtBQUssSUFBSSxNQUFNLE1BQU0sR0FBRztBQUMxQyxhQUFLLE9BQU8sU0FBUyxnQkFBZ0I7QUFDckMsYUFBSyxPQUFPLFNBQVMsWUFBWTtBQUNqQyxjQUFNLEtBQUssT0FBTyxhQUFhO0FBQy9CLGFBQUssT0FBTyxhQUFhO0FBQUEsTUFDN0IsQ0FBQztBQUFBLElBQ1QsQ0FBQztBQUVYLFFBQUkseUJBQVEsV0FBVyxFQUNyQixRQUFRLG1CQUFtQixFQUMzQixRQUFRLG1HQUFtRyxFQUMzRyxVQUFVLFlBQVUsT0FDbkIsU0FBUyxLQUFLLE9BQU8sU0FBUyxlQUFlLEVBQzdDLFNBQVMsT0FBTyxVQUFVO0FBQzNCLFdBQUssT0FBTyxTQUFTLGtCQUFrQjtBQUN2QyxZQUFNLEtBQUssT0FBTyxhQUFhO0FBQy9CLFdBQUssT0FBTyxhQUFhO0FBQUEsSUFDekIsQ0FBQyxDQUFDO0FBRUosUUFBSSx5QkFBUSxXQUFXLEVBQ3JCLFFBQVEsd0JBQXdCLEVBQ2hDLFFBQVEsbURBQW1ELEVBQzNELFVBQVUsWUFBVSxPQUNuQixTQUFTLEtBQUssT0FBTyxTQUFTLG1CQUFtQixFQUNqRCxTQUFTLE9BQU8sVUFBVTtBQUMxQixXQUFLLE9BQU8sU0FBUyxzQkFBc0I7QUFDM0MsWUFBTSxLQUFLLE9BQU8sYUFBYTtBQUMvQixXQUFLLE9BQU8sYUFBYTtBQUFBLElBQzFCLENBQUMsQ0FBQztBQWdCSixRQUFJLHlCQUFRLFdBQVcsRUFDdEIsUUFBUSx1QkFBdUIsRUFDL0IsUUFBUSwrRUFBK0UsRUFDdkYsVUFBVSxZQUFVLE9BQ25CLFNBQVMsS0FBSyxPQUFPLFNBQVMsZUFBZSxFQUM3QyxTQUFTLE9BQU8sVUFBVTtBQUMxQixXQUFLLE9BQU8sU0FBUyxrQkFBa0I7QUFDdkMsWUFBTSxLQUFLLE9BQU8sYUFBYTtBQUMvQixXQUFLLE9BQU8sYUFBYTtBQUFBLElBQzFCLENBQUMsQ0FBQztBQUVILGdCQUFZLFNBQVMsTUFBTSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFHN0QsUUFBSSx5QkFBUSxXQUFXLEVBQ3RCLFFBQVEsZ0JBQWdCLEVBQ3hCLFFBQVEsa0RBQWtELEVBQzFELFVBQVUsWUFBVSxPQUNuQixTQUFTLEtBQUssT0FBTyxTQUFTLFlBQVksRUFDMUMsU0FBUyxPQUFPLFVBQVU7QUFDMUIsV0FBSyxPQUFPLFNBQVMsZUFBZTtBQUNwQyxZQUFNLEtBQUssT0FBTyxhQUFhO0FBQy9CLFdBQUssT0FBTyxhQUFhO0FBQUEsSUFDMUIsQ0FBQyxDQUFDO0FBRUgsUUFBSSx5QkFBUSxXQUFXLEVBQ3JCLFFBQVEsZ0JBQWdCLEVBQ3hCLFFBQVEscUNBQXFDLEVBQzdDLFVBQVUsWUFBVSxPQUNuQixVQUFVLElBQUksSUFBSSxDQUFDLEVBQ25CLFNBQVMsS0FBSyxPQUFPLFNBQVMsWUFBWSxFQUMxQyxrQkFBa0IsRUFDbEIsU0FBUyxPQUFPLFVBQVU7QUFDMUIsV0FBSyxPQUFPLFNBQVMsZUFBZTtBQUNwQyxZQUFNLEtBQUssT0FBTyxhQUFhO0FBQy9CLFdBQUssT0FBTyxhQUFhO0FBQUEsSUFDMUIsQ0FBQyxDQUFDO0FBRUosUUFBSSx5QkFBUSxXQUFXLEVBQ3JCLFFBQVEsbUJBQW1CLEVBQzNCLFFBQVEscURBQXFELEVBQzdELFVBQVUsWUFBVSxPQUNuQixTQUFTLEtBQUssT0FBTyxTQUFTLGVBQWUsRUFDN0MsU0FBUyxPQUFPLFVBQVU7QUFDMUIsV0FBSyxPQUFPLFNBQVMsa0JBQWtCO0FBQ3ZDLFlBQU0sS0FBSyxPQUFPLGFBQWE7QUFDL0IsV0FBSyxPQUFPLGFBQWE7QUFBQSxJQUMxQixDQUFDLENBQUM7QUFFSixRQUFJLHlCQUFRLFdBQVcsRUFDckIsUUFBUSxtQkFBbUIsRUFDM0IsUUFBUSx3Q0FBd0MsRUFDaEQsVUFBVSxZQUFVLE9BQ25CLFVBQVUsSUFBSSxJQUFJLENBQUMsRUFDbkIsU0FBUyxLQUFLLE9BQU8sU0FBUyxlQUFlLEVBQzdDLGtCQUFrQixFQUNsQixTQUFTLE9BQU8sVUFBVTtBQUMxQixXQUFLLE9BQU8sU0FBUyxrQkFBa0I7QUFDdkMsWUFBTSxLQUFLLE9BQU8sYUFBYTtBQUMvQixXQUFLLE9BQU8sYUFBYTtBQUFBLElBQzFCLENBQUMsQ0FBQztBQUVKLFFBQUkseUJBQVEsV0FBVyxFQUNyQixRQUFRLGNBQWMsRUFDdEIsUUFBUSxnREFBZ0QsRUFDeEQsVUFBVSxZQUFVLE9BQ25CLFNBQVMsS0FBSyxPQUFPLFNBQVMsV0FBVyxFQUN6QyxTQUFTLE9BQU8sVUFBVTtBQUMxQixXQUFLLE9BQU8sU0FBUyxjQUFjO0FBQ25DLFlBQU0sS0FBSyxPQUFPLGFBQWE7QUFDL0IsV0FBSyxPQUFPLGFBQWE7QUFBQSxJQUMxQixDQUFDLENBQUM7QUFFSixRQUFJLHlCQUFRLFdBQVcsRUFDckIsUUFBUSxjQUFjLEVBQ3RCLFFBQVEsbUNBQW1DLEVBQzNDLFVBQVUsWUFBVSxPQUNuQixVQUFVLElBQUksSUFBSSxDQUFDLEVBQ25CLFNBQVMsS0FBSyxPQUFPLFNBQVMsV0FBVyxFQUN6QyxrQkFBa0IsRUFDbEIsU0FBUyxPQUFPLFVBQVU7QUFDMUIsV0FBSyxPQUFPLFNBQVMsY0FBYztBQUNuQyxZQUFNLEtBQUssT0FBTyxhQUFhO0FBQy9CLFdBQUssT0FBTyxhQUFhO0FBQUEsSUFDMUIsQ0FBQyxDQUFDO0FBRUosUUFBSSx5QkFBUSxXQUFXLEVBQ3RCLFFBQVEsZ0JBQWdCLEVBQ3hCLFFBQVEsK0NBQStDLEVBQ3ZELFVBQVUsWUFBVSxPQUNuQixVQUFVLEdBQUcsSUFBSSxDQUFDLEVBQ2xCLFNBQVMsS0FBSyxPQUFPLFNBQVMsYUFBYSxFQUMzQyxrQkFBa0IsRUFDbEIsU0FBUyxPQUFPLFVBQVU7QUFDMUIsV0FBSyxPQUFPLFNBQVMsZ0JBQWdCO0FBQ3JDLFlBQU0sS0FBSyxPQUFPLGFBQWE7QUFDL0IsV0FBSyxPQUFPLGFBQWE7QUFBQSxJQUMxQixDQUFDLENBQUM7QUFBQSxFQUNEO0FBQ0o7OztBQ2pOTyxJQUFNLG1CQUEwQztBQUFBLEVBQ25ELGNBQWM7QUFBQSxFQUNqQixtQkFBbUI7QUFBQSxFQUNoQixnQkFBZ0I7QUFBQSxFQUNuQixlQUFlO0FBQUEsRUFDWixXQUFXO0FBQUEsRUFDZCxpQkFBaUI7QUFBQSxFQUNqQixxQkFBcUI7QUFBQSxFQUNsQixrQkFBa0I7QUFBQSxFQUNsQix1QkFBdUI7QUFBQSxFQUN2QiwyQkFBMkI7QUFBQSxFQUM5QixpQkFBaUI7QUFBQSxFQUNkLGNBQWM7QUFBQSxFQUNkLGNBQWM7QUFBQSxFQUNkLGlCQUFpQjtBQUFBLEVBQ2pCLGlCQUFpQjtBQUFBLEVBQ2pCLGFBQWE7QUFBQSxFQUNiLGFBQWE7QUFBQSxFQUNiLGVBQWU7QUFDbkI7OztBUmZBLElBQXFCLHNCQUFyQixjQUFpRCx3QkFBTztBQUFBLEVBQXhEO0FBQUE7QUFDSSxvQkFBa0M7QUFDckMsMEJBQWdDO0FBQUE7QUFBQSxFQUc3QixNQUFNLFNBQVM7QUFDWCxVQUFNLEtBQUssYUFBYTtBQUV4QixTQUFLO0FBQUEsTUFDRDtBQUFBLE1BQ0EsQ0FBQyxTQUFTLElBQUksY0FBYyxNQUFNLElBQUk7QUFBQSxJQUMxQztBQUVBLFNBQUssY0FBYyxJQUFJLFdBQVcsS0FBSyxLQUFLLElBQUksQ0FBQztBQUVqRCxTQUFLLGNBQWMsWUFBWSwyQkFBMkIsTUFBTTtBQUM1RCxXQUFLLGFBQWE7QUFBQSxJQUN0QixDQUFDO0FBRUQsU0FBSyxXQUFXO0FBQUEsTUFDWixJQUFJO0FBQUEsTUFDSixNQUFNO0FBQUEsTUFDTixVQUFVLE1BQU07QUFDWixhQUFLLGFBQWE7QUFBQSxNQUN0QjtBQUFBLElBQ0osQ0FBQztBQUVQLFNBQUssV0FBVztBQUFBLE1BQ04sSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sVUFBVSxNQUFNO0FBQ1osY0FBTSxPQUFPLEtBQUssSUFBSSxVQUFVLG9CQUFvQixhQUFhO0FBQ2pFLFlBQUksTUFBTTtBQUNOLGVBQUssUUFBUSxtQkFBbUI7QUFBQSxRQUNwQztBQUFBLE1BQ0o7QUFBQSxJQUNKLENBQUM7QUFFRCxTQUFLLElBQUksVUFBVSxjQUFjLE1BQU07QUFDbkMsV0FBSyxhQUFhO0FBQUEsSUFDdEIsQ0FBQztBQUFBLEVBQ0w7QUFBQSxFQUVBLE1BQU0sV0FBVztBQUNiLFNBQUssSUFBSSxVQUFVLG1CQUFtQix3QkFBd0I7QUFBQSxFQUNsRTtBQUFBLEVBRUEsTUFBTSxlQUFlO0FBQ2pCLFNBQUssV0FBVyxPQUFPLE9BQU8sQ0FBQyxHQUFHLGtCQUFrQixNQUFNLEtBQUssU0FBUyxDQUFDO0FBQUEsRUFDN0U7QUFBQSxFQUVBLE1BQU0sZUFBZTtBQUNqQixVQUFNLEtBQUssU0FBUyxLQUFLLFFBQVE7QUFDakMsU0FBSyxhQUFhO0FBQUEsRUFDdEI7QUFBQSxFQUVBLGVBQWU7QUFDWCxVQUFNLFNBQVMsS0FBSyxJQUFJLFVBQVUsZ0JBQWdCLHdCQUF3QjtBQUMxRSxXQUFPLFFBQVEsQ0FBQyxTQUFTO0FBQ3JCLFVBQUksS0FBSyxnQkFBZ0IsZUFBZTtBQUNwQyxhQUFLLEtBQUssdUJBQXVCO0FBQUEsTUFDckM7QUFBQSxJQUNKLENBQUM7QUFBQSxFQUNMO0FBQUEsRUFFSCxxQkFBcUIsZUFBd0I7QUFDdEMsVUFBTSxPQUFPLEtBQUssSUFBSSxVQUFVLGdCQUFnQix3QkFBd0IsRUFBRSxDQUFDLEVBQUU7QUFDN0UsU0FBSyxjQUFjLGFBQWEsYUFBYTtBQUFBLEVBQ2pEO0FBQUEsRUFFSCxVQUFVLFdBQW9ELE9BQXVCO0FBQ3BGLFVBQU0sT0FBTyxLQUFLLElBQUksVUFBVSxnQkFBZ0Isd0JBQXdCLEVBQUUsQ0FBQyxFQUFFO0FBQzdFLFNBQUssY0FBYyxVQUFVLFdBQVcsS0FBSztBQUFBLEVBQzlDO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFDcEIsVUFBTSxFQUFFLFVBQVUsSUFBSSxLQUFLO0FBQzNCLFFBQUksU0FBUyxVQUFVLGdCQUFnQix3QkFBd0I7QUFDL0QsUUFBSSxPQUFPLE9BQU8sQ0FBQztBQUVuQixRQUFJLENBQUMsTUFBTTtBQUNWLFlBQU0sWUFBWSxVQUFVLGFBQWEsS0FBSztBQUM5QyxVQUFJLFdBQVc7QUFDZCxjQUFNLFVBQVUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLFFBQVEsS0FBSyxDQUFDO0FBQzdFLGlCQUFTLFVBQVUsZ0JBQWdCLHdCQUF3QjtBQUMzRCxlQUFPLE9BQU8sQ0FBQztBQUFBLE1BQ2hCO0FBQUEsSUFDRDtBQUVBLFFBQUksTUFBTTtBQUNULGdCQUFVLFdBQVcsSUFBSTtBQUFBLElBQzFCO0FBQUEsRUFDRDtBQUVEOyIsCiAgIm5hbWVzIjogWyJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImRlYm91bmNlIiwgImRlYm91bmNlIiwgImltcG9ydF9vYnNpZGlhbiJdCn0K

/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CardNavigatorPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian7 = require("obsidian");

// src/ui/cardNavigator.ts
var import_obsidian5 = require("obsidian");

// src/ui/toolbar/toolbar.ts
var import_obsidian2 = require("obsidian");

// src/ui/toolbar/toolbarActions.ts
var import_obsidian = require("obsidian");
var FolderSuggestModal = class extends import_obsidian.FuzzySuggestModal {
  constructor(plugin, onSelect) {
    super(plugin.app);
    this.plugin = plugin;
    this.onSelect = onSelect;
  }
  getItems() {
    return this.plugin.app.vault.getAllLoadedFiles().filter((file) => file instanceof import_obsidian.TFolder);
  }
  getItemText(folder) {
    return folder.path;
  }
  onChooseItem(folder) {
    this.onSelect(folder);
  }
};
function toggleSort(plugin) {
  let sortPopup = document.querySelector(".card-navigator-sort-popup");
  if (!sortPopup) {
    sortPopup = document.createElement("div");
    sortPopup.className = "card-navigator-sort-popup";
    const currentSort = `${plugin.settings.sortCriterion}_${plugin.settings.sortOrder}`;
    const addSortOption = (value, label) => {
      const option = document.createElement("button");
      option.textContent = label;
      option.classList.toggle("active", currentSort === value);
      option.addEventListener("click", async () => {
        const [criterion, order] = value.split("_");
        plugin.settings.sortCriterion = criterion;
        plugin.settings.sortOrder = order;
        await plugin.saveSettings();
        plugin.triggerRefresh();
        sortPopup.remove();
      });
      sortPopup.appendChild(option);
    };
    addSortOption("fileName_asc", "File name (A to Z)");
    addSortOption("fileName_desc", "File name (Z to A)");
    addSortOption("lastModified_desc", "Last modified (newest first)");
    addSortOption("lastModified_asc", "Last modified (oldest first)");
    addSortOption("created_desc", "Created (newest first)");
    addSortOption("created_asc", "Created (oldest first)");
    const toolbarEl = document.querySelector(".card-navigator-toolbar-container");
    if (toolbarEl) {
      toolbarEl.insertAdjacentElement("afterend", sortPopup);
      document.addEventListener("click", function onClickOutside(event) {
        if (sortPopup && !sortPopup.contains(event.target) && !toolbarEl.contains(event.target)) {
          sortPopup.remove();
          document.removeEventListener("click", onClickOutside);
        }
      });
    }
  } else {
    sortPopup.remove();
  }
}
function toggleSettings(plugin) {
  let settingsPopup = document.querySelector(".card-navigator-settings-popup");
  if (!settingsPopup) {
    settingsPopup = document.createElement("div");
    settingsPopup.className = "card-navigator-settings-popup";
    const updateSetting = async (settingKey, value) => {
      plugin.settings[settingKey] = value;
      await plugin.saveSettings();
      plugin.triggerRefresh();
    };
    const cardsPerViewSetting = document.createElement("input");
    cardsPerViewSetting.type = "range";
    cardsPerViewSetting.min = "1";
    cardsPerViewSetting.max = "10";
    cardsPerViewSetting.value = plugin.settings.cardsPerView.toString();
    cardsPerViewSetting.addEventListener("input", (e) => {
      const value = parseInt(e.target.value, 10);
      updateSetting("cardsPerView", value);
    });
    const cardsPerViewLabel = document.createElement("label");
    cardsPerViewLabel.textContent = "Cards Per View:";
    settingsPopup.appendChild(cardsPerViewLabel);
    settingsPopup.appendChild(cardsPerViewSetting);
    const fontSizeSetting = document.createElement("input");
    fontSizeSetting.type = "range";
    fontSizeSetting.min = "10";
    fontSizeSetting.max = "30";
    fontSizeSetting.value = plugin.settings.contentSize.toString();
    fontSizeSetting.addEventListener("input", (e) => {
      const value = parseInt(e.target.value, 10);
      updateSetting("contentSize", value);
    });
    const fontSizeLabel = document.createElement("label");
    fontSizeLabel.textContent = "Content Font Size:";
    settingsPopup.appendChild(fontSizeLabel);
    settingsPopup.appendChild(fontSizeSetting);
    const createToggle = (labelText, settingKey) => {
      const container = document.createElement("div");
      const label = document.createElement("label");
      label.textContent = labelText;
      const toggle = document.createElement("input");
      toggle.type = "checkbox";
      toggle.checked = plugin.settings[settingKey];
      toggle.addEventListener("change", (e) => {
        updateSetting(settingKey, e.target.checked);
      });
      container.appendChild(label);
      container.appendChild(toggle);
      return container;
    };
    const fileNameToggle = createToggle("Show File Name", "showFileName");
    settingsPopup.appendChild(fileNameToggle);
    const firstHeaderToggle = createToggle("Show First Header", "showFirstHeader");
    settingsPopup.appendChild(firstHeaderToggle);
    const contentToggle = createToggle("Show Content", "showContent");
    settingsPopup.appendChild(contentToggle);
    const dragDropContentToggle = createToggle("Drag and Drop Content", "dragDropContent");
    settingsPopup.appendChild(dragDropContentToggle);
    const toolbarEl = document.querySelector(".card-navigator-toolbar-container");
    if (toolbarEl) {
      toolbarEl.insertAdjacentElement("afterend", settingsPopup);
      document.addEventListener("click", function onClickOutside(event) {
        if (settingsPopup && !settingsPopup.contains(event.target) && !toolbarEl.contains(event.target)) {
          settingsPopup.remove();
          document.removeEventListener("click", onClickOutside);
        }
      });
    }
  } else {
    settingsPopup.classList.toggle("hidden");
  }
}

// src/ui/toolbar/toolbar.ts
var Toolbar = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.containerEl = void 0;
    this.isVertical = false;
  }
  initialize(containerEl) {
    this.containerEl = containerEl;
    this.createToolbar();
  }
  setOrientation(isVertical) {
    if (this.isVertical !== isVertical) {
      this.isVertical = isVertical;
      this.updateToolbarStyle();
      this.createToolbar();
    }
  }
  updateToolbarStyle() {
    if (this.containerEl) {
      this.containerEl.classList.toggle("vertical", this.isVertical);
      this.containerEl.classList.toggle("horizontal", !this.isVertical);
    }
  }
  createToolbar() {
    if (!this.containerEl) {
      return;
    }
    this.containerEl.empty();
    const toolbarContainer = document.createElement("div");
    toolbarContainer.className = "card-navigator-toolbar-container";
    const searchContainer = this.createSearchContainer();
    const separator = this.createSeparator();
    const actionIconsContainer = this.createActionIconsContainer();
    toolbarContainer.appendChild(searchContainer);
    toolbarContainer.appendChild(separator);
    toolbarContainer.appendChild(actionIconsContainer);
    this.containerEl.appendChild(toolbarContainer);
  }
  createSearchContainer() {
    const container = document.createElement("div");
    container.className = "card-navigator-search-container";
    const input = document.createElement("input");
    input.type = "text";
    input.placeholder = "Search...";
    input.className = "card-navigator-search-input";
    input.addEventListener("input", (0, import_obsidian2.debounce)(async (e) => {
      const searchTerm = e.target.value;
      const view = this.plugin.app.workspace.getLeavesOfType("card-navigator-view")[0].view;
      await view.cardContainer.searchCards(searchTerm);
    }, 300));
    container.appendChild(input);
    return container;
  }
  createActionIconsContainer() {
    const container = document.createElement("div");
    container.className = "card-navigator-action-icons-container";
    const icons = [
      { name: "folder", label: "Select folder", action: () => this.openFolderSelector() },
      { name: "arrow-up-narrow-wide", label: "Sort cards", action: () => toggleSort(this.plugin) },
      { name: "settings", label: "Settings", action: () => toggleSettings(this.plugin) }
    ];
    icons.forEach((icon) => {
      const iconElement = this.createToolbarIcon(icon.name, icon.label, icon.action);
      if (icon.name === "arrow-up-narrow-wide") {
        iconElement.classList.toggle(
          "active",
          this.plugin.settings.sortCriterion !== "fileName" || this.plugin.settings.sortOrder !== "asc"
        );
      }
      container.appendChild(iconElement);
    });
    return container;
  }
  createToolbarIcon(iconName, ariaLabel, action) {
    const icon = document.createElement("div");
    icon.className = "clickable-icon";
    icon.setAttribute("aria-label", ariaLabel);
    (0, import_obsidian2.setIcon)(icon, iconName);
    icon.addEventListener("click", action);
    return icon;
  }
  createSeparator() {
    const separator = document.createElement("div");
    separator.className = "toolbar-separator";
    return separator;
  }
  openFolderSelector() {
    new FolderSuggestModal(this.plugin, (folder) => {
      const view = this.plugin.app.workspace.getActiveViewOfType(CardNavigator);
      if (view) {
        view.cardContainer.displayCardsForFolder(folder);
      }
    }).open();
  }
  refresh() {
  }
  onClose() {
  }
};

// src/ui/cardContainer/cardContainer.ts
var import_obsidian4 = require("obsidian");

// src/ui/cardContainer/cardMaker.ts
var import_obsidian3 = require("obsidian");

// src/common/utils.ts
function separateFrontmatterAndContent(content) {
  const frontmatterRegex = /^---\s*\n([\s\S]*?)\n---\s*\n/;
  const match = content.match(frontmatterRegex);
  return match ? { frontmatter: match[1], cleanContent: content.slice(match[0].length).trim() } : { frontmatter: null, cleanContent: content.trim() };
}
function sortFiles(files, criterion, order) {
  return files.sort((a, b) => {
    let comparison = 0;
    switch (criterion) {
      case "fileName":
        comparison = a.basename.localeCompare(b.basename, void 0, { numeric: true, sensitivity: "base" });
        break;
      case "lastModified":
        comparison = a.stat.mtime - b.stat.mtime;
        break;
      case "created":
        comparison = a.stat.ctime - b.stat.ctime;
        break;
    }
    return order === "asc" ? comparison : -comparison;
  });
}

// src/ui/cardContainer/cardMaker.ts
var CardMaker = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  async getCardsForActiveFile(activeFile) {
    const folder = activeFile.parent;
    if (!folder) {
      return [];
    }
    const files = folder.children.filter((file) => file instanceof import_obsidian3.TFile);
    const sortedFiles = sortFiles(
      files,
      this.plugin.settings.sortCriterion,
      this.plugin.settings.sortOrder
    );
    return await Promise.all(sortedFiles.map((file) => this.createCard(file)));
  }
  async createCard(file) {
    const content = await this.plugin.app.vault.cachedRead(file);
    const { cleanContent } = separateFrontmatterAndContent(content);
    const contentWithoutHeader = this.removeFirstHeader(cleanContent);
    return {
      file,
      fileName: this.plugin.settings.showFileName ? file.basename : void 0,
      firstHeader: this.plugin.settings.showFirstHeader ? this.findFirstHeader(cleanContent) : void 0,
      content: this.plugin.settings.showContent ? this.truncateContent(contentWithoutHeader) : void 0
    };
  }
  removeFirstHeader(content) {
    const headerRegex = /^#+\s+(.+)$/m;
    return content.replace(headerRegex, "").trim();
  }
  findFirstHeader(content) {
    const headerRegex = /^#+\s+(.+)$/m;
    const match = content.match(headerRegex);
    return match ? match[1].trim() : void 0;
  }
  truncateContent(content) {
    const maxLength = this.plugin.settings.contentLength * 100;
    return content.length <= maxLength ? content : content.slice(0, maxLength) + "...";
  }
  createCardElement(card) {
    const cardElement = document.createElement("div");
    cardElement.className = "card-navigator-card";
    if (this.plugin.settings.showFileName && card.fileName) {
      const fileNameEl = cardElement.createEl("h3", { text: card.fileName });
      fileNameEl.className = "card-navigator-filename";
      fileNameEl.style.fontSize = `${this.plugin.settings.fileNameSize}px`;
    }
    if (this.plugin.settings.showFirstHeader && card.firstHeader) {
      const headerEl = cardElement.createEl("h4", { text: card.firstHeader });
      headerEl.className = "card-navigator-first-header";
      headerEl.style.fontSize = `${this.plugin.settings.firstHeaderSize}px`;
    }
    if (this.plugin.settings.showContent && card.content) {
      const contentEl = cardElement.createEl("div");
      contentEl.className = "card-navigator-content";
      contentEl.style.fontSize = `${this.plugin.settings.contentSize}px`;
      if (this.plugin.settings.renderContentAsHtml) {
        import_obsidian3.MarkdownRenderer.render(
          this.plugin.app,
          card.content,
          contentEl,
          card.file.path,
          this.plugin
        );
      } else {
        contentEl.textContent = card.content;
        contentEl.style.overflow = "hidden";
        contentEl.style.textOverflow = "ellipsis";
        contentEl.style.display = "-webkit-box";
      }
    }
    if (this.plugin.app.workspace.getActiveFile() === card.file) {
      cardElement.addClass("card-navigator-active");
    }
    this.addCardInteractions(cardElement, card);
    return cardElement;
  }
  addCardInteractions(cardElement, card) {
    cardElement.addEventListener("click", () => this.openFile(card.file));
    this.setupDragAndDrop(cardElement, card);
    this.setupContextMenu(cardElement, card.file);
  }
  setupDragAndDrop(cardElement, card) {
    cardElement.setAttribute("draggable", "true");
    cardElement.addEventListener("dragstart", (event) => {
      if (event.dataTransfer) {
        let dragContent = "";
        if (this.plugin.settings.dragDropContent) {
          if (this.plugin.settings.showFileName && card.fileName) {
            dragContent += `## ${card.fileName}

`;
          }
          if (this.plugin.settings.showFirstHeader && card.firstHeader) {
            dragContent += `# ${card.firstHeader}

`;
          }
          if (this.plugin.settings.showContent && card.content) {
            dragContent += `${card.content}

`;
          }
          if (dragContent === "") {
            dragContent = `[[${card.file.name}]]`;
          }
        } else {
          dragContent = `[[${card.file.name}]]`;
        }
        event.dataTransfer.setData("text/plain", dragContent.trim());
        event.dataTransfer.setDragImage(cardElement, 0, 0);
      }
    });
  }
  setupContextMenu(cardElement, file) {
    cardElement.addEventListener("contextmenu", (e) => {
      e.preventDefault();
      const menu = new import_obsidian3.Menu();
      this.plugin.app.workspace.trigger("file-menu", menu, file, "more-options");
      menu.showAtPosition({ x: e.clientX, y: e.clientY });
    });
  }
  openFile(file) {
    this.plugin.app.workspace.getLeaf().openFile(file);
  }
};

// src/ui/cardContainer/cardContainer.ts
var CardContainer = class {
  constructor(plugin, leaf) {
    this.containerEl = null;
    this.plugin = plugin;
    this.leaf = leaf;
    this.cardMaker = new CardMaker(this.plugin);
    this.isVertical = false;
    this.toolbarHeight = this.getCSSVariable("--card-navigator-toolbar-height", 50);
    this.cardGap = this.getCSSVariable("--card-navigator-gap", 10);
    this.containerPadding = this.getCSSVariable("--card-navigator-container-padding", 10);
  }
  getCSSVariable(variableName, defaultValue) {
    const valueStr = getComputedStyle(document.documentElement).getPropertyValue(variableName).trim();
    return parseInt(valueStr) || defaultValue;
  }
  async initialize(containerEl) {
    this.containerEl = containerEl;
    await this.waitForLeafCreation();
    this.registerEvents();
    this.updateContainerStyle();
    this.refresh();
  }
  async waitForLeafCreation() {
    return new Promise((resolve) => {
      const checkLeaf = () => {
        if (this.containerEl && this.containerEl.getBoundingClientRect().width > 0 && this.containerEl.clientHeight > 0) {
          resolve();
        } else {
          requestAnimationFrame(checkLeaf);
        }
      };
      checkLeaf();
    });
  }
  registerEvents() {
    this.plugin.registerEvent(
      this.plugin.app.workspace.on("active-leaf-change", () => {
        this.plugin.triggerRefresh();
      })
    );
    this.plugin.registerEvent(
      this.plugin.app.vault.on("modify", () => {
        this.plugin.triggerRefresh();
      })
    );
  }
  setOrientation(isVertical) {
    this.isVertical = isVertical;
    this.updateContainerStyle();
    this.refresh();
  }
  updateContainerStyle() {
    if (this.containerEl) {
      this.containerEl.classList.add("card-navigator-container");
      this.containerEl.classList.toggle("vertical", this.isVertical);
      this.containerEl.classList.toggle("horizontal", !this.isVertical);
      this.containerEl.classList.toggle("fixed-height", this.plugin.settings.fixedCardHeight);
      this.containerEl.classList.toggle("flexible-height", !this.plugin.settings.fixedCardHeight);
      this.containerEl.style.setProperty("--cards-per-view", this.plugin.settings.cardsPerView.toString());
      this.containerEl.style.setProperty("--card-navigator-gap", `${this.cardGap}px`);
      this.containerEl.style.setProperty("--card-navigator-toolbar-height", `${this.toolbarHeight}px`);
      if (this.isVertical) {
        this.containerEl.style.flexDirection = "column";
        this.containerEl.style.overflowY = "auto";
        this.containerEl.style.overflowX = "hidden";
        this.containerEl.style.height = `calc(100% - ${this.toolbarHeight}px)`;
        this.containerEl.style.marginTop = `${this.toolbarHeight}px`;
        this.containerEl.style.gap = `${this.cardGap}px`;
        this.containerEl.style.marginRight = `-10px`;
        this.containerEl.style.paddingRight = `${this.containerPadding}px`;
      } else {
        this.containerEl.style.flexDirection = "row";
        this.containerEl.style.overflowX = "auto";
        this.containerEl.style.overflowY = "hidden";
        this.containerEl.style.height = "100%";
        this.containerEl.style.marginTop = "0";
        this.containerEl.style.gap = `${this.cardGap}px`;
        this.containerEl.style.paddingTop = `${this.containerPadding}px`;
        this.containerEl.style.paddingBottom = `${this.containerPadding}px`;
      }
    }
  }
  async refresh() {
    let folder = null;
    if (this.plugin.settings.useSelectedFolder && this.plugin.settings.selectedFolder) {
      folder = this.plugin.app.vault.getAbstractFileByPath(this.plugin.settings.selectedFolder);
    } else {
      const activeFile = this.plugin.app.workspace.getActiveFile();
      folder = (activeFile == null ? void 0 : activeFile.parent) || null;
    }
    if (!folder || !this.containerEl) {
      return;
    }
    const files = folder.children.filter((file) => file instanceof import_obsidian4.TFile);
    const sortedFiles = sortFiles(files, this.plugin.settings.sortCriterion, this.plugin.settings.sortOrder);
    const cardsData = await Promise.all(sortedFiles.map((file) => this.cardMaker.createCard(file)));
    this.renderCards(cardsData);
  }
  renderCards(cardsData) {
    const containerEl = this.containerEl;
    if (!containerEl) return;
    const currentScrollTop = containerEl.scrollTop;
    const currentScrollLeft = containerEl.scrollLeft;
    const activeCardIndex = Array.from(containerEl.children).findIndex(
      (child) => child.classList.contains("card-navigator-active")
    );
    containerEl.innerHTML = "";
    const containerHeight = containerEl.clientHeight;
    const availableHeight = containerHeight - this.toolbarHeight;
    cardsData.forEach((cardData, index) => {
      const card = this.cardMaker.createCardElement(cardData);
      card.style.flexShrink = "0";
      if (this.isVertical) {
        card.style.width = "100%";
        if (this.plugin.settings.fixedCardHeight) {
          card.style.height = `${availableHeight / this.plugin.settings.cardsPerView}px`;
          card.style.overflow = "auto";
        } else {
          card.style.height = "auto";
          card.style.minHeight = `${availableHeight / this.plugin.settings.cardsPerView / 2}px`;
          card.style.maxHeight = `${availableHeight / 2}px`;
        }
      } else {
        card.style.width = `${100 / this.plugin.settings.cardsPerView}%`;
        card.style.height = "100%";
      }
      if (cardData.file === this.plugin.app.workspace.getActiveFile()) {
        card.classList.add("card-navigator-active");
      }
      containerEl.appendChild(card);
    });
    containerEl.scrollTop = currentScrollTop;
    containerEl.scrollLeft = currentScrollLeft;
    const newActiveCardIndex = Array.from(containerEl.children).findIndex(
      (child) => child.classList.contains("card-navigator-active")
    );
    if (activeCardIndex !== newActiveCardIndex && newActiveCardIndex !== -1) {
      this.scrollToActiveCard(false);
    }
  }
  scrollToActiveCard(animate = true) {
    if (!this.containerEl) return;
    const activeCard = this.containerEl.querySelector(".card-navigator-active");
    if (!activeCard) return;
    const containerRect = this.containerEl.getBoundingClientRect();
    const activeCardRect = activeCard.getBoundingClientRect();
    let offset = 0;
    let scrollProperty;
    if (this.isVertical) {
      const containerCenter = containerRect.top + containerRect.height / 2;
      const cardCenter = activeCardRect.top + activeCardRect.height / 2;
      offset = cardCenter - containerCenter;
      scrollProperty = "scrollTop";
    } else {
      const containerCenter = containerRect.left + containerRect.width / 2;
      const cardCenter = activeCardRect.left + activeCardRect.width / 2;
      offset = cardCenter - containerCenter;
      scrollProperty = "scrollLeft";
    }
    const threshold = 50;
    if (Math.abs(offset) < threshold) return;
    const newScrollPosition = this.containerEl[scrollProperty] + offset;
    if (animate) {
      const start = this.containerEl[scrollProperty];
      const change = newScrollPosition - start;
      const duration = 300;
      let startTime = null;
      const animateScroll = (currentTime) => {
        if (startTime === null) startTime = currentTime;
        const timeElapsed = currentTime - startTime;
        const progress = Math.min(timeElapsed / duration, 1);
        const easeProgress = 0.5 - Math.cos(progress * Math.PI) / 2;
        if (this.containerEl) {
          this.containerEl[scrollProperty] = start + change * easeProgress;
        }
        if (timeElapsed < duration && this.containerEl) {
          requestAnimationFrame(animateScroll);
        }
      };
      requestAnimationFrame(animateScroll);
    } else {
      this.containerEl[scrollProperty] = newScrollPosition;
    }
  }
  centerActiveCard() {
    this.scrollToActiveCard(true);
  }
  scrollUp(count = 1) {
    if (!this.containerEl) return;
    if (this.isVertical) {
      const scrollAmount = this.getCardHeight() * count;
      this.containerEl.scrollBy({ top: -scrollAmount, behavior: "smooth" });
    } else {
      const scrollAmount = this.getCardWidth() * count;
      this.containerEl.scrollBy({ left: -scrollAmount, behavior: "smooth" });
    }
  }
  scrollDown(count = 1) {
    if (!this.containerEl) return;
    if (this.isVertical) {
      const scrollAmount = this.getCardHeight() * count;
      this.containerEl.scrollBy({ top: scrollAmount, behavior: "smooth" });
    } else {
      const scrollAmount = this.getCardWidth() * count;
      this.containerEl.scrollBy({ left: scrollAmount, behavior: "smooth" });
    }
  }
  scrollLeft(count = 1) {
    if (!this.containerEl) return;
    const scrollAmount = this.getCardWidth() * count;
    this.containerEl.scrollBy({ left: -scrollAmount, behavior: "smooth" });
  }
  scrollRight(count = 1) {
    if (!this.containerEl) return;
    const scrollAmount = this.getCardWidth() * count;
    this.containerEl.scrollBy({ left: scrollAmount, behavior: "smooth" });
  }
  getCardHeight() {
    if (!this.containerEl) return 0;
    const firstCard = this.containerEl.querySelector(".card-navigator-card");
    return firstCard ? firstCard.clientHeight : 0;
  }
  getCardWidth() {
    if (!this.containerEl) return 0;
    const firstCard = this.containerEl.querySelector(".card-navigator-card");
    return firstCard ? firstCard.clientWidth : 0;
  }
  scrollToCenter() {
    this.scrollToActiveCard();
  }
  displayCards(filteredFiles) {
  }
  async searchCards(searchTerm) {
    const activeFile = this.plugin.app.workspace.getActiveFile();
    if (!activeFile) return;
    const folder = activeFile.parent;
    if (!folder) return;
    const files = folder.children.filter((file) => file instanceof import_obsidian4.TFile);
    const filteredFiles = await this.filterFilesByContent(files, searchTerm);
    const cards = await Promise.all(filteredFiles.map((file) => this.cardMaker.createCard(file)));
    this.renderCards(cards);
  }
  async displayCardsForFolder(folder) {
    const files = folder.children.filter((file) => file instanceof import_obsidian4.TFile);
    const cards = await Promise.all(files.map((file) => this.cardMaker.createCard(file)));
    this.renderCards(cards);
  }
  async filterFilesByContent(files, searchTerm) {
    const lowercaseSearchTerm = searchTerm.toLowerCase();
    const filteredFiles = [];
    for (const file of files) {
      const content = await this.plugin.app.vault.cachedRead(file);
      if (file.basename.toLowerCase().includes(lowercaseSearchTerm) || content.toLowerCase().includes(lowercaseSearchTerm)) {
        filteredFiles.push(file);
      }
    }
    return filteredFiles;
  }
  async sortCards(criterion, order) {
    this.plugin.settings.sortCriterion = criterion;
    this.plugin.settings.sortOrder = order;
    await this.plugin.saveSettings();
    this.plugin.triggerRefresh();
  }
  onClose() {
  }
};

// src/ui/cardNavigator.ts
var VIEW_TYPE_CARD_NAVIGATOR = "card-navigator-view";
var CardNavigator = class extends import_obsidian5.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
    this.toolbar = new Toolbar(this.plugin);
    this.cardContainer = new CardContainer(this.plugin, this.leaf);
    this.isVertical = this.calculateIsVertical();
    this.resizeObserver = new ResizeObserver(this.handleResize.bind(this));
  }
  getViewType() {
    return VIEW_TYPE_CARD_NAVIGATOR;
  }
  getDisplayText() {
    return "Card Navigator";
  }
  getIcon() {
    return "layers-3";
  }
  calculateIsVertical() {
    const { width, height } = this.leaf.view.containerEl.getBoundingClientRect();
    const isVertical = height > width;
    this.cardContainer.setOrientation(isVertical);
    return isVertical;
  }
  handleResize() {
    const newIsVertical = this.calculateIsVertical();
    if (newIsVertical !== this.isVertical) {
      this.isVertical = newIsVertical;
      this.cardContainer.setOrientation(this.isVertical);
    }
  }
  updateLayoutAndRefresh() {
    this.isVertical = this.calculateIsVertical();
    this.cardContainer.setOrientation(this.isVertical);
    this.toolbar.setOrientation(this.isVertical);
    this.refresh();
  }
  handleKeyDown(event) {
    if (this.containerEl && this.containerEl.contains(document.activeElement)) {
      switch (event.key) {
        case "ArrowUp":
          this.cardContainer.scrollUp();
          event.preventDefault();
          break;
        case "ArrowDown":
          this.cardContainer.scrollDown();
          event.preventDefault();
          break;
        case "ArrowLeft":
          this.cardContainer.scrollLeft();
          event.preventDefault();
          break;
        case "ArrowRight":
          this.cardContainer.scrollRight();
          event.preventDefault();
          break;
        case "PageUp":
          if (this.isVertical) {
            this.cardContainer.scrollUp();
          } else {
            this.cardContainer.scrollLeft();
          }
          event.preventDefault();
          break;
        case "PageDown":
          if (this.isVertical) {
            this.cardContainer.scrollDown();
          } else {
            this.cardContainer.scrollRight();
          }
          event.preventDefault();
          break;
        case "Home":
          this.cardContainer.scrollToCenter();
          event.preventDefault();
          break;
      }
    }
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    const toolbarEl = container.createDiv("card-navigator-toolbar");
    const cardContainerEl = container.createDiv("card-container");
    this.toolbar.initialize(toolbarEl);
    this.cardContainer.initialize(cardContainerEl);
    this.isVertical = this.calculateIsVertical();
    this.updateLayoutAndRefresh();
    this.resizeObserver.observe(this.leaf.view.containerEl);
    this.registerDomEvent(this.containerEl, "keydown", this.handleKeyDown.bind(this));
    this.refresh();
    this.centerActiveCardOnOpen();
  }
  centerActiveCardOnOpen() {
    if (this.plugin.settings.centerActiveCardOnOpen) {
      setTimeout(() => {
        this.cardContainer.centerActiveCard();
      }, 300);
    }
  }
  async onClose() {
    this.resizeObserver.disconnect();
    this.toolbar.onClose();
    this.cardContainer.onClose();
    this.containerEl.removeEventListener("keydown", this.handleKeyDown.bind(this));
  }
  refresh() {
    this.toolbar.refresh();
    this.cardContainer.refresh();
  }
};

// src/ui/settingsTab.ts
var import_obsidian6 = require("obsidian");
var SettingTab = class extends import_obsidian6.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    const createSetting = (name, desc, settingKey) => {
      return new import_obsidian6.Setting(containerEl).setName(name).setDesc(desc);
    };
    const updateSetting = async (settingKey, value) => {
      this.plugin.settings[settingKey] = value;
      await this.plugin.saveSettings();
      this.plugin.triggerRefresh();
    };
    createSetting("Cards per view", "Number of cards to display at once", "cardsPerView").addSlider((slider) => slider.setLimits(1, 10, 1).setValue(this.plugin.settings.cardsPerView).setDynamicTooltip().onChange(async (value) => {
      await updateSetting("cardsPerView", value);
    }));
    createSetting("Folder Selection", "Choose whether to use the active file's folder or a selected folder", "useSelectedFolder").addDropdown((dropdown) => dropdown.addOption("active", "Active File's Folder").addOption("selected", "Selected Folder").setValue(this.plugin.settings.useSelectedFolder ? "selected" : "active").onChange(async (value) => {
      await updateSetting("useSelectedFolder", value === "selected");
      this.display();
    }));
    if (this.plugin.settings.useSelectedFolder) {
      createSetting("Select Folder", "Choose a folder for Card Navigator", "selectedFolder").addButton((button) => button.setButtonText(this.plugin.settings.selectedFolder || "Choose folder").onClick(() => {
        new FolderSuggestModal(this.plugin, async (folder) => {
          await updateSetting("selectedFolder", folder.path);
          this.display();
        }).open();
      }));
    }
    createSetting("Default sort method", "Choose the default sorting method for cards", "sortCriterion").addDropdown((dropdown) => {
      dropdown.addOption("fileName_asc", "File name (A to Z)").addOption("fileName_desc", "File name (Z to A)").addOption("lastModified_desc", "Last modified (newest first)").addOption("lastModified_asc", "Last modified (oldest first)").addOption("created_desc", "Created (newest first)").addOption("created_asc", "Created (oldest first)").setValue(`${this.plugin.settings.sortCriterion}_${this.plugin.settings.sortOrder}`).onChange(async (value) => {
        const [criterion, order] = value.split("_");
        await updateSetting("sortCriterion", criterion);
        await updateSetting("sortOrder", order);
      });
    });
    createSetting("Fixed Card Height", "If enabled, all cards will have the same height. If disabled, card height will adjust to content.", "fixedCardHeight").addToggle((toggle) => toggle.setValue(this.plugin.settings.fixedCardHeight).onChange(async (value) => {
      await updateSetting("fixedCardHeight", value);
    }));
    createSetting("Render Content as HTML", "If enabled, card content will be rendered as HTML", "renderContentAsHtml").addToggle((toggle) => toggle.setValue(this.plugin.settings.renderContentAsHtml).onChange(async (value) => {
      await updateSetting("renderContentAsHtml", value);
    }));
    createSetting("Center Active Card on Open", "Automatically center the active card when opening the Card Navigator", "centerActiveCardOnOpen").addToggle((toggle) => toggle.setValue(this.plugin.settings.centerActiveCardOnOpen).onChange(async (value) => {
      this.plugin.settings.centerActiveCardOnOpen = value;
      await this.plugin.saveSettings();
    }));
    createSetting("Center Card Method", "Choose how to center the active card in the view", "centerCardMethod").addDropdown((dropdown) => dropdown.addOption("scroll", "Scroll to active card").addOption("centered", "Render the active card centered").setValue(this.plugin.settings.centerCardMethod).onChange(async (value) => {
      await updateSetting("centerCardMethod", value);
      this.display();
    }));
    if (this.plugin.settings.centerCardMethod === "centered") {
      createSetting("Animation Duration", "Set the duration of the card animation (in milliseconds)", "animationDuration").addSlider((slider) => slider.setLimits(0, 1e3, 50).setValue(this.plugin.settings.animationDuration).setDynamicTooltip().onChange(async (value) => {
        await updateSetting("animationDuration", value);
      }));
    }
    createSetting("Drag and Drop Content", "When enabled, dragging a card will insert the note content instead of a link.", "dragDropContent").addToggle((toggle) => toggle.setValue(this.plugin.settings.dragDropContent).onChange(async (value) => {
      await updateSetting("dragDropContent", value);
    }));
    containerEl.createEl("h3", { text: "Display items Settings" });
    const displaySettings = [
      { name: "Show File Name", key: "showFileName" },
      { name: "Show First Header", key: "showFirstHeader" },
      { name: "Show Content", key: "showContent" }
    ];
    displaySettings.forEach(({ name, key }) => {
      createSetting(name, `Toggle to display or hide the ${name.toLowerCase()} on cards`, key).addToggle((toggle) => toggle.setValue(this.plugin.settings[key]).onChange(async (value) => {
        await updateSetting(key, value);
      }));
    });
    const fontSizeSettings = [
      { name: "File Name Size", key: "fileNameSize", min: 15, max: 25 },
      { name: "First Header Size", key: "firstHeaderSize", min: 15, max: 25 },
      { name: "Content Size", key: "contentSize", min: 10, max: 20 }
    ];
    fontSizeSettings.forEach(({ name, key, min, max }) => {
      createSetting(name, `Set the font size for the ${name.toLowerCase()}`, key).addSlider((slider) => slider.setLimits(min, max, 1).setValue(this.plugin.settings[key]).setDynamicTooltip().onChange(async (value) => {
        await updateSetting(key, value);
      }));
    });
    createSetting("Content Length", "Maximum content length displayed on each card", "contentLength").addSlider((slider) => slider.setLimits(1, 10, 1).setValue(this.plugin.settings.contentLength).setDynamicTooltip().onChange(async (value) => {
      await updateSetting("contentLength", value);
    }));
  }
};

// src/common/settings.ts
var DEFAULT_SETTINGS = {
  cardsPerView: 6,
  useSelectedFolder: false,
  selectedFolder: null,
  sortCriterion: "fileName",
  sortOrder: "asc",
  fixedCardHeight: true,
  renderContentAsHtml: false,
  centerActiveCardOnOpen: true,
  centerCardMethod: "scroll",
  animationDuration: 300,
  centerActiveCardHotkey: { modifiers: ["Ctrl", "Mod"], key: "Home" },
  activeCardBorderColor: "var(--active-border-color)",
  activeCardBackgroundColor: "var(--active-background-color)",
  dragDropContent: false,
  showFileName: true,
  fileNameSize: 20,
  showFirstHeader: true,
  firstHeaderSize: 18,
  showContent: true,
  contentSize: 15,
  contentLength: 5
};

// src/main.ts
var CardNavigatorPlugin = class extends import_obsidian7.Plugin {
  constructor() {
    super(...arguments);
    this.settings = DEFAULT_SETTINGS;
    this.selectedFolder = null;
    this.refreshDebounced = () => {
    };
  }
  async onload() {
    await this.loadSettings();
    this.registerView(
      VIEW_TYPE_CARD_NAVIGATOR,
      (leaf) => new CardNavigator(leaf, this)
    );
    this.addSettingTab(new SettingTab(this.app, this));
    this.addRibbonIcon("layers-3", "Activate Card Navigator", () => {
      this.activateView();
    });
    this.addCommand({
      id: "scroll-up-one-card",
      name: "Scroll Up One Card",
      callback: () => this.scrollCards("up", 1),
      hotkeys: [{ modifiers: ["Ctrl", "Mod"], key: "ArrowUp" }]
    });
    this.addCommand({
      id: "scroll-down-one-card",
      name: "Scroll Down One Card",
      callback: () => this.scrollCards("down", 1),
      hotkeys: [{ modifiers: ["Ctrl", "Mod"], key: "ArrowDown" }]
    });
    this.addCommand({
      id: "scroll-left-one-card",
      name: "Scroll Left One Card",
      callback: () => this.scrollCards("left", 1),
      hotkeys: [{ modifiers: ["Ctrl", "Mod"], key: "ArrowLeft" }]
    });
    this.addCommand({
      id: "scroll-right-one-card",
      name: "Scroll Right One Card",
      callback: () => this.scrollCards("right", 1),
      hotkeys: [{ modifiers: ["Ctrl", "Mod"], key: "ArrowRight" }]
    });
    this.addCommand({
      id: "scroll-up-page",
      name: "Scroll Up One Page",
      callback: () => this.scrollCards("up", this.settings.cardsPerView),
      hotkeys: [{ modifiers: ["Ctrl", "Mod"], key: "PageUp" }]
    });
    this.addCommand({
      id: "scroll-down-page",
      name: "Scroll Down One Page",
      callback: () => this.scrollCards("down", this.settings.cardsPerView),
      hotkeys: [{ modifiers: ["Ctrl", "Mod"], key: "PageDown" }]
    });
    this.addCommand({
      id: "center-active-card",
      name: "Center Active Card",
      callback: () => {
        const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR);
        for (const leaf of leaves) {
          if (leaf.view instanceof CardNavigator) {
            leaf.view.cardContainer.centerActiveCard();
          }
        }
      },
      hotkeys: this.settings.centerActiveCardHotkey ? [this.settings.centerActiveCardHotkey] : []
    });
    this.app.workspace.onLayoutReady(() => {
      this.activateView();
    });
    this.refreshDebounced = (0, import_obsidian7.debounce)(this.refreshViews.bind(this), 100, true);
  }
  async onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    this.updateHotkey();
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.refreshDebounced();
    this.updateHotkey();
  }
  updateHotkey() {
    const command = this.app.commands.commands["card-navigator-plugin:center-active-card"];
    if (command) {
      command.hotkeys = this.settings.centerActiveCardHotkey ? [this.settings.centerActiveCardHotkey] : [];
    }
  }
  scrollCards(direction, count) {
    const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR);
    for (const leaf of leaves) {
      if (leaf.view instanceof CardNavigator) {
        const { cardContainer } = leaf.view;
        const isVertical = cardContainer.isVertical;
        switch (direction) {
          case "up":
            isVertical ? cardContainer.scrollUp(count) : cardContainer.scrollLeft(count);
            break;
          case "down":
            isVertical ? cardContainer.scrollDown(count) : cardContainer.scrollRight(count);
            break;
          case "left":
            cardContainer.scrollLeft(count);
            break;
          case "right":
            cardContainer.scrollRight(count);
            break;
        }
      }
    }
  }
  refreshViews() {
    const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR);
    leaves.forEach((leaf) => {
      if (leaf.view instanceof CardNavigator) {
        leaf.view.updateLayoutAndRefresh();
      }
    });
  }
  displayFilteredCards(filteredFiles) {
    var _a;
    const view = (_a = this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR)[0]) == null ? void 0 : _a.view;
    if (view) {
      view.cardContainer.displayCards(filteredFiles);
    }
  }
  sortCards(criterion, order) {
    var _a;
    const view = (_a = this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR)[0]) == null ? void 0 : _a.view;
    if (view) {
      view.cardContainer.sortCards(criterion, order);
    }
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR)[0];
    if (!leaf) {
      const rightLeaf = workspace.getRightLeaf(false);
      if (rightLeaf) {
        await rightLeaf.setViewState({ type: VIEW_TYPE_CARD_NAVIGATOR, active: true });
        leaf = workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR)[0];
      }
    }
    if (leaf) {
      workspace.revealLeaf(leaf);
    }
  }
  triggerRefresh() {
    this.refreshDebounced();
  }
};
//# sourceMappingURL=data:application/json;base64,

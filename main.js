/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CardNavigatorPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian7 = require("obsidian");

// src/ui/cardNavigator.ts
var import_obsidian5 = require("obsidian");

// src/ui/toolbar/toolbar.ts
var import_obsidian2 = require("obsidian");

// src/ui/toolbar/toolbarActions.ts
var import_obsidian = require("obsidian");
var FolderSuggestModal = class extends import_obsidian.FuzzySuggestModal {
  constructor(plugin, onSelect) {
    super(plugin.app);
    this.plugin = plugin;
    this.onSelect = onSelect;
  }
  getItems() {
    return this.plugin.app.vault.getAllLoadedFiles().filter((file) => file instanceof import_obsidian.TFolder);
  }
  getItemText(folder) {
    return folder.path;
  }
  onChooseItem(folder) {
    this.onSelect(folder);
  }
};
function moveCards(direction, plugin, amount = "single") {
  const view = plugin.app.workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR)[0].view;
  const cardContainer = view.cardContainer;
  const cardContainerEl = cardContainer.getContainerEl();
  if (!cardContainerEl) return;
  const { cardWidth, cardHeight, isVertical } = cardContainer.getCardSizeAndOrientation();
  const moveAmount = amount === "single" ? isVertical ? cardHeight : cardWidth : (isVertical ? cardHeight : cardWidth) * plugin.settings.cardsPerView;
  const currentScroll = isVertical ? cardContainerEl.scrollTop : cardContainerEl.scrollLeft;
  switch (direction) {
    case "up":
      cardContainerEl.scrollTo({ top: currentScroll - moveAmount, behavior: "smooth" });
      break;
    case "down":
      cardContainerEl.scrollTo({ top: currentScroll + moveAmount, behavior: "smooth" });
      break;
    case "left":
      cardContainerEl.scrollTo({ left: currentScroll - moveAmount, behavior: "smooth" });
      break;
    case "right":
      cardContainerEl.scrollTo({ left: currentScroll + moveAmount, behavior: "smooth" });
      break;
    case "center": {
      const activeCard = cardContainerEl.querySelector(".card-navigator-active");
      if (activeCard) {
        activeCard.scrollIntoView({ behavior: "smooth", block: "center", inline: "center" });
      }
      break;
    }
  }
}
function toggleSearch(plugin) {
  let searchPopup = document.querySelector(".card-navigator-search-popup");
  if (!searchPopup) {
    searchPopup = document.createElement("div");
    searchPopup.className = "card-navigator-search-popup";
    const input = document.createElement("input");
    input.type = "text";
    input.placeholder = "Search...";
    input.addEventListener("input", async () => {
      const searchTerm = input.value;
      const view = plugin.app.workspace.getLeavesOfType("card-navigator-view")[0].view;
      await view.cardContainer.searchCards(searchTerm);
    });
    searchPopup.appendChild(input);
    const toolbarEl = document.querySelector(".card-navigator-toolbar-container");
    if (toolbarEl) {
      toolbarEl.insertAdjacentElement("afterend", searchPopup);
      document.addEventListener("click", function onClickOutside(event) {
        if (searchPopup && !searchPopup.contains(event.target) && !toolbarEl.contains(event.target)) {
          searchPopup.remove();
          document.removeEventListener("click", onClickOutside);
        }
      });
    }
  } else {
    searchPopup.classList.toggle("hidden");
  }
}
function toggleSort(plugin) {
  let sortPopup = document.querySelector(".card-navigator-sort-popup");
  if (!sortPopup) {
    sortPopup = document.createElement("div");
    sortPopup.className = "card-navigator-sort-popup";
    const currentSort = `${plugin.settings.sortCriterion}_${plugin.settings.sortOrder}`;
    const addSortOption = (value, label) => {
      const option = document.createElement("button");
      option.textContent = label;
      option.classList.toggle("active", currentSort === value);
      option.addEventListener("click", async () => {
        const [criterion, order] = value.split("_");
        plugin.settings.sortCriterion = criterion;
        plugin.settings.sortOrder = order;
        await plugin.saveSettings();
        plugin.refreshViews();
        sortPopup.remove();
      });
      sortPopup.appendChild(option);
    };
    addSortOption("fileName_asc", "File name (A to Z)");
    addSortOption("fileName_desc", "File name (Z to A)");
    addSortOption("lastModified_desc", "Last modified (newest first)");
    addSortOption("lastModified_asc", "Last modified (oldest first)");
    addSortOption("created_desc", "Created (newest first)");
    addSortOption("created_asc", "Created (oldest first)");
    const toolbarEl = document.querySelector(".card-navigator-toolbar-container");
    if (toolbarEl) {
      toolbarEl.insertAdjacentElement("afterend", sortPopup);
      document.addEventListener("click", function onClickOutside(event) {
        if (sortPopup && !sortPopup.contains(event.target) && !toolbarEl.contains(event.target)) {
          sortPopup.remove();
          document.removeEventListener("click", onClickOutside);
        }
      });
    }
  } else {
    sortPopup.remove();
  }
}
function toggleSettings(plugin) {
  let settingsPopup = document.querySelector(".card-navigator-settings-popup");
  if (!settingsPopup) {
    settingsPopup = document.createElement("div");
    settingsPopup.className = "card-navigator-settings-popup";
    const cardsPerViewSetting = document.createElement("input");
    cardsPerViewSetting.type = "range";
    cardsPerViewSetting.min = "1";
    cardsPerViewSetting.max = "10";
    cardsPerViewSetting.value = plugin.settings.cardsPerView.toString();
    cardsPerViewSetting.addEventListener("input", (e) => {
      const value = e.target.value;
      plugin.settings.cardsPerView = parseInt(value, 10);
      plugin.saveSettings();
      plugin.refreshViews();
    });
    const cardsPerViewLabel = document.createElement("label");
    cardsPerViewLabel.textContent = "Cards Per View:";
    settingsPopup.appendChild(cardsPerViewLabel);
    settingsPopup.appendChild(cardsPerViewSetting);
    const fontSizeSetting = document.createElement("input");
    fontSizeSetting.type = "range";
    fontSizeSetting.min = "10";
    fontSizeSetting.max = "30";
    fontSizeSetting.value = plugin.settings.contentSize.toString();
    fontSizeSetting.addEventListener("input", (e) => {
      const value = e.target.value;
      plugin.settings.contentSize = parseInt(value, 10);
      plugin.saveSettings();
      plugin.refreshViews();
    });
    const fontSizeLabel = document.createElement("label");
    fontSizeLabel.textContent = "Content Font Size:";
    settingsPopup.appendChild(fontSizeLabel);
    settingsPopup.appendChild(fontSizeSetting);
    const createToggle = (labelText, initialValue, onChange) => {
      const container = document.createElement("div");
      const label = document.createElement("label");
      label.textContent = labelText;
      const toggle = document.createElement("input");
      toggle.type = "checkbox";
      toggle.checked = initialValue;
      toggle.addEventListener("change", (e) => {
        onChange(e.target.checked);
        plugin.saveSettings();
        plugin.refreshViews();
      });
      container.appendChild(label);
      container.appendChild(toggle);
      return container;
    };
    const fileNameToggle = createToggle("Show File Name", plugin.settings.showFileName, (value) => {
      plugin.settings.showFileName = value;
    });
    settingsPopup.appendChild(fileNameToggle);
    const firstHeaderToggle = createToggle("Show First Header", plugin.settings.showFirstHeader, (value) => {
      plugin.settings.showFirstHeader = value;
    });
    settingsPopup.appendChild(firstHeaderToggle);
    const contentToggle = createToggle("Show Content", plugin.settings.showContent, (value) => {
      plugin.settings.showContent = value;
    });
    settingsPopup.appendChild(contentToggle);
    const dragDropContentToggle = createToggle("Drag and Drop Content", plugin.settings.dragDropContent, (value) => {
      plugin.settings.dragDropContent = value;
    });
    settingsPopup.appendChild(dragDropContentToggle);
    const toolbarEl = document.querySelector(".card-navigator-toolbar-container");
    if (toolbarEl) {
      toolbarEl.insertAdjacentElement("afterend", settingsPopup);
      document.addEventListener("click", function onClickOutside(event) {
        if (settingsPopup && !settingsPopup.contains(event.target) && !toolbarEl.contains(event.target)) {
          settingsPopup.remove();
          document.removeEventListener("click", onClickOutside);
        }
      });
    }
  } else {
    settingsPopup.classList.toggle("hidden");
  }
}

// src/ui/toolbar/toolbar.ts
var Toolbar = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.containerEl = void 0;
    this.isVertical = false;
  }
  initialize(containerEl) {
    this.containerEl = containerEl;
    this.createToolbar();
  }
  setOrientation(isVertical) {
    if (this.isVertical !== isVertical) {
      this.isVertical = isVertical;
      this.updateToolbarStyle();
      this.createToolbar();
    }
  }
  updateToolbarStyle() {
    if (this.containerEl) {
      this.containerEl.classList.toggle("vertical", this.isVertical);
      this.containerEl.classList.toggle("horizontal", !this.isVertical);
    }
  }
  createToolbar() {
    if (!this.containerEl) {
      return;
    }
    this.containerEl.empty();
    const toolbarContainer = document.createElement("div");
    toolbarContainer.className = "card-navigator-toolbar-container";
    const moveIconsContainer = this.isVertical ? this.createVerticalMoveIconsContainer() : this.createHorizontalMoveIconsContainer();
    const separator = this.createSeparator();
    const actionIconsContainer = this.createActionIconsContainer();
    toolbarContainer.appendChild(moveIconsContainer);
    toolbarContainer.appendChild(separator);
    toolbarContainer.appendChild(actionIconsContainer);
    this.containerEl.appendChild(toolbarContainer);
  }
  getMode() {
    const view = this.plugin.app.workspace.getLeavesOfType("card-navigator-view")[0].view;
    return view.containerEl.clientHeight > view.containerEl.clientWidth ? "vertical" : "horizontal";
  }
  createVerticalMoveIconsContainer() {
    const container = document.createElement("div");
    container.className = "card-navigator-move-icons-container";
    const icons = [
      { name: "chevrons-up", label: "Move up multiple", action: () => moveCards("up", this.plugin, "multiple") },
      { name: "chevron-up", label: "Move up single", action: () => moveCards("up", this.plugin, "single") },
      { name: "chevrons-down-up", label: "Center active card", action: () => moveCards("center", this.plugin) },
      { name: "chevron-down", label: "Move down single", action: () => moveCards("down", this.plugin, "single") },
      { name: "chevrons-down", label: "Move down multiple", action: () => moveCards("down", this.plugin, "multiple") }
    ];
    icons.forEach((icon) => {
      const iconElement = this.createToolbarIcon(icon.name, icon.label, icon.action);
      container.appendChild(iconElement);
    });
    return container;
  }
  createHorizontalMoveIconsContainer() {
    const container = document.createElement("div");
    container.className = "card-navigator-move-icons-container";
    const icons = [
      { name: "chevrons-left", label: "Move left multiple", action: () => moveCards("left", this.plugin, "multiple") },
      { name: "chevron-left", label: "Move left single", action: () => moveCards("left", this.plugin, "single") },
      { name: "chevrons-right-left", label: "Center active card", action: () => moveCards("center", this.plugin) },
      { name: "chevron-right", label: "Move right single", action: () => moveCards("right", this.plugin, "single") },
      { name: "chevrons-right", label: "Move right multiple", action: () => moveCards("right", this.plugin, "multiple") }
    ];
    icons.forEach((icon) => {
      const iconElement = this.createToolbarIcon(icon.name, icon.label, icon.action);
      container.appendChild(iconElement);
    });
    return container;
  }
  createActionIconsContainer() {
    const container = document.createElement("div");
    container.className = "card-navigator-action-icons-container";
    const icons = [
      { name: "search", label: "Search", action: () => toggleSearch(this.plugin) },
      { name: "folder", label: "Select folder", action: () => this.openFolderSelector() },
      { name: "arrow-up-narrow-wide", label: "Sort cards", action: () => toggleSort(this.plugin) },
      { name: "settings", label: "Settings", action: () => toggleSettings(this.plugin) }
    ];
    icons.forEach((icon) => {
      const iconElement = this.createToolbarIcon(icon.name, icon.label, icon.action);
      if (icon.name === "arrow-up-narrow-wide") {
        iconElement.classList.toggle(
          "active",
          this.plugin.settings.sortCriterion !== "fileName" || this.plugin.settings.sortOrder !== "asc"
        );
      }
      container.appendChild(iconElement);
    });
    return container;
  }
  createToolbarIcon(iconName, ariaLabel, action) {
    const icon = document.createElement("div");
    icon.className = "clickable-icon";
    icon.setAttribute("aria-label", ariaLabel);
    (0, import_obsidian2.setIcon)(icon, iconName);
    icon.addEventListener("click", action);
    return icon;
  }
  createSeparator() {
    const separator = document.createElement("div");
    separator.className = "toolbar-separator";
    return separator;
  }
  openFolderSelector() {
    new FolderSuggestModal(this.plugin, (folder) => {
      const view = this.plugin.app.workspace.getActiveViewOfType(CardNavigator);
      if (view) {
        view.cardContainer.displayCardsForFolder(folder);
      }
    }).open();
  }
  refresh() {
  }
  onClose() {
  }
};

// src/ui/cardContainer/cardContainer.ts
var import_obsidian4 = require("obsidian");

// src/ui/cardContainer/cardMaker.ts
var import_obsidian3 = require("obsidian");

// src/common/utils.ts
function debounce(func, waitFor) {
  let timeout = null;
  return (...args) => {
    if (timeout) {
      clearTimeout(timeout);
    }
    return new Promise((resolve) => {
      timeout = setTimeout(() => {
        const result = func(...args);
        resolve(result);
      }, waitFor);
    });
  };
}
function separateFrontmatterAndContent(content) {
  const frontmatterRegex = /^---\s*\n([\s\S]*?)\n---\s*\n/;
  const match = content.match(frontmatterRegex);
  return match ? { frontmatter: match[1], cleanContent: content.slice(match[0].length).trim() } : { frontmatter: null, cleanContent: content.trim() };
}
function sortFiles(files, criterion, order) {
  return files.sort((a, b) => {
    let comparison = 0;
    switch (criterion) {
      case "fileName":
        comparison = a.basename.localeCompare(b.basename, void 0, { numeric: true, sensitivity: "base" });
        break;
      case "lastModified":
        comparison = a.stat.mtime - b.stat.mtime;
        break;
      case "created":
        comparison = a.stat.ctime - b.stat.ctime;
        break;
    }
    return order === "asc" ? comparison : -comparison;
  });
}
function calculateCardSize(isVertical, containerRect, cardsPerView, padding = 15) {
  const { width: leafWidth, height: leafHeight } = containerRect;
  let cardWidth, cardHeight;
  if (isVertical) {
    cardWidth = leafWidth - 2 * padding;
    cardHeight = leafHeight / cardsPerView;
  } else {
    cardWidth = leafWidth / cardsPerView;
    cardHeight = leafHeight - 2 * padding;
  }
  return { cardWidth, cardHeight };
}
function setContainerSize(containerEl, cardWidth, cardHeight, cardsPerView, isVertical) {
  if (isVertical) {
    containerEl.style.flexDirection = "column";
    containerEl.style.width = `${cardWidth}px`;
    containerEl.style.height = `${cardHeight * cardsPerView}px`;
  } else {
    containerEl.style.flexDirection = "row";
    containerEl.style.width = `${cardWidth * cardsPerView}px`;
    containerEl.style.height = `${cardHeight}px`;
  }
}

// src/ui/cardContainer/cardMaker.ts
var CardMaker = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  async getCardsForActiveFile(activeFile) {
    const folder = activeFile.parent;
    if (!folder) {
      return [];
    }
    const files = folder.children.filter((file) => file instanceof import_obsidian3.TFile);
    const sortedFiles = sortFiles(
      files,
      this.plugin.settings.sortCriterion,
      this.plugin.settings.sortOrder
    );
    return await Promise.all(sortedFiles.map((file) => this.createCard(file)));
  }
  async createCard(file) {
    const content = await this.plugin.app.vault.cachedRead(file);
    const { cleanContent } = separateFrontmatterAndContent(content);
    const contentWithoutHeader = this.removeFirstHeader(cleanContent);
    return {
      file,
      fileName: this.plugin.settings.showFileName ? file.basename : void 0,
      firstHeader: this.plugin.settings.showFirstHeader ? this.findFirstHeader(cleanContent) : void 0,
      content: this.plugin.settings.showContent ? this.truncateContent(contentWithoutHeader) : void 0
    };
  }
  removeFirstHeader(content) {
    const headerRegex = /^#+\s+(.+)$/m;
    return content.replace(headerRegex, "").trim();
  }
  findFirstHeader(content) {
    const headerRegex = /^#+\s+(.+)$/m;
    const match = content.match(headerRegex);
    return match ? match[1].trim() : void 0;
  }
  truncateContent(content) {
    const maxLength = this.plugin.settings.contentLength * 100;
    return content.length <= maxLength ? content : content.slice(0, maxLength) + "...";
  }
  createCardElement(card) {
    const cardElement = document.createElement("div");
    cardElement.className = "card-navigator-card";
    if (this.plugin.settings.showFileName && card.fileName) {
      const fileNameEl = cardElement.createEl("h3", { text: card.fileName });
      fileNameEl.className = "card-navigator-filename";
      fileNameEl.style.fontSize = `${this.plugin.settings.fileNameSize}px`;
    }
    if (this.plugin.settings.showFirstHeader && card.firstHeader) {
      const headerEl = cardElement.createEl("h4", { text: card.firstHeader });
      headerEl.className = "card-navigator-first-header";
      headerEl.style.fontSize = `${this.plugin.settings.firstHeaderSize}px`;
    }
    if (this.plugin.settings.showContent && card.content) {
      const contentEl = cardElement.createEl("div");
      contentEl.className = "card-navigator-content";
      contentEl.style.fontSize = `${this.plugin.settings.contentSize}px`;
      if (this.plugin.settings.renderContentAsHtml) {
        import_obsidian3.MarkdownRenderer.render(
          this.plugin.app,
          card.content,
          contentEl,
          card.file.path,
          this.plugin
        );
      } else {
        contentEl.textContent = card.content;
        contentEl.style.overflow = "hidden";
        contentEl.style.textOverflow = "ellipsis";
        contentEl.style.display = "-webkit-box";
      }
    }
    if (this.plugin.app.workspace.getActiveFile() === card.file) {
      cardElement.addClass("card-navigator-active");
    }
    this.addCardInteractions(cardElement, card);
    return cardElement;
  }
  addCardInteractions(cardElement, card) {
    cardElement.addEventListener("click", () => this.openFile(card.file));
    this.setupDragAndDrop(cardElement, card);
    this.setupContextMenu(cardElement, card.file);
  }
  setupDragAndDrop(cardElement, card) {
    cardElement.setAttribute("draggable", "true");
    cardElement.addEventListener("dragstart", (event) => {
      if (event.dataTransfer) {
        let dragContent = "";
        if (this.plugin.settings.dragDropContent) {
          if (this.plugin.settings.showFileName && card.fileName) {
            dragContent += `## ${card.fileName}

`;
          }
          if (this.plugin.settings.showFirstHeader && card.firstHeader) {
            dragContent += `# ${card.firstHeader}

`;
          }
          if (this.plugin.settings.showContent && card.content) {
            dragContent += `${card.content}

`;
          }
          if (dragContent === "") {
            dragContent = `[[${card.file.name}]]`;
          }
        } else {
          dragContent = `[[${card.file.name}]]`;
        }
        event.dataTransfer.setData("text/plain", dragContent.trim());
        event.dataTransfer.setDragImage(cardElement, 0, 0);
      }
    });
  }
  setupContextMenu(cardElement, file) {
    cardElement.addEventListener("contextmenu", (e) => {
      e.preventDefault();
      const menu = new import_obsidian3.Menu();
      this.plugin.app.workspace.trigger("file-menu", menu, file, "more-options");
      menu.showAtPosition({ x: e.clientX, y: e.clientY });
    });
  }
  openFile(file) {
    this.plugin.app.workspace.getLeaf().openFile(file);
  }
};

// src/ui/cardContainer/cardContainer.ts
var CardContainer = class {
  constructor(plugin, leaf) {
    this.containerEl = null;
    this.cardWidth = 0;
    this.cardHeight = 0;
    this.plugin = plugin;
    this.leaf = leaf;
    this.cardMaker = new CardMaker(this.plugin);
    this.isVertical = false;
  }
  async initialize(containerEl) {
    this.containerEl = containerEl;
    await this.waitForLeafCreation();
    this.registerEvents();
    this.refresh();
  }
  setOrientation(isVertical) {
    this.isVertical = isVertical;
    this.updateContainerStyle();
  }
  setCardSize(cardWidth, cardHeight) {
    this.cardWidth = cardWidth;
    this.cardHeight = cardHeight;
  }
  getContainerEl() {
    return this.containerEl;
  }
  getCardSizeAndOrientation() {
    return {
      cardWidth: this.cardWidth,
      cardHeight: this.cardHeight,
      isVertical: this.isVertical
    };
  }
  updateContainerStyle() {
    if (this.containerEl) {
      if (this.isVertical) {
        this.containerEl.classList.add("vertical");
        this.containerEl.classList.remove("horizontal");
      } else {
        this.containerEl.classList.add("horizontal");
        this.containerEl.classList.remove("vertical");
      }
    }
  }
  async waitForLeafCreation() {
    return new Promise((resolve) => {
      const checkLeaf = () => {
        if (this.containerEl && this.containerEl.getBoundingClientRect().width > 0) {
          resolve();
        } else {
          requestAnimationFrame(checkLeaf);
        }
      };
      checkLeaf();
    });
  }
  registerEvents() {
    this.plugin.registerEvent(
      this.plugin.app.workspace.on("active-leaf-change", debounce(this.refresh.bind(this), 100))
    );
    this.plugin.registerEvent(
      this.plugin.app.vault.on("modify", debounce(this.refresh.bind(this), 100))
    );
  }
  async refresh() {
    let folder = null;
    if (this.plugin.settings.useSelectedFolder && this.plugin.settings.selectedFolder) {
      folder = this.plugin.app.vault.getAbstractFileByPath(this.plugin.settings.selectedFolder);
    } else {
      const activeFile = this.plugin.app.workspace.getActiveFile();
      folder = (activeFile == null ? void 0 : activeFile.parent) || null;
    }
    if (!folder || !this.containerEl) {
      return;
    }
    setContainerSize(this.containerEl, this.cardWidth, this.cardHeight, this.plugin.settings.cardsPerView, this.isVertical);
    const files = folder.children.filter((file) => file instanceof import_obsidian4.TFile);
    const sortedFiles = sortFiles(files, this.plugin.settings.sortCriterion, this.plugin.settings.sortOrder);
    const cardsData = await Promise.all(sortedFiles.map((file) => this.cardMaker.createCard(file)));
    this.renderCards(cardsData, this.cardWidth, this.cardHeight);
  }
  renderCards(cardsData, cardWidth, cardHeight) {
    const containerEl = this.containerEl;
    if (!containerEl) return;
    containerEl.innerHTML = "";
    containerEl.classList.toggle("card-container-horizontal", !this.isVertical);
    cardsData.forEach((cardData) => {
      const card = this.cardMaker.createCardElement(cardData);
      card.classList.toggle("card-navigator-card-horizontal", !this.isVertical);
      card.style.width = `${cardWidth}px`;
      card.style.height = `${cardHeight}px`;
      containerEl.appendChild(card);
      if (this.plugin.settings.renderContentAsHtml) {
        card.querySelectorAll("img").forEach((img) => {
          img.addEventListener("load", () => {
            this.adjustCardSize(card);
          });
        });
      }
    });
    if (this.plugin.settings.centerCardMethod === "scroll") {
      this.scrollToActiveCard(cardsData, cardWidth, cardHeight);
    }
  }
  adjustCardSize(card) {
    const content = card.querySelector(".card-navigator-content");
    if (content instanceof HTMLElement) {
      content.style.maxHeight = `${card.clientHeight - 40}px`;
    }
  }
  renderActiveCardCentered(cardsData, activeIndex, cardWidth, cardHeight) {
    const containerEl = this.containerEl;
    if (!containerEl) {
      return;
    }
    const isVertical = this.isVertical;
    const leftCards = cardsData.slice(0, activeIndex);
    const rightCards = cardsData.slice(activeIndex + 1);
    const cardSpacing = 15;
    const containerSize = isVertical ? cardHeight : cardWidth;
    const totalSize = (containerSize + cardSpacing) * this.plugin.settings.cardsPerView - cardSpacing;
    const activeCardOffset = (totalSize - containerSize) / 2;
    let currentOffset = activeCardOffset - (leftCards.length * containerSize + leftCards.length * cardSpacing);
    leftCards.forEach((cardData) => {
      const card = this.cardMaker.createCardElement(cardData);
      card.style.position = "absolute";
      card.style.width = `${cardWidth}px`;
      card.style.height = `${cardHeight}px`;
      if (isVertical) {
        card.style.top = `${currentOffset}px`;
      } else {
        card.style.left = `${currentOffset}px`;
      }
      containerEl.appendChild(card);
      currentOffset += containerSize + cardSpacing;
    });
    const activeCard = this.cardMaker.createCardElement(cardsData[activeIndex]);
    activeCard.style.position = "absolute";
    activeCard.style.width = `${cardWidth}px`;
    activeCard.style.height = `${cardHeight}px`;
    if (isVertical) {
      activeCard.style.top = `${activeCardOffset}px`;
    } else {
      activeCard.style.left = `${activeCardOffset}px`;
    }
    containerEl.appendChild(activeCard);
    currentOffset = activeCardOffset + containerSize + cardSpacing;
    rightCards.forEach((cardData) => {
      const card = this.cardMaker.createCardElement(cardData);
      card.style.position = "absolute";
      card.style.width = `${cardWidth}px`;
      card.style.height = `${cardHeight}px`;
      if (isVertical) {
        card.style.top = `${currentOffset}px`;
      } else {
        card.style.left = `${currentOffset}px`;
      }
      containerEl.appendChild(card);
      currentOffset += containerSize + cardSpacing;
    });
  }
  scrollToActiveCard(cardsData, cardWidth, cardHeight) {
    const containerEl = this.containerEl;
    if (!containerEl) {
      return;
    }
    containerEl.innerHTML = "";
    let activeCard = null;
    cardsData.forEach((cardData) => {
      const card = this.cardMaker.createCardElement(cardData);
      card.style.width = `${cardWidth}px`;
      card.style.height = `${cardHeight}px`;
      containerEl.appendChild(card);
      if (card.classList.contains("card-navigator-active")) {
        activeCard = card;
      }
    });
    if (activeCard && this.plugin.settings.centerCardMethod === "scroll") {
      activeCard.scrollIntoView({ behavior: "smooth", block: "center", inline: "center" });
    }
  }
  displayCards(filteredFiles) {
  }
  async searchCards(searchTerm) {
    const activeFile = this.plugin.app.workspace.getActiveFile();
    if (!activeFile) return;
    const folder = activeFile.parent;
    if (!folder) return;
    const files = folder.children.filter((file) => file instanceof import_obsidian4.TFile);
    const filteredFiles = await this.filterFilesByContent(files, searchTerm);
    const cards = await Promise.all(filteredFiles.map(async (file) => ({
      file,
      fileName: this.plugin.settings.showFileName ? file.basename : void 0,
      firstHeader: this.plugin.settings.showFirstHeader ? await this.findFirstHeader(file) : void 0,
      content: this.plugin.settings.showContent ? await this.getFileContent(file) : void 0
    })));
    this.renderCards(cards, this.cardWidth, this.cardHeight);
  }
  async displayCardsForFolder(folder) {
    const files = folder.children.filter((file) => file instanceof import_obsidian4.TFile);
    const cards = await Promise.all(files.map((file) => this.cardMaker.createCard(file)));
    this.renderCards(cards, this.cardWidth, this.cardHeight);
  }
  async filterFilesByContent(files, searchTerm) {
    const lowercaseSearchTerm = searchTerm.toLowerCase();
    const filteredFiles = [];
    for (const file of files) {
      const content = await this.plugin.app.vault.cachedRead(file);
      if (file.basename.toLowerCase().includes(lowercaseSearchTerm) || content.toLowerCase().includes(lowercaseSearchTerm)) {
        filteredFiles.push(file);
      }
    }
    return filteredFiles;
  }
  async sortCards(criterion, order) {
    this.plugin.settings.sortCriterion = criterion;
    this.plugin.settings.sortOrder = order;
    await this.plugin.saveSettings();
    this.refresh();
  }
  async findFirstHeader(file) {
    const content = await this.plugin.app.vault.cachedRead(file);
    const headerRegex = /^#+\s+(.+)$/m;
    const match = content.match(headerRegex);
    return match ? match[1].trim() : void 0;
  }
  async getFileContent(file) {
    const content = await this.plugin.app.vault.cachedRead(file);
    const maxLength = this.plugin.settings.contentLength * 100;
    return content.length <= maxLength ? content : content.slice(0, maxLength) + "...";
  }
  onClose() {
  }
};

// src/ui/cardNavigator.ts
var VIEW_TYPE_CARD_NAVIGATOR = "card-navigator-view";
var CardNavigator = class extends import_obsidian5.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
    this.toolbar = new Toolbar(this.plugin);
    this.cardContainer = new CardContainer(this.plugin, this.leaf);
    this.isVertical = this.calculateIsVertical();
    this.resizeObserver = new ResizeObserver(this.handleResize.bind(this));
  }
  getViewType() {
    return VIEW_TYPE_CARD_NAVIGATOR;
  }
  getDisplayText() {
    return "Card Navigator";
  }
  getIcon() {
    return "layers-3";
  }
  calculateIsVertical() {
    const { width, height } = this.leaf.view.containerEl.getBoundingClientRect();
    return height > width;
  }
  handleResize() {
    this.updateLayoutAndRefresh();
  }
  updateLayoutAndRefresh() {
    this.isVertical = this.calculateIsVertical();
    const containerRect = this.leaf.view.containerEl.getBoundingClientRect();
    const { cardWidth, cardHeight } = calculateCardSize(this.isVertical, containerRect, this.plugin.settings.cardsPerView);
    this.cardContainer.setOrientation(this.isVertical);
    this.cardContainer.setCardSize(cardWidth, cardHeight);
    this.toolbar.setOrientation(this.isVertical);
    this.refresh();
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    const cardNavigatorContainerEl = container.createDiv("card-navigator");
    const toolbarEl = cardNavigatorContainerEl.createDiv("card-navigator-toolbar");
    const viewAreaEl = cardNavigatorContainerEl.createDiv("card-view-area");
    const cardContainerEl = viewAreaEl.createDiv("card-container");
    this.toolbar.initialize(toolbarEl);
    this.cardContainer.initialize(cardContainerEl);
    this.isVertical = this.calculateIsVertical();
    this.updateLayoutAndRefresh();
    this.resizeObserver.observe(this.leaf.view.containerEl);
    this.refresh();
  }
  async onClose() {
    this.resizeObserver.disconnect();
    this.toolbar.onClose();
    this.cardContainer.onClose();
  }
  refresh() {
    this.toolbar.refresh();
    this.cardContainer.refresh();
  }
};

// src/ui/settingsTab.ts
var import_obsidian6 = require("obsidian");
var SettingTab = class extends import_obsidian6.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian6.Setting(containerEl).setName("Cards per view").setDesc("Number of cards to display at once").addSlider((slider) => slider.setLimits(3, 9, 1).setValue(this.plugin.settings.cardsPerView).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.cardsPerView = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
    new import_obsidian6.Setting(containerEl).setName("Folder Selection").setDesc("Choose whether to use the active file's folder or a selected folder").addDropdown((dropdown) => dropdown.addOption("active", "Active File's Folder").addOption("selected", "Selected Folder").setValue(this.plugin.settings.useSelectedFolder ? "selected" : "active").onChange(async (value) => {
      this.plugin.settings.useSelectedFolder = value === "selected";
      await this.plugin.saveSettings();
      this.display();
    }));
    if (this.plugin.settings.useSelectedFolder) {
      new import_obsidian6.Setting(containerEl).setName("Select Folder").setDesc("Choose a folder for Card Navigator").addButton((button) => button.setButtonText(this.plugin.settings.selectedFolder || "Choose folder").onClick(() => {
        new FolderSuggestModal(this.plugin, (folder) => {
          this.plugin.settings.selectedFolder = folder.path;
          this.plugin.saveSettings();
          this.display();
        }).open();
      }));
    }
    new import_obsidian6.Setting(containerEl).setName("Default sort method").setDesc("Choose the default sorting method for cards").addDropdown((dropdown) => {
      dropdown.addOption("fileName_asc", "File name (A to Z)").addOption("fileName_desc", "File name (Z to A)").addOption("lastModified_desc", "Last modified (newest first)").addOption("lastModified_asc", "Last modified (oldest first)").addOption("created_desc", "Created (newest first)").addOption("created_asc", "Created (oldest first)").setValue(`${this.plugin.settings.sortCriterion}_${this.plugin.settings.sortOrder}`).onChange(async (value) => {
        const [criterion, order] = value.split("_");
        this.plugin.settings.sortCriterion = criterion;
        this.plugin.settings.sortOrder = order;
        await this.plugin.saveSettings();
        this.plugin.refreshViews();
      });
    });
    new import_obsidian6.Setting(containerEl).setName("Render Content as HTML").setDesc("If enabled, card content will be rendered as HTML").addToggle((toggle) => toggle.setValue(this.plugin.settings.renderContentAsHtml).onChange(async (value) => {
      this.plugin.settings.renderContentAsHtml = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
    new import_obsidian6.Setting(containerEl).setName("Drag and Drop Content").setDesc("When enabled, dragging a card will insert the note content instead of a link.").addToggle((toggle) => toggle.setValue(this.plugin.settings.dragDropContent).onChange(async (value) => {
      this.plugin.settings.dragDropContent = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
    containerEl.createEl("h1", { text: "Display items Settings" });
    new import_obsidian6.Setting(containerEl).setName("Show File Name").setDesc("Toggle to display or hide the file name on cards").addToggle((toggle) => toggle.setValue(this.plugin.settings.showFileName).onChange(async (value) => {
      this.plugin.settings.showFileName = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
    new import_obsidian6.Setting(containerEl).setName("File Name Size").setDesc("Set the font size for the file name").addSlider((slider) => slider.setLimits(15, 25, 1).setValue(this.plugin.settings.fileNameSize).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.fileNameSize = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
    new import_obsidian6.Setting(containerEl).setName("Show First Header").setDesc("Toggle to display or hide the first header on cards").addToggle((toggle) => toggle.setValue(this.plugin.settings.showFirstHeader).onChange(async (value) => {
      this.plugin.settings.showFirstHeader = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
    new import_obsidian6.Setting(containerEl).setName("First Header Size").setDesc("Set the font size for the first header").addSlider((slider) => slider.setLimits(15, 25, 1).setValue(this.plugin.settings.firstHeaderSize).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.firstHeaderSize = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
    new import_obsidian6.Setting(containerEl).setName("Show Content").setDesc("Toggle to display or hide the content on cards").addToggle((toggle) => toggle.setValue(this.plugin.settings.showContent).onChange(async (value) => {
      this.plugin.settings.showContent = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
    new import_obsidian6.Setting(containerEl).setName("Content Size").setDesc("Set the font size for the content").addSlider((slider) => slider.setLimits(10, 20, 1).setValue(this.plugin.settings.contentSize).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.contentSize = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
    new import_obsidian6.Setting(containerEl).setName("Content Length").setDesc("Maximum content length displayed on each card").addSlider((slider) => slider.setLimits(1, 10, 1).setValue(this.plugin.settings.contentLength).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.contentLength = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
  }
};

// src/common/settings.ts
var DEFAULT_SETTINGS = {
  cardsPerView: 6,
  useSelectedFolder: false,
  selectedFolder: null,
  sortCriterion: "fileName",
  sortOrder: "asc",
  renderContentAsHtml: false,
  centerCardMethod: "scroll",
  activeCardBorderColor: "var(--active-border-color)",
  activeCardBackgroundColor: "var(--active-background-color)",
  dragDropContent: false,
  showFileName: true,
  fileNameSize: 20,
  showFirstHeader: true,
  firstHeaderSize: 18,
  showContent: true,
  contentSize: 15,
  contentLength: 5
};

// src/main.ts
var CardNavigatorPlugin = class extends import_obsidian7.Plugin {
  constructor() {
    super(...arguments);
    this.settings = DEFAULT_SETTINGS;
    this.selectedFolder = null;
  }
  async onload() {
    await this.loadSettings();
    this.registerView(
      VIEW_TYPE_CARD_NAVIGATOR,
      (leaf) => new CardNavigator(leaf, this)
    );
    this.addSettingTab(new SettingTab(this.app, this));
    this.addRibbonIcon("layers-3", "Activate Card Navigator", () => {
      this.activateView();
    });
    this.addCommand({
      id: "activate-card-navigator",
      name: "Activate Card Navigator",
      callback: () => {
        this.activateView();
      }
    });
    this.addCommand({
      id: "select-folder",
      name: "Select folder for Card Navigator",
      callback: () => {
        const view = this.app.workspace.getActiveViewOfType(CardNavigator);
        if (view) {
          view.toolbar.openFolderSelector();
        }
      }
    });
    this.app.workspace.onLayoutReady(() => {
      this.activateView();
    });
  }
  async onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.refreshViews();
  }
  refreshViews() {
    const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR);
    leaves.forEach((leaf) => {
      if (leaf.view instanceof CardNavigator) {
        leaf.view.updateLayoutAndRefresh();
      }
    });
  }
  displayFilteredCards(filteredFiles) {
    const view = this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR)[0].view;
    view.cardContainer.displayCards(filteredFiles);
  }
  sortCards(criterion, order) {
    const view = this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR)[0].view;
    view.cardContainer.sortCards(criterion, order);
  }
  async activateView() {
    const { workspace } = this.app;
    let leaves = workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR);
    let leaf = leaves[0];
    if (!leaf) {
      const rightLeaf = workspace.getRightLeaf(false);
      if (rightLeaf) {
        await rightLeaf.setViewState({ type: VIEW_TYPE_CARD_NAVIGATOR, active: true });
        leaves = workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR);
        leaf = leaves[0];
      }
    }
    if (leaf) {
      workspace.revealLeaf(leaf);
    }
  }
};
//# sourceMappingURL=data:application/json;base64,

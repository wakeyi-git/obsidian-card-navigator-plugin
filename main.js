/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CardNavigatorPlugin,
  languageResources: () => languageResources,
  translationLanguage: () => translationLanguage
});
module.exports = __toCommonJS(main_exports);
var import_obsidian7 = require("obsidian");

// src/ui/cardNavigator.ts
var import_obsidian5 = require("obsidian");

// src/ui/toolbar/toolbar.ts
var import_obsidian2 = require("obsidian");

// src/ui/toolbar/toolbarActions.ts
var import_obsidian = require("obsidian");

// node_modules/i18next/dist/esm/i18next.js
var consoleLogger = {
  type: "logger",
  log(args) {
    this.output("log", args);
  },
  warn(args) {
    this.output("warn", args);
  },
  error(args) {
    this.output("error", args);
  },
  output(type, args) {
    if (console && console[type]) console[type].apply(console, args);
  }
};
var Logger = class _Logger {
  constructor(concreteLogger) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.init(concreteLogger, options);
  }
  init(concreteLogger) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.prefix = options.prefix || "i18next:";
    this.logger = concreteLogger || consoleLogger;
    this.options = options;
    this.debug = options.debug;
  }
  log() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return this.forward(args, "log", "", true);
  }
  warn() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return this.forward(args, "warn", "", true);
  }
  error() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    return this.forward(args, "error", "");
  }
  deprecate() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    return this.forward(args, "warn", "WARNING DEPRECATED: ", true);
  }
  forward(args, lvl, prefix, debugOnly) {
    if (debugOnly && !this.debug) return null;
    if (typeof args[0] === "string") args[0] = `${prefix}${this.prefix} ${args[0]}`;
    return this.logger[lvl](args);
  }
  create(moduleName) {
    return new _Logger(this.logger, {
      ...{
        prefix: `${this.prefix}:${moduleName}:`
      },
      ...this.options
    });
  }
  clone(options) {
    options = options || this.options;
    options.prefix = options.prefix || this.prefix;
    return new _Logger(this.logger, options);
  }
};
var baseLogger = new Logger();
var EventEmitter = class {
  constructor() {
    this.observers = {};
  }
  on(events, listener) {
    events.split(" ").forEach((event) => {
      if (!this.observers[event]) this.observers[event] = /* @__PURE__ */ new Map();
      const numListeners = this.observers[event].get(listener) || 0;
      this.observers[event].set(listener, numListeners + 1);
    });
    return this;
  }
  off(event, listener) {
    if (!this.observers[event]) return;
    if (!listener) {
      delete this.observers[event];
      return;
    }
    this.observers[event].delete(listener);
  }
  emit(event) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (this.observers[event]) {
      const cloned = Array.from(this.observers[event].entries());
      cloned.forEach((_ref) => {
        let [observer, numTimesAdded] = _ref;
        for (let i = 0; i < numTimesAdded; i++) {
          observer(...args);
        }
      });
    }
    if (this.observers["*"]) {
      const cloned = Array.from(this.observers["*"].entries());
      cloned.forEach((_ref2) => {
        let [observer, numTimesAdded] = _ref2;
        for (let i = 0; i < numTimesAdded; i++) {
          observer.apply(observer, [event, ...args]);
        }
      });
    }
  }
};
var defer = () => {
  let res;
  let rej;
  const promise = new Promise((resolve, reject) => {
    res = resolve;
    rej = reject;
  });
  promise.resolve = res;
  promise.reject = rej;
  return promise;
};
var makeString = (object) => {
  if (object == null) return "";
  return "" + object;
};
var copy = (a, s, t2) => {
  a.forEach((m) => {
    if (s[m]) t2[m] = s[m];
  });
};
var lastOfPathSeparatorRegExp = /###/g;
var cleanKey = (key) => key && key.indexOf("###") > -1 ? key.replace(lastOfPathSeparatorRegExp, ".") : key;
var canNotTraverseDeeper = (object) => !object || typeof object === "string";
var getLastOfPath = (object, path, Empty) => {
  const stack = typeof path !== "string" ? path : path.split(".");
  let stackIndex = 0;
  while (stackIndex < stack.length - 1) {
    if (canNotTraverseDeeper(object)) return {};
    const key = cleanKey(stack[stackIndex]);
    if (!object[key] && Empty) object[key] = new Empty();
    if (Object.prototype.hasOwnProperty.call(object, key)) {
      object = object[key];
    } else {
      object = {};
    }
    ++stackIndex;
  }
  if (canNotTraverseDeeper(object)) return {};
  return {
    obj: object,
    k: cleanKey(stack[stackIndex])
  };
};
var setPath = (object, path, newValue) => {
  const {
    obj,
    k
  } = getLastOfPath(object, path, Object);
  if (obj !== void 0 || path.length === 1) {
    obj[k] = newValue;
    return;
  }
  let e = path[path.length - 1];
  let p = path.slice(0, path.length - 1);
  let last = getLastOfPath(object, p, Object);
  while (last.obj === void 0 && p.length) {
    e = `${p[p.length - 1]}.${e}`;
    p = p.slice(0, p.length - 1);
    last = getLastOfPath(object, p, Object);
    if (last && last.obj && typeof last.obj[`${last.k}.${e}`] !== "undefined") {
      last.obj = void 0;
    }
  }
  last.obj[`${last.k}.${e}`] = newValue;
};
var pushPath = (object, path, newValue, concat) => {
  const {
    obj,
    k
  } = getLastOfPath(object, path, Object);
  obj[k] = obj[k] || [];
  obj[k].push(newValue);
};
var getPath = (object, path) => {
  const {
    obj,
    k
  } = getLastOfPath(object, path);
  if (!obj) return void 0;
  return obj[k];
};
var getPathWithDefaults = (data, defaultData, key) => {
  const value = getPath(data, key);
  if (value !== void 0) {
    return value;
  }
  return getPath(defaultData, key);
};
var deepExtend = (target, source, overwrite) => {
  for (const prop in source) {
    if (prop !== "__proto__" && prop !== "constructor") {
      if (prop in target) {
        if (typeof target[prop] === "string" || target[prop] instanceof String || typeof source[prop] === "string" || source[prop] instanceof String) {
          if (overwrite) target[prop] = source[prop];
        } else {
          deepExtend(target[prop], source[prop], overwrite);
        }
      } else {
        target[prop] = source[prop];
      }
    }
  }
  return target;
};
var regexEscape = (str) => str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
var _entityMap = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;",
  "/": "&#x2F;"
};
var escape = (data) => {
  if (typeof data === "string") {
    return data.replace(/[&<>"'\/]/g, (s) => _entityMap[s]);
  }
  return data;
};
var RegExpCache = class {
  constructor(capacity) {
    this.capacity = capacity;
    this.regExpMap = /* @__PURE__ */ new Map();
    this.regExpQueue = [];
  }
  getRegExp(pattern) {
    const regExpFromCache = this.regExpMap.get(pattern);
    if (regExpFromCache !== void 0) {
      return regExpFromCache;
    }
    const regExpNew = new RegExp(pattern);
    if (this.regExpQueue.length === this.capacity) {
      this.regExpMap.delete(this.regExpQueue.shift());
    }
    this.regExpMap.set(pattern, regExpNew);
    this.regExpQueue.push(pattern);
    return regExpNew;
  }
};
var chars = [" ", ",", "?", "!", ";"];
var looksLikeObjectPathRegExpCache = new RegExpCache(20);
var looksLikeObjectPath = (key, nsSeparator, keySeparator) => {
  nsSeparator = nsSeparator || "";
  keySeparator = keySeparator || "";
  const possibleChars = chars.filter((c) => nsSeparator.indexOf(c) < 0 && keySeparator.indexOf(c) < 0);
  if (possibleChars.length === 0) return true;
  const r = looksLikeObjectPathRegExpCache.getRegExp(`(${possibleChars.map((c) => c === "?" ? "\\?" : c).join("|")})`);
  let matched = !r.test(key);
  if (!matched) {
    const ki = key.indexOf(keySeparator);
    if (ki > 0 && !r.test(key.substring(0, ki))) {
      matched = true;
    }
  }
  return matched;
};
var deepFind = function(obj, path) {
  let keySeparator = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ".";
  if (!obj) return void 0;
  if (obj[path]) return obj[path];
  const tokens = path.split(keySeparator);
  let current = obj;
  for (let i = 0; i < tokens.length; ) {
    if (!current || typeof current !== "object") {
      return void 0;
    }
    let next;
    let nextPath = "";
    for (let j = i; j < tokens.length; ++j) {
      if (j !== i) {
        nextPath += keySeparator;
      }
      nextPath += tokens[j];
      next = current[nextPath];
      if (next !== void 0) {
        if (["string", "number", "boolean"].indexOf(typeof next) > -1 && j < tokens.length - 1) {
          continue;
        }
        i += j - i + 1;
        break;
      }
    }
    current = next;
  }
  return current;
};
var getCleanedCode = (code) => {
  if (code && code.indexOf("_") > 0) return code.replace("_", "-");
  return code;
};
var ResourceStore = class extends EventEmitter {
  constructor(data) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      ns: ["translation"],
      defaultNS: "translation"
    };
    super();
    this.data = data || {};
    this.options = options;
    if (this.options.keySeparator === void 0) {
      this.options.keySeparator = ".";
    }
    if (this.options.ignoreJSONStructure === void 0) {
      this.options.ignoreJSONStructure = true;
    }
  }
  addNamespaces(ns) {
    if (this.options.ns.indexOf(ns) < 0) {
      this.options.ns.push(ns);
    }
  }
  removeNamespaces(ns) {
    const index = this.options.ns.indexOf(ns);
    if (index > -1) {
      this.options.ns.splice(index, 1);
    }
  }
  getResource(lng, ns, key) {
    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    const keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
    const ignoreJSONStructure = options.ignoreJSONStructure !== void 0 ? options.ignoreJSONStructure : this.options.ignoreJSONStructure;
    let path;
    if (lng.indexOf(".") > -1) {
      path = lng.split(".");
    } else {
      path = [lng, ns];
      if (key) {
        if (Array.isArray(key)) {
          path.push(...key);
        } else if (typeof key === "string" && keySeparator) {
          path.push(...key.split(keySeparator));
        } else {
          path.push(key);
        }
      }
    }
    const result = getPath(this.data, path);
    if (!result && !ns && !key && lng.indexOf(".") > -1) {
      lng = path[0];
      ns = path[1];
      key = path.slice(2).join(".");
    }
    if (result || !ignoreJSONStructure || typeof key !== "string") return result;
    return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);
  }
  addResource(lng, ns, key, value) {
    let options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
      silent: false
    };
    const keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
    let path = [lng, ns];
    if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);
    if (lng.indexOf(".") > -1) {
      path = lng.split(".");
      value = ns;
      ns = path[1];
    }
    this.addNamespaces(ns);
    setPath(this.data, path, value);
    if (!options.silent) this.emit("added", lng, ns, key, value);
  }
  addResources(lng, ns, resources) {
    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
      silent: false
    };
    for (const m in resources) {
      if (typeof resources[m] === "string" || Array.isArray(resources[m])) this.addResource(lng, ns, m, resources[m], {
        silent: true
      });
    }
    if (!options.silent) this.emit("added", lng, ns, resources);
  }
  addResourceBundle(lng, ns, resources, deep, overwrite) {
    let options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {
      silent: false,
      skipCopy: false
    };
    let path = [lng, ns];
    if (lng.indexOf(".") > -1) {
      path = lng.split(".");
      deep = resources;
      resources = ns;
      ns = path[1];
    }
    this.addNamespaces(ns);
    let pack = getPath(this.data, path) || {};
    if (!options.skipCopy) resources = JSON.parse(JSON.stringify(resources));
    if (deep) {
      deepExtend(pack, resources, overwrite);
    } else {
      pack = {
        ...pack,
        ...resources
      };
    }
    setPath(this.data, path, pack);
    if (!options.silent) this.emit("added", lng, ns, resources);
  }
  removeResourceBundle(lng, ns) {
    if (this.hasResourceBundle(lng, ns)) {
      delete this.data[lng][ns];
    }
    this.removeNamespaces(ns);
    this.emit("removed", lng, ns);
  }
  hasResourceBundle(lng, ns) {
    return this.getResource(lng, ns) !== void 0;
  }
  getResourceBundle(lng, ns) {
    if (!ns) ns = this.options.defaultNS;
    if (this.options.compatibilityAPI === "v1") return {
      ...{},
      ...this.getResource(lng, ns)
    };
    return this.getResource(lng, ns);
  }
  getDataByLanguage(lng) {
    return this.data[lng];
  }
  hasLanguageSomeTranslations(lng) {
    const data = this.getDataByLanguage(lng);
    const n = data && Object.keys(data) || [];
    return !!n.find((v) => data[v] && Object.keys(data[v]).length > 0);
  }
  toJSON() {
    return this.data;
  }
};
var postProcessor = {
  processors: {},
  addPostProcessor(module2) {
    this.processors[module2.name] = module2;
  },
  handle(processors, value, key, options, translator) {
    processors.forEach((processor) => {
      if (this.processors[processor]) value = this.processors[processor].process(value, key, options, translator);
    });
    return value;
  }
};
var checkedLoadedFor = {};
var Translator = class _Translator extends EventEmitter {
  constructor(services) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    super();
    copy(["resourceStore", "languageUtils", "pluralResolver", "interpolator", "backendConnector", "i18nFormat", "utils"], services, this);
    this.options = options;
    if (this.options.keySeparator === void 0) {
      this.options.keySeparator = ".";
    }
    this.logger = baseLogger.create("translator");
  }
  changeLanguage(lng) {
    if (lng) this.language = lng;
  }
  exists(key) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      interpolation: {}
    };
    if (key === void 0 || key === null) {
      return false;
    }
    const resolved = this.resolve(key, options);
    return resolved && resolved.res !== void 0;
  }
  extractFromKey(key, options) {
    let nsSeparator = options.nsSeparator !== void 0 ? options.nsSeparator : this.options.nsSeparator;
    if (nsSeparator === void 0) nsSeparator = ":";
    const keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
    let namespaces = options.ns || this.options.defaultNS || [];
    const wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
    const seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options.keySeparator && !this.options.userDefinedNsSeparator && !options.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);
    if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
      const m = key.match(this.interpolator.nestingRegexp);
      if (m && m.length > 0) {
        return {
          key,
          namespaces
        };
      }
      const parts = key.split(nsSeparator);
      if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
      key = parts.join(keySeparator);
    }
    if (typeof namespaces === "string") namespaces = [namespaces];
    return {
      key,
      namespaces
    };
  }
  translate(keys, options, lastKey) {
    if (typeof options !== "object" && this.options.overloadTranslationOptionHandler) {
      options = this.options.overloadTranslationOptionHandler(arguments);
    }
    if (typeof options === "object") options = {
      ...options
    };
    if (!options) options = {};
    if (keys === void 0 || keys === null) return "";
    if (!Array.isArray(keys)) keys = [String(keys)];
    const returnDetails = options.returnDetails !== void 0 ? options.returnDetails : this.options.returnDetails;
    const keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
    const {
      key,
      namespaces
    } = this.extractFromKey(keys[keys.length - 1], options);
    const namespace = namespaces[namespaces.length - 1];
    const lng = options.lng || this.language;
    const appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
    if (lng && lng.toLowerCase() === "cimode") {
      if (appendNamespaceToCIMode) {
        const nsSeparator = options.nsSeparator || this.options.nsSeparator;
        if (returnDetails) {
          return {
            res: `${namespace}${nsSeparator}${key}`,
            usedKey: key,
            exactUsedKey: key,
            usedLng: lng,
            usedNS: namespace,
            usedParams: this.getUsedParamsDetails(options)
          };
        }
        return `${namespace}${nsSeparator}${key}`;
      }
      if (returnDetails) {
        return {
          res: key,
          usedKey: key,
          exactUsedKey: key,
          usedLng: lng,
          usedNS: namespace,
          usedParams: this.getUsedParamsDetails(options)
        };
      }
      return key;
    }
    const resolved = this.resolve(keys, options);
    let res = resolved && resolved.res;
    const resUsedKey = resolved && resolved.usedKey || key;
    const resExactUsedKey = resolved && resolved.exactUsedKey || key;
    const resType = Object.prototype.toString.apply(res);
    const noObject = ["[object Number]", "[object Function]", "[object RegExp]"];
    const joinArrays = options.joinArrays !== void 0 ? options.joinArrays : this.options.joinArrays;
    const handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
    const handleAsObject = typeof res !== "string" && typeof res !== "boolean" && typeof res !== "number";
    if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === "string" && Array.isArray(res))) {
      if (!options.returnObjects && !this.options.returnObjects) {
        if (!this.options.returnedObjectHandler) {
          this.logger.warn("accessing an object - but returnObjects options is not enabled!");
        }
        const r = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, {
          ...options,
          ns: namespaces
        }) : `key '${key} (${this.language})' returned an object instead of string.`;
        if (returnDetails) {
          resolved.res = r;
          resolved.usedParams = this.getUsedParamsDetails(options);
          return resolved;
        }
        return r;
      }
      if (keySeparator) {
        const resTypeIsArray = Array.isArray(res);
        const copy2 = resTypeIsArray ? [] : {};
        const newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
        for (const m in res) {
          if (Object.prototype.hasOwnProperty.call(res, m)) {
            const deepKey = `${newKeyToUse}${keySeparator}${m}`;
            copy2[m] = this.translate(deepKey, {
              ...options,
              ...{
                joinArrays: false,
                ns: namespaces
              }
            });
            if (copy2[m] === deepKey) copy2[m] = res[m];
          }
        }
        res = copy2;
      }
    } else if (handleAsObjectInI18nFormat && typeof joinArrays === "string" && Array.isArray(res)) {
      res = res.join(joinArrays);
      if (res) res = this.extendTranslation(res, keys, options, lastKey);
    } else {
      let usedDefault = false;
      let usedKey = false;
      const needsPluralHandling = options.count !== void 0 && typeof options.count !== "string";
      const hasDefaultValue = _Translator.hasDefaultValue(options);
      const defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, options) : "";
      const defaultValueSuffixOrdinalFallback = options.ordinal && needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, {
        ordinal: false
      }) : "";
      const needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && this.pluralResolver.shouldUseIntlApi();
      const defaultValue = needsZeroSuffixLookup && options[`defaultValue${this.options.pluralSeparator}zero`] || options[`defaultValue${defaultValueSuffix}`] || options[`defaultValue${defaultValueSuffixOrdinalFallback}`] || options.defaultValue;
      if (!this.isValidLookup(res) && hasDefaultValue) {
        usedDefault = true;
        res = defaultValue;
      }
      if (!this.isValidLookup(res)) {
        usedKey = true;
        res = key;
      }
      const missingKeyNoValueFallbackToKey = options.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
      const resForMissing = missingKeyNoValueFallbackToKey && usedKey ? void 0 : res;
      const updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;
      if (usedKey || usedDefault || updateMissing) {
        this.logger.log(updateMissing ? "updateKey" : "missingKey", lng, namespace, key, updateMissing ? defaultValue : res);
        if (keySeparator) {
          const fk = this.resolve(key, {
            ...options,
            keySeparator: false
          });
          if (fk && fk.res) this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.");
        }
        let lngs = [];
        const fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);
        if (this.options.saveMissingTo === "fallback" && fallbackLngs && fallbackLngs[0]) {
          for (let i = 0; i < fallbackLngs.length; i++) {
            lngs.push(fallbackLngs[i]);
          }
        } else if (this.options.saveMissingTo === "all") {
          lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
        } else {
          lngs.push(options.lng || this.language);
        }
        const send = (l, k, specificDefaultValue) => {
          const defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;
          if (this.options.missingKeyHandler) {
            this.options.missingKeyHandler(l, namespace, k, defaultForMissing, updateMissing, options);
          } else if (this.backendConnector && this.backendConnector.saveMissing) {
            this.backendConnector.saveMissing(l, namespace, k, defaultForMissing, updateMissing, options);
          }
          this.emit("missingKey", l, namespace, k, res);
        };
        if (this.options.saveMissing) {
          if (this.options.saveMissingPlurals && needsPluralHandling) {
            lngs.forEach((language) => {
              const suffixes = this.pluralResolver.getSuffixes(language, options);
              if (needsZeroSuffixLookup && options[`defaultValue${this.options.pluralSeparator}zero`] && suffixes.indexOf(`${this.options.pluralSeparator}zero`) < 0) {
                suffixes.push(`${this.options.pluralSeparator}zero`);
              }
              suffixes.forEach((suffix) => {
                send([language], key + suffix, options[`defaultValue${suffix}`] || defaultValue);
              });
            });
          } else {
            send(lngs, key, defaultValue);
          }
        }
      }
      res = this.extendTranslation(res, keys, options, resolved, lastKey);
      if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = `${namespace}:${key}`;
      if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {
        if (this.options.compatibilityAPI !== "v1") {
          res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? `${namespace}:${key}` : key, usedDefault ? res : void 0);
        } else {
          res = this.options.parseMissingKeyHandler(res);
        }
      }
    }
    if (returnDetails) {
      resolved.res = res;
      resolved.usedParams = this.getUsedParamsDetails(options);
      return resolved;
    }
    return res;
  }
  extendTranslation(res, key, options, resolved, lastKey) {
    var _this = this;
    if (this.i18nFormat && this.i18nFormat.parse) {
      res = this.i18nFormat.parse(res, {
        ...this.options.interpolation.defaultVariables,
        ...options
      }, options.lng || this.language || resolved.usedLng, resolved.usedNS, resolved.usedKey, {
        resolved
      });
    } else if (!options.skipInterpolation) {
      if (options.interpolation) this.interpolator.init({
        ...options,
        ...{
          interpolation: {
            ...this.options.interpolation,
            ...options.interpolation
          }
        }
      });
      const skipOnVariables = typeof res === "string" && (options && options.interpolation && options.interpolation.skipOnVariables !== void 0 ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
      let nestBef;
      if (skipOnVariables) {
        const nb = res.match(this.interpolator.nestingRegexp);
        nestBef = nb && nb.length;
      }
      let data = options.replace && typeof options.replace !== "string" ? options.replace : options;
      if (this.options.interpolation.defaultVariables) data = {
        ...this.options.interpolation.defaultVariables,
        ...data
      };
      res = this.interpolator.interpolate(res, data, options.lng || this.language || resolved.usedLng, options);
      if (skipOnVariables) {
        const na = res.match(this.interpolator.nestingRegexp);
        const nestAft = na && na.length;
        if (nestBef < nestAft) options.nest = false;
      }
      if (!options.lng && this.options.compatibilityAPI !== "v1" && resolved && resolved.res) options.lng = this.language || resolved.usedLng;
      if (options.nest !== false) res = this.interpolator.nest(res, function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        if (lastKey && lastKey[0] === args[0] && !options.context) {
          _this.logger.warn(`It seems you are nesting recursively key: ${args[0]} in key: ${key[0]}`);
          return null;
        }
        return _this.translate(...args, key);
      }, options);
      if (options.interpolation) this.interpolator.reset();
    }
    const postProcess = options.postProcess || this.options.postProcess;
    const postProcessorNames = typeof postProcess === "string" ? [postProcess] : postProcess;
    if (res !== void 0 && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
      res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? {
        i18nResolved: {
          ...resolved,
          usedParams: this.getUsedParamsDetails(options)
        },
        ...options
      } : options, this);
    }
    return res;
  }
  resolve(keys) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    let found;
    let usedKey;
    let exactUsedKey;
    let usedLng;
    let usedNS;
    if (typeof keys === "string") keys = [keys];
    keys.forEach((k) => {
      if (this.isValidLookup(found)) return;
      const extracted = this.extractFromKey(k, options);
      const key = extracted.key;
      usedKey = key;
      let namespaces = extracted.namespaces;
      if (this.options.fallbackNS) namespaces = namespaces.concat(this.options.fallbackNS);
      const needsPluralHandling = options.count !== void 0 && typeof options.count !== "string";
      const needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && this.pluralResolver.shouldUseIntlApi();
      const needsContextHandling = options.context !== void 0 && (typeof options.context === "string" || typeof options.context === "number") && options.context !== "";
      const codes = options.lngs ? options.lngs : this.languageUtils.toResolveHierarchy(options.lng || this.language, options.fallbackLng);
      namespaces.forEach((ns) => {
        if (this.isValidLookup(found)) return;
        usedNS = ns;
        if (!checkedLoadedFor[`${codes[0]}-${ns}`] && this.utils && this.utils.hasLoadedNamespace && !this.utils.hasLoadedNamespace(usedNS)) {
          checkedLoadedFor[`${codes[0]}-${ns}`] = true;
          this.logger.warn(`key "${usedKey}" for languages "${codes.join(", ")}" won't get resolved as namespace "${usedNS}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
        }
        codes.forEach((code) => {
          if (this.isValidLookup(found)) return;
          usedLng = code;
          const finalKeys = [key];
          if (this.i18nFormat && this.i18nFormat.addLookupKeys) {
            this.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);
          } else {
            let pluralSuffix;
            if (needsPluralHandling) pluralSuffix = this.pluralResolver.getSuffix(code, options.count, options);
            const zeroSuffix = `${this.options.pluralSeparator}zero`;
            const ordinalPrefix = `${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;
            if (needsPluralHandling) {
              finalKeys.push(key + pluralSuffix);
              if (options.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {
                finalKeys.push(key + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));
              }
              if (needsZeroSuffixLookup) {
                finalKeys.push(key + zeroSuffix);
              }
            }
            if (needsContextHandling) {
              const contextKey = `${key}${this.options.contextSeparator}${options.context}`;
              finalKeys.push(contextKey);
              if (needsPluralHandling) {
                finalKeys.push(contextKey + pluralSuffix);
                if (options.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {
                  finalKeys.push(contextKey + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));
                }
                if (needsZeroSuffixLookup) {
                  finalKeys.push(contextKey + zeroSuffix);
                }
              }
            }
          }
          let possibleKey;
          while (possibleKey = finalKeys.pop()) {
            if (!this.isValidLookup(found)) {
              exactUsedKey = possibleKey;
              found = this.getResource(code, ns, possibleKey, options);
            }
          }
        });
      });
    });
    return {
      res: found,
      usedKey,
      exactUsedKey,
      usedLng,
      usedNS
    };
  }
  isValidLookup(res) {
    return res !== void 0 && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === "");
  }
  getResource(code, ns, key) {
    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    if (this.i18nFormat && this.i18nFormat.getResource) return this.i18nFormat.getResource(code, ns, key, options);
    return this.resourceStore.getResource(code, ns, key, options);
  }
  getUsedParamsDetails() {
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    const optionsKeys = ["defaultValue", "ordinal", "context", "replace", "lng", "lngs", "fallbackLng", "ns", "keySeparator", "nsSeparator", "returnObjects", "returnDetails", "joinArrays", "postProcess", "interpolation"];
    const useOptionsReplaceForData = options.replace && typeof options.replace !== "string";
    let data = useOptionsReplaceForData ? options.replace : options;
    if (useOptionsReplaceForData && typeof options.count !== "undefined") {
      data.count = options.count;
    }
    if (this.options.interpolation.defaultVariables) {
      data = {
        ...this.options.interpolation.defaultVariables,
        ...data
      };
    }
    if (!useOptionsReplaceForData) {
      data = {
        ...data
      };
      for (const key of optionsKeys) {
        delete data[key];
      }
    }
    return data;
  }
  static hasDefaultValue(options) {
    const prefix = "defaultValue";
    for (const option in options) {
      if (Object.prototype.hasOwnProperty.call(options, option) && prefix === option.substring(0, prefix.length) && void 0 !== options[option]) {
        return true;
      }
    }
    return false;
  }
};
var capitalize = (string) => string.charAt(0).toUpperCase() + string.slice(1);
var LanguageUtil = class {
  constructor(options) {
    this.options = options;
    this.supportedLngs = this.options.supportedLngs || false;
    this.logger = baseLogger.create("languageUtils");
  }
  getScriptPartFromCode(code) {
    code = getCleanedCode(code);
    if (!code || code.indexOf("-") < 0) return null;
    const p = code.split("-");
    if (p.length === 2) return null;
    p.pop();
    if (p[p.length - 1].toLowerCase() === "x") return null;
    return this.formatLanguageCode(p.join("-"));
  }
  getLanguagePartFromCode(code) {
    code = getCleanedCode(code);
    if (!code || code.indexOf("-") < 0) return code;
    const p = code.split("-");
    return this.formatLanguageCode(p[0]);
  }
  formatLanguageCode(code) {
    if (typeof code === "string" && code.indexOf("-") > -1) {
      const specialCases = ["hans", "hant", "latn", "cyrl", "cans", "mong", "arab"];
      let p = code.split("-");
      if (this.options.lowerCaseLng) {
        p = p.map((part) => part.toLowerCase());
      } else if (p.length === 2) {
        p[0] = p[0].toLowerCase();
        p[1] = p[1].toUpperCase();
        if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
      } else if (p.length === 3) {
        p[0] = p[0].toLowerCase();
        if (p[1].length === 2) p[1] = p[1].toUpperCase();
        if (p[0] !== "sgn" && p[2].length === 2) p[2] = p[2].toUpperCase();
        if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
        if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize(p[2].toLowerCase());
      }
      return p.join("-");
    }
    return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
  }
  isSupportedCode(code) {
    if (this.options.load === "languageOnly" || this.options.nonExplicitSupportedLngs) {
      code = this.getLanguagePartFromCode(code);
    }
    return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
  }
  getBestMatchFromCodes(codes) {
    if (!codes) return null;
    let found;
    codes.forEach((code) => {
      if (found) return;
      const cleanedLng = this.formatLanguageCode(code);
      if (!this.options.supportedLngs || this.isSupportedCode(cleanedLng)) found = cleanedLng;
    });
    if (!found && this.options.supportedLngs) {
      codes.forEach((code) => {
        if (found) return;
        const lngOnly = this.getLanguagePartFromCode(code);
        if (this.isSupportedCode(lngOnly)) return found = lngOnly;
        found = this.options.supportedLngs.find((supportedLng) => {
          if (supportedLng === lngOnly) return supportedLng;
          if (supportedLng.indexOf("-") < 0 && lngOnly.indexOf("-") < 0) return;
          if (supportedLng.indexOf("-") > 0 && lngOnly.indexOf("-") < 0 && supportedLng.substring(0, supportedLng.indexOf("-")) === lngOnly) return supportedLng;
          if (supportedLng.indexOf(lngOnly) === 0 && lngOnly.length > 1) return supportedLng;
        });
      });
    }
    if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
    return found;
  }
  getFallbackCodes(fallbacks, code) {
    if (!fallbacks) return [];
    if (typeof fallbacks === "function") fallbacks = fallbacks(code);
    if (typeof fallbacks === "string") fallbacks = [fallbacks];
    if (Array.isArray(fallbacks)) return fallbacks;
    if (!code) return fallbacks.default || [];
    let found = fallbacks[code];
    if (!found) found = fallbacks[this.getScriptPartFromCode(code)];
    if (!found) found = fallbacks[this.formatLanguageCode(code)];
    if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];
    if (!found) found = fallbacks.default;
    return found || [];
  }
  toResolveHierarchy(code, fallbackCode) {
    const fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
    const codes = [];
    const addCode = (c) => {
      if (!c) return;
      if (this.isSupportedCode(c)) {
        codes.push(c);
      } else {
        this.logger.warn(`rejecting language code not found in supportedLngs: ${c}`);
      }
    };
    if (typeof code === "string" && (code.indexOf("-") > -1 || code.indexOf("_") > -1)) {
      if (this.options.load !== "languageOnly") addCode(this.formatLanguageCode(code));
      if (this.options.load !== "languageOnly" && this.options.load !== "currentOnly") addCode(this.getScriptPartFromCode(code));
      if (this.options.load !== "currentOnly") addCode(this.getLanguagePartFromCode(code));
    } else if (typeof code === "string") {
      addCode(this.formatLanguageCode(code));
    }
    fallbackCodes.forEach((fc) => {
      if (codes.indexOf(fc) < 0) addCode(this.formatLanguageCode(fc));
    });
    return codes;
  }
};
var sets = [{
  lngs: ["ach", "ak", "am", "arn", "br", "fil", "gun", "ln", "mfe", "mg", "mi", "oc", "pt", "pt-BR", "tg", "tl", "ti", "tr", "uz", "wa"],
  nr: [1, 2],
  fc: 1
}, {
  lngs: ["af", "an", "ast", "az", "bg", "bn", "ca", "da", "de", "dev", "el", "en", "eo", "es", "et", "eu", "fi", "fo", "fur", "fy", "gl", "gu", "ha", "hi", "hu", "hy", "ia", "it", "kk", "kn", "ku", "lb", "mai", "ml", "mn", "mr", "nah", "nap", "nb", "ne", "nl", "nn", "no", "nso", "pa", "pap", "pms", "ps", "pt-PT", "rm", "sco", "se", "si", "so", "son", "sq", "sv", "sw", "ta", "te", "tk", "ur", "yo"],
  nr: [1, 2],
  fc: 2
}, {
  lngs: ["ay", "bo", "cgg", "fa", "ht", "id", "ja", "jbo", "ka", "km", "ko", "ky", "lo", "ms", "sah", "su", "th", "tt", "ug", "vi", "wo", "zh"],
  nr: [1],
  fc: 3
}, {
  lngs: ["be", "bs", "cnr", "dz", "hr", "ru", "sr", "uk"],
  nr: [1, 2, 5],
  fc: 4
}, {
  lngs: ["ar"],
  nr: [0, 1, 2, 3, 11, 100],
  fc: 5
}, {
  lngs: ["cs", "sk"],
  nr: [1, 2, 5],
  fc: 6
}, {
  lngs: ["csb", "pl"],
  nr: [1, 2, 5],
  fc: 7
}, {
  lngs: ["cy"],
  nr: [1, 2, 3, 8],
  fc: 8
}, {
  lngs: ["fr"],
  nr: [1, 2],
  fc: 9
}, {
  lngs: ["ga"],
  nr: [1, 2, 3, 7, 11],
  fc: 10
}, {
  lngs: ["gd"],
  nr: [1, 2, 3, 20],
  fc: 11
}, {
  lngs: ["is"],
  nr: [1, 2],
  fc: 12
}, {
  lngs: ["jv"],
  nr: [0, 1],
  fc: 13
}, {
  lngs: ["kw"],
  nr: [1, 2, 3, 4],
  fc: 14
}, {
  lngs: ["lt"],
  nr: [1, 2, 10],
  fc: 15
}, {
  lngs: ["lv"],
  nr: [1, 2, 0],
  fc: 16
}, {
  lngs: ["mk"],
  nr: [1, 2],
  fc: 17
}, {
  lngs: ["mnk"],
  nr: [0, 1, 2],
  fc: 18
}, {
  lngs: ["mt"],
  nr: [1, 2, 11, 20],
  fc: 19
}, {
  lngs: ["or"],
  nr: [2, 1],
  fc: 2
}, {
  lngs: ["ro"],
  nr: [1, 2, 20],
  fc: 20
}, {
  lngs: ["sl"],
  nr: [5, 1, 2, 3],
  fc: 21
}, {
  lngs: ["he", "iw"],
  nr: [1, 2, 20, 21],
  fc: 22
}];
var _rulesPluralsTypes = {
  1: (n) => Number(n > 1),
  2: (n) => Number(n != 1),
  3: (n) => 0,
  4: (n) => Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2),
  5: (n) => Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5),
  6: (n) => Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2),
  7: (n) => Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2),
  8: (n) => Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3),
  9: (n) => Number(n >= 2),
  10: (n) => Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4),
  11: (n) => Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3),
  12: (n) => Number(n % 10 != 1 || n % 100 == 11),
  13: (n) => Number(n !== 0),
  14: (n) => Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3),
  15: (n) => Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2),
  16: (n) => Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2),
  17: (n) => Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1),
  18: (n) => Number(n == 0 ? 0 : n == 1 ? 1 : 2),
  19: (n) => Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3),
  20: (n) => Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2),
  21: (n) => Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0),
  22: (n) => Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3)
};
var nonIntlVersions = ["v1", "v2", "v3"];
var intlVersions = ["v4"];
var suffixesOrder = {
  zero: 0,
  one: 1,
  two: 2,
  few: 3,
  many: 4,
  other: 5
};
var createRules = () => {
  const rules = {};
  sets.forEach((set) => {
    set.lngs.forEach((l) => {
      rules[l] = {
        numbers: set.nr,
        plurals: _rulesPluralsTypes[set.fc]
      };
    });
  });
  return rules;
};
var PluralResolver = class {
  constructor(languageUtils) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.languageUtils = languageUtils;
    this.options = options;
    this.logger = baseLogger.create("pluralResolver");
    if ((!this.options.compatibilityJSON || intlVersions.includes(this.options.compatibilityJSON)) && (typeof Intl === "undefined" || !Intl.PluralRules)) {
      this.options.compatibilityJSON = "v3";
      this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.");
    }
    this.rules = createRules();
    this.pluralRulesCache = {};
  }
  addRule(lng, obj) {
    this.rules[lng] = obj;
  }
  clearCache() {
    this.pluralRulesCache = {};
  }
  getRule(code) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (this.shouldUseIntlApi()) {
      try {
        const cleanedCode = getCleanedCode(code === "dev" ? "en" : code);
        const type = options.ordinal ? "ordinal" : "cardinal";
        const cacheKey = JSON.stringify({
          cleanedCode,
          type
        });
        if (cacheKey in this.pluralRulesCache) {
          return this.pluralRulesCache[cacheKey];
        }
        const rule = new Intl.PluralRules(cleanedCode, {
          type
        });
        this.pluralRulesCache[cacheKey] = rule;
        return rule;
      } catch (err) {
        return;
      }
    }
    return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
  }
  needsPlural(code) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const rule = this.getRule(code, options);
    if (this.shouldUseIntlApi()) {
      return rule && rule.resolvedOptions().pluralCategories.length > 1;
    }
    return rule && rule.numbers.length > 1;
  }
  getPluralFormsOfKey(code, key) {
    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    return this.getSuffixes(code, options).map((suffix) => `${key}${suffix}`);
  }
  getSuffixes(code) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const rule = this.getRule(code, options);
    if (!rule) {
      return [];
    }
    if (this.shouldUseIntlApi()) {
      return rule.resolvedOptions().pluralCategories.sort((pluralCategory1, pluralCategory2) => suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2]).map((pluralCategory) => `${this.options.prepend}${options.ordinal ? `ordinal${this.options.prepend}` : ""}${pluralCategory}`);
    }
    return rule.numbers.map((number) => this.getSuffix(code, number, options));
  }
  getSuffix(code, count) {
    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    const rule = this.getRule(code, options);
    if (rule) {
      if (this.shouldUseIntlApi()) {
        return `${this.options.prepend}${options.ordinal ? `ordinal${this.options.prepend}` : ""}${rule.select(count)}`;
      }
      return this.getSuffixRetroCompatible(rule, count);
    }
    this.logger.warn(`no plural rule found for: ${code}`);
    return "";
  }
  getSuffixRetroCompatible(rule, count) {
    const idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
    let suffix = rule.numbers[idx];
    if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
      if (suffix === 2) {
        suffix = "plural";
      } else if (suffix === 1) {
        suffix = "";
      }
    }
    const returnSuffix = () => this.options.prepend && suffix.toString() ? this.options.prepend + suffix.toString() : suffix.toString();
    if (this.options.compatibilityJSON === "v1") {
      if (suffix === 1) return "";
      if (typeof suffix === "number") return `_plural_${suffix.toString()}`;
      return returnSuffix();
    } else if (this.options.compatibilityJSON === "v2") {
      return returnSuffix();
    } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
      return returnSuffix();
    }
    return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
  }
  shouldUseIntlApi() {
    return !nonIntlVersions.includes(this.options.compatibilityJSON);
  }
};
var deepFindWithDefaults = function(data, defaultData, key) {
  let keySeparator = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : ".";
  let ignoreJSONStructure = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
  let path = getPathWithDefaults(data, defaultData, key);
  if (!path && ignoreJSONStructure && typeof key === "string") {
    path = deepFind(data, key, keySeparator);
    if (path === void 0) path = deepFind(defaultData, key, keySeparator);
  }
  return path;
};
var regexSafe = (val) => val.replace(/\$/g, "$$$$");
var Interpolator = class {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    this.logger = baseLogger.create("interpolator");
    this.options = options;
    this.format = options.interpolation && options.interpolation.format || ((value) => value);
    this.init(options);
  }
  init() {
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (!options.interpolation) options.interpolation = {
      escapeValue: true
    };
    const {
      escape: escape$1,
      escapeValue,
      useRawValueToEscape,
      prefix,
      prefixEscaped,
      suffix,
      suffixEscaped,
      formatSeparator,
      unescapeSuffix,
      unescapePrefix,
      nestingPrefix,
      nestingPrefixEscaped,
      nestingSuffix,
      nestingSuffixEscaped,
      nestingOptionsSeparator,
      maxReplaces,
      alwaysFormat
    } = options.interpolation;
    this.escape = escape$1 !== void 0 ? escape$1 : escape;
    this.escapeValue = escapeValue !== void 0 ? escapeValue : true;
    this.useRawValueToEscape = useRawValueToEscape !== void 0 ? useRawValueToEscape : false;
    this.prefix = prefix ? regexEscape(prefix) : prefixEscaped || "{{";
    this.suffix = suffix ? regexEscape(suffix) : suffixEscaped || "}}";
    this.formatSeparator = formatSeparator || ",";
    this.unescapePrefix = unescapeSuffix ? "" : unescapePrefix || "-";
    this.unescapeSuffix = this.unescapePrefix ? "" : unescapeSuffix || "";
    this.nestingPrefix = nestingPrefix ? regexEscape(nestingPrefix) : nestingPrefixEscaped || regexEscape("$t(");
    this.nestingSuffix = nestingSuffix ? regexEscape(nestingSuffix) : nestingSuffixEscaped || regexEscape(")");
    this.nestingOptionsSeparator = nestingOptionsSeparator || ",";
    this.maxReplaces = maxReplaces || 1e3;
    this.alwaysFormat = alwaysFormat !== void 0 ? alwaysFormat : false;
    this.resetRegExp();
  }
  reset() {
    if (this.options) this.init(this.options);
  }
  resetRegExp() {
    const getOrResetRegExp = (existingRegExp, pattern) => {
      if (existingRegExp && existingRegExp.source === pattern) {
        existingRegExp.lastIndex = 0;
        return existingRegExp;
      }
      return new RegExp(pattern, "g");
    };
    this.regexp = getOrResetRegExp(this.regexp, `${this.prefix}(.+?)${this.suffix}`);
    this.regexpUnescape = getOrResetRegExp(this.regexpUnescape, `${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`);
    this.nestingRegexp = getOrResetRegExp(this.nestingRegexp, `${this.nestingPrefix}(.+?)${this.nestingSuffix}`);
  }
  interpolate(str, data, lng, options) {
    let match;
    let value;
    let replaces;
    const defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
    const handleFormat = (key) => {
      if (key.indexOf(this.formatSeparator) < 0) {
        const path = deepFindWithDefaults(data, defaultData, key, this.options.keySeparator, this.options.ignoreJSONStructure);
        return this.alwaysFormat ? this.format(path, void 0, lng, {
          ...options,
          ...data,
          interpolationkey: key
        }) : path;
      }
      const p = key.split(this.formatSeparator);
      const k = p.shift().trim();
      const f = p.join(this.formatSeparator).trim();
      return this.format(deepFindWithDefaults(data, defaultData, k, this.options.keySeparator, this.options.ignoreJSONStructure), f, lng, {
        ...options,
        ...data,
        interpolationkey: k
      });
    };
    this.resetRegExp();
    const missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
    const skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables !== void 0 ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
    const todos = [{
      regex: this.regexpUnescape,
      safeValue: (val) => regexSafe(val)
    }, {
      regex: this.regexp,
      safeValue: (val) => this.escapeValue ? regexSafe(this.escape(val)) : regexSafe(val)
    }];
    todos.forEach((todo) => {
      replaces = 0;
      while (match = todo.regex.exec(str)) {
        const matchedVar = match[1].trim();
        value = handleFormat(matchedVar);
        if (value === void 0) {
          if (typeof missingInterpolationHandler === "function") {
            const temp = missingInterpolationHandler(str, match, options);
            value = typeof temp === "string" ? temp : "";
          } else if (options && Object.prototype.hasOwnProperty.call(options, matchedVar)) {
            value = "";
          } else if (skipOnVariables) {
            value = match[0];
            continue;
          } else {
            this.logger.warn(`missed to pass in variable ${matchedVar} for interpolating ${str}`);
            value = "";
          }
        } else if (typeof value !== "string" && !this.useRawValueToEscape) {
          value = makeString(value);
        }
        const safeValue = todo.safeValue(value);
        str = str.replace(match[0], safeValue);
        if (skipOnVariables) {
          todo.regex.lastIndex += value.length;
          todo.regex.lastIndex -= match[0].length;
        } else {
          todo.regex.lastIndex = 0;
        }
        replaces++;
        if (replaces >= this.maxReplaces) {
          break;
        }
      }
    });
    return str;
  }
  nest(str, fc) {
    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    let match;
    let value;
    let clonedOptions;
    const handleHasOptions = (key, inheritedOptions) => {
      const sep = this.nestingOptionsSeparator;
      if (key.indexOf(sep) < 0) return key;
      const c = key.split(new RegExp(`${sep}[ ]*{`));
      let optionsString = `{${c[1]}`;
      key = c[0];
      optionsString = this.interpolate(optionsString, clonedOptions);
      const matchedSingleQuotes = optionsString.match(/'/g);
      const matchedDoubleQuotes = optionsString.match(/"/g);
      if (matchedSingleQuotes && matchedSingleQuotes.length % 2 === 0 && !matchedDoubleQuotes || matchedDoubleQuotes.length % 2 !== 0) {
        optionsString = optionsString.replace(/'/g, '"');
      }
      try {
        clonedOptions = JSON.parse(optionsString);
        if (inheritedOptions) clonedOptions = {
          ...inheritedOptions,
          ...clonedOptions
        };
      } catch (e) {
        this.logger.warn(`failed parsing options string in nesting for key ${key}`, e);
        return `${key}${sep}${optionsString}`;
      }
      if (clonedOptions.defaultValue && clonedOptions.defaultValue.indexOf(this.prefix) > -1) delete clonedOptions.defaultValue;
      return key;
    };
    while (match = this.nestingRegexp.exec(str)) {
      let formatters = [];
      clonedOptions = {
        ...options
      };
      clonedOptions = clonedOptions.replace && typeof clonedOptions.replace !== "string" ? clonedOptions.replace : clonedOptions;
      clonedOptions.applyPostProcessor = false;
      delete clonedOptions.defaultValue;
      let doReduce = false;
      if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {
        const r = match[1].split(this.formatSeparator).map((elem) => elem.trim());
        match[1] = r.shift();
        formatters = r;
        doReduce = true;
      }
      value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
      if (value && match[0] === str && typeof value !== "string") return value;
      if (typeof value !== "string") value = makeString(value);
      if (!value) {
        this.logger.warn(`missed to resolve ${match[1]} for nesting ${str}`);
        value = "";
      }
      if (doReduce) {
        value = formatters.reduce((v, f) => this.format(v, f, options.lng, {
          ...options,
          interpolationkey: match[1].trim()
        }), value.trim());
      }
      str = str.replace(match[0], value);
      this.regexp.lastIndex = 0;
    }
    return str;
  }
};
var parseFormatStr = (formatStr) => {
  let formatName = formatStr.toLowerCase().trim();
  const formatOptions = {};
  if (formatStr.indexOf("(") > -1) {
    const p = formatStr.split("(");
    formatName = p[0].toLowerCase().trim();
    const optStr = p[1].substring(0, p[1].length - 1);
    if (formatName === "currency" && optStr.indexOf(":") < 0) {
      if (!formatOptions.currency) formatOptions.currency = optStr.trim();
    } else if (formatName === "relativetime" && optStr.indexOf(":") < 0) {
      if (!formatOptions.range) formatOptions.range = optStr.trim();
    } else {
      const opts = optStr.split(";");
      opts.forEach((opt) => {
        if (opt) {
          const [key, ...rest] = opt.split(":");
          const val = rest.join(":").trim().replace(/^'+|'+$/g, "");
          const trimmedKey = key.trim();
          if (!formatOptions[trimmedKey]) formatOptions[trimmedKey] = val;
          if (val === "false") formatOptions[trimmedKey] = false;
          if (val === "true") formatOptions[trimmedKey] = true;
          if (!isNaN(val)) formatOptions[trimmedKey] = parseInt(val, 10);
        }
      });
    }
  }
  return {
    formatName,
    formatOptions
  };
};
var createCachedFormatter = (fn) => {
  const cache = {};
  return (val, lng, options) => {
    let optForCache = options;
    if (options && options.interpolationkey && options.formatParams && options.formatParams[options.interpolationkey] && options[options.interpolationkey]) {
      optForCache = {
        ...optForCache,
        [options.interpolationkey]: void 0
      };
    }
    const key = lng + JSON.stringify(optForCache);
    let formatter = cache[key];
    if (!formatter) {
      formatter = fn(getCleanedCode(lng), options);
      cache[key] = formatter;
    }
    return formatter(val);
  };
};
var Formatter = class {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    this.logger = baseLogger.create("formatter");
    this.options = options;
    this.formats = {
      number: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.NumberFormat(lng, {
          ...opt
        });
        return (val) => formatter.format(val);
      }),
      currency: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.NumberFormat(lng, {
          ...opt,
          style: "currency"
        });
        return (val) => formatter.format(val);
      }),
      datetime: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.DateTimeFormat(lng, {
          ...opt
        });
        return (val) => formatter.format(val);
      }),
      relativetime: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.RelativeTimeFormat(lng, {
          ...opt
        });
        return (val) => formatter.format(val, opt.range || "day");
      }),
      list: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.ListFormat(lng, {
          ...opt
        });
        return (val) => formatter.format(val);
      })
    };
    this.init(options);
  }
  init(services) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      interpolation: {}
    };
    const iOpts = options.interpolation;
    this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ",";
  }
  add(name, fc) {
    this.formats[name.toLowerCase().trim()] = fc;
  }
  addCached(name, fc) {
    this.formats[name.toLowerCase().trim()] = createCachedFormatter(fc);
  }
  format(value, format, lng) {
    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    const formats = format.split(this.formatSeparator);
    if (formats.length > 1 && formats[0].indexOf("(") > 1 && formats[0].indexOf(")") < 0 && formats.find((f) => f.indexOf(")") > -1)) {
      const lastIndex = formats.findIndex((f) => f.indexOf(")") > -1);
      formats[0] = [formats[0], ...formats.splice(1, lastIndex)].join(this.formatSeparator);
    }
    const result = formats.reduce((mem, f) => {
      const {
        formatName,
        formatOptions
      } = parseFormatStr(f);
      if (this.formats[formatName]) {
        let formatted = mem;
        try {
          const valOptions = options && options.formatParams && options.formatParams[options.interpolationkey] || {};
          const l = valOptions.locale || valOptions.lng || options.locale || options.lng || lng;
          formatted = this.formats[formatName](mem, l, {
            ...formatOptions,
            ...options,
            ...valOptions
          });
        } catch (error) {
          this.logger.warn(error);
        }
        return formatted;
      } else {
        this.logger.warn(`there was no format function for ${formatName}`);
      }
      return mem;
    }, value);
    return result;
  }
};
var removePending = (q, name) => {
  if (q.pending[name] !== void 0) {
    delete q.pending[name];
    q.pendingCount--;
  }
};
var Connector = class extends EventEmitter {
  constructor(backend, store, services) {
    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    super();
    this.backend = backend;
    this.store = store;
    this.services = services;
    this.languageUtils = services.languageUtils;
    this.options = options;
    this.logger = baseLogger.create("backendConnector");
    this.waitingReads = [];
    this.maxParallelReads = options.maxParallelReads || 10;
    this.readingCalls = 0;
    this.maxRetries = options.maxRetries >= 0 ? options.maxRetries : 5;
    this.retryTimeout = options.retryTimeout >= 1 ? options.retryTimeout : 350;
    this.state = {};
    this.queue = [];
    if (this.backend && this.backend.init) {
      this.backend.init(services, options.backend, options);
    }
  }
  queueLoad(languages, namespaces, options, callback) {
    const toLoad = {};
    const pending = {};
    const toLoadLanguages = {};
    const toLoadNamespaces = {};
    languages.forEach((lng) => {
      let hasAllNamespaces = true;
      namespaces.forEach((ns) => {
        const name = `${lng}|${ns}`;
        if (!options.reload && this.store.hasResourceBundle(lng, ns)) {
          this.state[name] = 2;
        } else if (this.state[name] < 0) ;
        else if (this.state[name] === 1) {
          if (pending[name] === void 0) pending[name] = true;
        } else {
          this.state[name] = 1;
          hasAllNamespaces = false;
          if (pending[name] === void 0) pending[name] = true;
          if (toLoad[name] === void 0) toLoad[name] = true;
          if (toLoadNamespaces[ns] === void 0) toLoadNamespaces[ns] = true;
        }
      });
      if (!hasAllNamespaces) toLoadLanguages[lng] = true;
    });
    if (Object.keys(toLoad).length || Object.keys(pending).length) {
      this.queue.push({
        pending,
        pendingCount: Object.keys(pending).length,
        loaded: {},
        errors: [],
        callback
      });
    }
    return {
      toLoad: Object.keys(toLoad),
      pending: Object.keys(pending),
      toLoadLanguages: Object.keys(toLoadLanguages),
      toLoadNamespaces: Object.keys(toLoadNamespaces)
    };
  }
  loaded(name, err, data) {
    const s = name.split("|");
    const lng = s[0];
    const ns = s[1];
    if (err) this.emit("failedLoading", lng, ns, err);
    if (!err && data) {
      this.store.addResourceBundle(lng, ns, data, void 0, void 0, {
        skipCopy: true
      });
    }
    this.state[name] = err ? -1 : 2;
    if (err && data) this.state[name] = 0;
    const loaded = {};
    this.queue.forEach((q) => {
      pushPath(q.loaded, [lng], ns);
      removePending(q, name);
      if (err) q.errors.push(err);
      if (q.pendingCount === 0 && !q.done) {
        Object.keys(q.loaded).forEach((l) => {
          if (!loaded[l]) loaded[l] = {};
          const loadedKeys = q.loaded[l];
          if (loadedKeys.length) {
            loadedKeys.forEach((n) => {
              if (loaded[l][n] === void 0) loaded[l][n] = true;
            });
          }
        });
        q.done = true;
        if (q.errors.length) {
          q.callback(q.errors);
        } else {
          q.callback();
        }
      }
    });
    this.emit("loaded", loaded);
    this.queue = this.queue.filter((q) => !q.done);
  }
  read(lng, ns, fcName) {
    let tried = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
    let wait = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : this.retryTimeout;
    let callback = arguments.length > 5 ? arguments[5] : void 0;
    if (!lng.length) return callback(null, {});
    if (this.readingCalls >= this.maxParallelReads) {
      this.waitingReads.push({
        lng,
        ns,
        fcName,
        tried,
        wait,
        callback
      });
      return;
    }
    this.readingCalls++;
    const resolver = (err, data) => {
      this.readingCalls--;
      if (this.waitingReads.length > 0) {
        const next = this.waitingReads.shift();
        this.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);
      }
      if (err && data && tried < this.maxRetries) {
        setTimeout(() => {
          this.read.call(this, lng, ns, fcName, tried + 1, wait * 2, callback);
        }, wait);
        return;
      }
      callback(err, data);
    };
    const fc = this.backend[fcName].bind(this.backend);
    if (fc.length === 2) {
      try {
        const r = fc(lng, ns);
        if (r && typeof r.then === "function") {
          r.then((data) => resolver(null, data)).catch(resolver);
        } else {
          resolver(null, r);
        }
      } catch (err) {
        resolver(err);
      }
      return;
    }
    return fc(lng, ns, resolver);
  }
  prepareLoading(languages, namespaces) {
    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    let callback = arguments.length > 3 ? arguments[3] : void 0;
    if (!this.backend) {
      this.logger.warn("No backend was added via i18next.use. Will not load resources.");
      return callback && callback();
    }
    if (typeof languages === "string") languages = this.languageUtils.toResolveHierarchy(languages);
    if (typeof namespaces === "string") namespaces = [namespaces];
    const toLoad = this.queueLoad(languages, namespaces, options, callback);
    if (!toLoad.toLoad.length) {
      if (!toLoad.pending.length) callback();
      return null;
    }
    toLoad.toLoad.forEach((name) => {
      this.loadOne(name);
    });
  }
  load(languages, namespaces, callback) {
    this.prepareLoading(languages, namespaces, {}, callback);
  }
  reload(languages, namespaces, callback) {
    this.prepareLoading(languages, namespaces, {
      reload: true
    }, callback);
  }
  loadOne(name) {
    let prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    const s = name.split("|");
    const lng = s[0];
    const ns = s[1];
    this.read(lng, ns, "read", void 0, void 0, (err, data) => {
      if (err) this.logger.warn(`${prefix}loading namespace ${ns} for language ${lng} failed`, err);
      if (!err && data) this.logger.log(`${prefix}loaded namespace ${ns} for language ${lng}`, data);
      this.loaded(name, err, data);
    });
  }
  saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
    let options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
    let clb = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : () => {
    };
    if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
      this.logger.warn(`did not save key "${key}" as the namespace "${namespace}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
      return;
    }
    if (key === void 0 || key === null || key === "") return;
    if (this.backend && this.backend.create) {
      const opts = {
        ...options,
        isUpdate
      };
      const fc = this.backend.create.bind(this.backend);
      if (fc.length < 6) {
        try {
          let r;
          if (fc.length === 5) {
            r = fc(languages, namespace, key, fallbackValue, opts);
          } else {
            r = fc(languages, namespace, key, fallbackValue);
          }
          if (r && typeof r.then === "function") {
            r.then((data) => clb(null, data)).catch(clb);
          } else {
            clb(null, r);
          }
        } catch (err) {
          clb(err);
        }
      } else {
        fc(languages, namespace, key, fallbackValue, clb, opts);
      }
    }
    if (!languages || !languages[0]) return;
    this.store.addResource(languages[0], namespace, key, fallbackValue);
  }
};
var get = () => ({
  debug: false,
  initImmediate: true,
  ns: ["translation"],
  defaultNS: ["translation"],
  fallbackLng: ["dev"],
  fallbackNS: false,
  supportedLngs: false,
  nonExplicitSupportedLngs: false,
  load: "all",
  preload: false,
  simplifyPluralSuffix: true,
  keySeparator: ".",
  nsSeparator: ":",
  pluralSeparator: "_",
  contextSeparator: "_",
  partialBundledLanguages: false,
  saveMissing: false,
  updateMissing: false,
  saveMissingTo: "fallback",
  saveMissingPlurals: true,
  missingKeyHandler: false,
  missingInterpolationHandler: false,
  postProcess: false,
  postProcessPassResolved: false,
  returnNull: false,
  returnEmptyString: true,
  returnObjects: false,
  joinArrays: false,
  returnedObjectHandler: false,
  parseMissingKeyHandler: false,
  appendNamespaceToMissingKey: false,
  appendNamespaceToCIMode: false,
  overloadTranslationOptionHandler: (args) => {
    let ret = {};
    if (typeof args[1] === "object") ret = args[1];
    if (typeof args[1] === "string") ret.defaultValue = args[1];
    if (typeof args[2] === "string") ret.tDescription = args[2];
    if (typeof args[2] === "object" || typeof args[3] === "object") {
      const options = args[3] || args[2];
      Object.keys(options).forEach((key) => {
        ret[key] = options[key];
      });
    }
    return ret;
  },
  interpolation: {
    escapeValue: true,
    format: (value) => value,
    prefix: "{{",
    suffix: "}}",
    formatSeparator: ",",
    unescapePrefix: "-",
    nestingPrefix: "$t(",
    nestingSuffix: ")",
    nestingOptionsSeparator: ",",
    maxReplaces: 1e3,
    skipOnVariables: true
  }
});
var transformOptions = (options) => {
  if (typeof options.ns === "string") options.ns = [options.ns];
  if (typeof options.fallbackLng === "string") options.fallbackLng = [options.fallbackLng];
  if (typeof options.fallbackNS === "string") options.fallbackNS = [options.fallbackNS];
  if (options.supportedLngs && options.supportedLngs.indexOf("cimode") < 0) {
    options.supportedLngs = options.supportedLngs.concat(["cimode"]);
  }
  return options;
};
var noop = () => {
};
var bindMemberFunctions = (inst) => {
  const mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));
  mems.forEach((mem) => {
    if (typeof inst[mem] === "function") {
      inst[mem] = inst[mem].bind(inst);
    }
  });
};
var I18n = class _I18n extends EventEmitter {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    let callback = arguments.length > 1 ? arguments[1] : void 0;
    super();
    this.options = transformOptions(options);
    this.services = {};
    this.logger = baseLogger;
    this.modules = {
      external: []
    };
    bindMemberFunctions(this);
    if (callback && !this.isInitialized && !options.isClone) {
      if (!this.options.initImmediate) {
        this.init(options, callback);
        return this;
      }
      setTimeout(() => {
        this.init(options, callback);
      }, 0);
    }
  }
  init() {
    var _this = this;
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    let callback = arguments.length > 1 ? arguments[1] : void 0;
    this.isInitializing = true;
    if (typeof options === "function") {
      callback = options;
      options = {};
    }
    if (!options.defaultNS && options.defaultNS !== false && options.ns) {
      if (typeof options.ns === "string") {
        options.defaultNS = options.ns;
      } else if (options.ns.indexOf("translation") < 0) {
        options.defaultNS = options.ns[0];
      }
    }
    const defOpts = get();
    this.options = {
      ...defOpts,
      ...this.options,
      ...transformOptions(options)
    };
    if (this.options.compatibilityAPI !== "v1") {
      this.options.interpolation = {
        ...defOpts.interpolation,
        ...this.options.interpolation
      };
    }
    if (options.keySeparator !== void 0) {
      this.options.userDefinedKeySeparator = options.keySeparator;
    }
    if (options.nsSeparator !== void 0) {
      this.options.userDefinedNsSeparator = options.nsSeparator;
    }
    const createClassOnDemand = (ClassOrObject) => {
      if (!ClassOrObject) return null;
      if (typeof ClassOrObject === "function") return new ClassOrObject();
      return ClassOrObject;
    };
    if (!this.options.isClone) {
      if (this.modules.logger) {
        baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
      } else {
        baseLogger.init(null, this.options);
      }
      let formatter;
      if (this.modules.formatter) {
        formatter = this.modules.formatter;
      } else if (typeof Intl !== "undefined") {
        formatter = Formatter;
      }
      const lu = new LanguageUtil(this.options);
      this.store = new ResourceStore(this.options.resources, this.options);
      const s = this.services;
      s.logger = baseLogger;
      s.resourceStore = this.store;
      s.languageUtils = lu;
      s.pluralResolver = new PluralResolver(lu, {
        prepend: this.options.pluralSeparator,
        compatibilityJSON: this.options.compatibilityJSON,
        simplifyPluralSuffix: this.options.simplifyPluralSuffix
      });
      if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {
        s.formatter = createClassOnDemand(formatter);
        s.formatter.init(s, this.options);
        this.options.interpolation.format = s.formatter.format.bind(s.formatter);
      }
      s.interpolator = new Interpolator(this.options);
      s.utils = {
        hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
      };
      s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
      s.backendConnector.on("*", function(event) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        _this.emit(event, ...args);
      });
      if (this.modules.languageDetector) {
        s.languageDetector = createClassOnDemand(this.modules.languageDetector);
        if (s.languageDetector.init) s.languageDetector.init(s, this.options.detection, this.options);
      }
      if (this.modules.i18nFormat) {
        s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
        if (s.i18nFormat.init) s.i18nFormat.init(this);
      }
      this.translator = new Translator(this.services, this.options);
      this.translator.on("*", function(event) {
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        _this.emit(event, ...args);
      });
      this.modules.external.forEach((m) => {
        if (m.init) m.init(this);
      });
    }
    this.format = this.options.interpolation.format;
    if (!callback) callback = noop;
    if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
      const codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
      if (codes.length > 0 && codes[0] !== "dev") this.options.lng = codes[0];
    }
    if (!this.services.languageDetector && !this.options.lng) {
      this.logger.warn("init: no languageDetector is used and no lng is defined");
    }
    const storeApi = ["getResource", "hasResourceBundle", "getResourceBundle", "getDataByLanguage"];
    storeApi.forEach((fcName) => {
      this[fcName] = function() {
        return _this.store[fcName](...arguments);
      };
    });
    const storeApiChained = ["addResource", "addResources", "addResourceBundle", "removeResourceBundle"];
    storeApiChained.forEach((fcName) => {
      this[fcName] = function() {
        _this.store[fcName](...arguments);
        return _this;
      };
    });
    const deferred = defer();
    const load = () => {
      const finish = (err, t2) => {
        this.isInitializing = false;
        if (this.isInitialized && !this.initializedStoreOnce) this.logger.warn("init: i18next is already initialized. You should call init just once!");
        this.isInitialized = true;
        if (!this.options.isClone) this.logger.log("initialized", this.options);
        this.emit("initialized", this.options);
        deferred.resolve(t2);
        callback(err, t2);
      };
      if (this.languages && this.options.compatibilityAPI !== "v1" && !this.isInitialized) return finish(null, this.t.bind(this));
      this.changeLanguage(this.options.lng, finish);
    };
    if (this.options.resources || !this.options.initImmediate) {
      load();
    } else {
      setTimeout(load, 0);
    }
    return deferred;
  }
  loadResources(language) {
    let callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
    let usedCallback = callback;
    const usedLng = typeof language === "string" ? language : this.language;
    if (typeof language === "function") usedCallback = language;
    if (!this.options.resources || this.options.partialBundledLanguages) {
      if (usedLng && usedLng.toLowerCase() === "cimode" && (!this.options.preload || this.options.preload.length === 0)) return usedCallback();
      const toLoad = [];
      const append = (lng) => {
        if (!lng) return;
        if (lng === "cimode") return;
        const lngs = this.services.languageUtils.toResolveHierarchy(lng);
        lngs.forEach((l) => {
          if (l === "cimode") return;
          if (toLoad.indexOf(l) < 0) toLoad.push(l);
        });
      };
      if (!usedLng) {
        const fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
        fallbacks.forEach((l) => append(l));
      } else {
        append(usedLng);
      }
      if (this.options.preload) {
        this.options.preload.forEach((l) => append(l));
      }
      this.services.backendConnector.load(toLoad, this.options.ns, (e) => {
        if (!e && !this.resolvedLanguage && this.language) this.setResolvedLanguage(this.language);
        usedCallback(e);
      });
    } else {
      usedCallback(null);
    }
  }
  reloadResources(lngs, ns, callback) {
    const deferred = defer();
    if (typeof lngs === "function") {
      callback = lngs;
      lngs = void 0;
    }
    if (typeof ns === "function") {
      callback = ns;
      ns = void 0;
    }
    if (!lngs) lngs = this.languages;
    if (!ns) ns = this.options.ns;
    if (!callback) callback = noop;
    this.services.backendConnector.reload(lngs, ns, (err) => {
      deferred.resolve();
      callback(err);
    });
    return deferred;
  }
  use(module2) {
    if (!module2) throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");
    if (!module2.type) throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");
    if (module2.type === "backend") {
      this.modules.backend = module2;
    }
    if (module2.type === "logger" || module2.log && module2.warn && module2.error) {
      this.modules.logger = module2;
    }
    if (module2.type === "languageDetector") {
      this.modules.languageDetector = module2;
    }
    if (module2.type === "i18nFormat") {
      this.modules.i18nFormat = module2;
    }
    if (module2.type === "postProcessor") {
      postProcessor.addPostProcessor(module2);
    }
    if (module2.type === "formatter") {
      this.modules.formatter = module2;
    }
    if (module2.type === "3rdParty") {
      this.modules.external.push(module2);
    }
    return this;
  }
  setResolvedLanguage(l) {
    if (!l || !this.languages) return;
    if (["cimode", "dev"].indexOf(l) > -1) return;
    for (let li = 0; li < this.languages.length; li++) {
      const lngInLngs = this.languages[li];
      if (["cimode", "dev"].indexOf(lngInLngs) > -1) continue;
      if (this.store.hasLanguageSomeTranslations(lngInLngs)) {
        this.resolvedLanguage = lngInLngs;
        break;
      }
    }
  }
  changeLanguage(lng, callback) {
    var _this2 = this;
    this.isLanguageChangingTo = lng;
    const deferred = defer();
    this.emit("languageChanging", lng);
    const setLngProps = (l) => {
      this.language = l;
      this.languages = this.services.languageUtils.toResolveHierarchy(l);
      this.resolvedLanguage = void 0;
      this.setResolvedLanguage(l);
    };
    const done = (err, l) => {
      if (l) {
        setLngProps(l);
        this.translator.changeLanguage(l);
        this.isLanguageChangingTo = void 0;
        this.emit("languageChanged", l);
        this.logger.log("languageChanged", l);
      } else {
        this.isLanguageChangingTo = void 0;
      }
      deferred.resolve(function() {
        return _this2.t(...arguments);
      });
      if (callback) callback(err, function() {
        return _this2.t(...arguments);
      });
    };
    const setLng = (lngs) => {
      if (!lng && !lngs && this.services.languageDetector) lngs = [];
      const l = typeof lngs === "string" ? lngs : this.services.languageUtils.getBestMatchFromCodes(lngs);
      if (l) {
        if (!this.language) {
          setLngProps(l);
        }
        if (!this.translator.language) this.translator.changeLanguage(l);
        if (this.services.languageDetector && this.services.languageDetector.cacheUserLanguage) this.services.languageDetector.cacheUserLanguage(l);
      }
      this.loadResources(l, (err) => {
        done(err, l);
      });
    };
    if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
      setLng(this.services.languageDetector.detect());
    } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
      if (this.services.languageDetector.detect.length === 0) {
        this.services.languageDetector.detect().then(setLng);
      } else {
        this.services.languageDetector.detect(setLng);
      }
    } else {
      setLng(lng);
    }
    return deferred;
  }
  getFixedT(lng, ns, keyPrefix) {
    var _this3 = this;
    const fixedT = function(key, opts) {
      let options;
      if (typeof opts !== "object") {
        for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
          rest[_key3 - 2] = arguments[_key3];
        }
        options = _this3.options.overloadTranslationOptionHandler([key, opts].concat(rest));
      } else {
        options = {
          ...opts
        };
      }
      options.lng = options.lng || fixedT.lng;
      options.lngs = options.lngs || fixedT.lngs;
      options.ns = options.ns || fixedT.ns;
      if (options.keyPrefix !== "") options.keyPrefix = options.keyPrefix || keyPrefix || fixedT.keyPrefix;
      const keySeparator = _this3.options.keySeparator || ".";
      let resultKey;
      if (options.keyPrefix && Array.isArray(key)) {
        resultKey = key.map((k) => `${options.keyPrefix}${keySeparator}${k}`);
      } else {
        resultKey = options.keyPrefix ? `${options.keyPrefix}${keySeparator}${key}` : key;
      }
      return _this3.t(resultKey, options);
    };
    if (typeof lng === "string") {
      fixedT.lng = lng;
    } else {
      fixedT.lngs = lng;
    }
    fixedT.ns = ns;
    fixedT.keyPrefix = keyPrefix;
    return fixedT;
  }
  t() {
    return this.translator && this.translator.translate(...arguments);
  }
  exists() {
    return this.translator && this.translator.exists(...arguments);
  }
  setDefaultNamespace(ns) {
    this.options.defaultNS = ns;
  }
  hasLoadedNamespace(ns) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (!this.isInitialized) {
      this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages);
      return false;
    }
    if (!this.languages || !this.languages.length) {
      this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages);
      return false;
    }
    const lng = options.lng || this.resolvedLanguage || this.languages[0];
    const fallbackLng = this.options ? this.options.fallbackLng : false;
    const lastLng = this.languages[this.languages.length - 1];
    if (lng.toLowerCase() === "cimode") return true;
    const loadNotPending = (l, n) => {
      const loadState = this.services.backendConnector.state[`${l}|${n}`];
      return loadState === -1 || loadState === 0 || loadState === 2;
    };
    if (options.precheck) {
      const preResult = options.precheck(this, loadNotPending);
      if (preResult !== void 0) return preResult;
    }
    if (this.hasResourceBundle(lng, ns)) return true;
    if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages) return true;
    if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
    return false;
  }
  loadNamespaces(ns, callback) {
    const deferred = defer();
    if (!this.options.ns) {
      if (callback) callback();
      return Promise.resolve();
    }
    if (typeof ns === "string") ns = [ns];
    ns.forEach((n) => {
      if (this.options.ns.indexOf(n) < 0) this.options.ns.push(n);
    });
    this.loadResources((err) => {
      deferred.resolve();
      if (callback) callback(err);
    });
    return deferred;
  }
  loadLanguages(lngs, callback) {
    const deferred = defer();
    if (typeof lngs === "string") lngs = [lngs];
    const preloaded = this.options.preload || [];
    const newLngs = lngs.filter((lng) => preloaded.indexOf(lng) < 0 && this.services.languageUtils.isSupportedCode(lng));
    if (!newLngs.length) {
      if (callback) callback();
      return Promise.resolve();
    }
    this.options.preload = preloaded.concat(newLngs);
    this.loadResources((err) => {
      deferred.resolve();
      if (callback) callback(err);
    });
    return deferred;
  }
  dir(lng) {
    if (!lng) lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);
    if (!lng) return "rtl";
    const rtlLngs = ["ar", "shu", "sqr", "ssh", "xaa", "yhd", "yud", "aao", "abh", "abv", "acm", "acq", "acw", "acx", "acy", "adf", "ads", "aeb", "aec", "afb", "ajp", "apc", "apd", "arb", "arq", "ars", "ary", "arz", "auz", "avl", "ayh", "ayl", "ayn", "ayp", "bbz", "pga", "he", "iw", "ps", "pbt", "pbu", "pst", "prp", "prd", "ug", "ur", "ydd", "yds", "yih", "ji", "yi", "hbo", "men", "xmn", "fa", "jpr", "peo", "pes", "prs", "dv", "sam", "ckb"];
    const languageUtils = this.services && this.services.languageUtils || new LanguageUtil(get());
    return rtlLngs.indexOf(languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf("-arab") > 1 ? "rtl" : "ltr";
  }
  static createInstance() {
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    let callback = arguments.length > 1 ? arguments[1] : void 0;
    return new _I18n(options, callback);
  }
  cloneInstance() {
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    let callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
    const forkResourceStore = options.forkResourceStore;
    if (forkResourceStore) delete options.forkResourceStore;
    const mergedOptions = {
      ...this.options,
      ...options,
      ...{
        isClone: true
      }
    };
    const clone = new _I18n(mergedOptions);
    if (options.debug !== void 0 || options.prefix !== void 0) {
      clone.logger = clone.logger.clone(options);
    }
    const membersToCopy = ["store", "services", "language"];
    membersToCopy.forEach((m) => {
      clone[m] = this[m];
    });
    clone.services = {
      ...this.services
    };
    clone.services.utils = {
      hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
    };
    if (forkResourceStore) {
      clone.store = new ResourceStore(this.store.data, mergedOptions);
      clone.services.resourceStore = clone.store;
    }
    clone.translator = new Translator(clone.services, mergedOptions);
    clone.translator.on("*", function(event) {
      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        args[_key4 - 1] = arguments[_key4];
      }
      clone.emit(event, ...args);
    });
    clone.init(mergedOptions, callback);
    clone.translator.options = mergedOptions;
    clone.translator.backendConnector.services.utils = {
      hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
    };
    return clone;
  }
  toJSON() {
    return {
      options: this.options,
      store: this.store,
      language: this.language,
      languages: this.languages,
      resolvedLanguage: this.resolvedLanguage
    };
  }
};
var instance = I18n.createInstance();
instance.createInstance = I18n.createInstance;
var createInstance = instance.createInstance;
var dir = instance.dir;
var init = instance.init;
var loadResources = instance.loadResources;
var reloadResources = instance.reloadResources;
var use = instance.use;
var changeLanguage = instance.changeLanguage;
var getFixedT = instance.getFixedT;
var t = instance.t;
var exists = instance.exists;
var setDefaultNamespace = instance.setDefaultNamespace;
var hasLoadedNamespace = instance.hasLoadedNamespace;
var loadNamespaces = instance.loadNamespaces;
var loadLanguages = instance.loadLanguages;

// src/ui/toolbar/toolbarActions.ts
var FolderSuggestModal = class extends import_obsidian.FuzzySuggestModal {
  constructor(plugin, onSelect) {
    super(plugin.app);
    this.plugin = plugin;
    this.onSelect = onSelect;
  }
  getItems() {
    return this.plugin.app.vault.getAllLoadedFiles().filter((file) => file instanceof import_obsidian.TFolder);
  }
  getItemText(folder) {
    return folder.path;
  }
  onChooseItem(folder) {
    this.onSelect(folder);
  }
};
function toggleSort(plugin) {
  let sortPopup = document.querySelector(".card-navigator-sort-popup");
  if (!sortPopup) {
    sortPopup = document.createElement("div");
    sortPopup.className = "card-navigator-sort-popup";
    const currentSort = `${plugin.settings.sortCriterion}_${plugin.settings.sortOrder}`;
    const addSortOption = (value, label) => {
      const option = document.createElement("button");
      option.textContent = label;
      option.classList.toggle("active", currentSort === value);
      option.addEventListener("click", async () => {
        const [criterion, order] = value.split("_");
        plugin.settings.sortCriterion = criterion;
        plugin.settings.sortOrder = order;
        await plugin.saveSettings();
        plugin.triggerRefresh();
        sortPopup.remove();
      });
      sortPopup.appendChild(option);
    };
    addSortOption(t("fileName_asc"), t("File name (A to Z)"));
    addSortOption(t("fileName_desc"), t("File name (Z to A)"));
    addSortOption(t("lastModified_desc"), t("Last modified (newest first)"));
    addSortOption(t("lastModified_asc"), t("Last modified (oldest first)"));
    addSortOption(t("created_desc"), t("Created (newest first)"));
    addSortOption(t("created_asc"), t("Created (oldest first)"));
    const toolbarEl = document.querySelector(".card-navigator-toolbar-container");
    if (toolbarEl) {
      toolbarEl.insertAdjacentElement("afterend", sortPopup);
      document.addEventListener("click", function onClickOutside(event) {
        if (sortPopup && !sortPopup.contains(event.target) && !toolbarEl.contains(event.target)) {
          sortPopup.remove();
          document.removeEventListener("click", onClickOutside);
        }
      });
    }
  } else {
    sortPopup.remove();
  }
}
function toggleSettings(plugin) {
  let settingsPopup = document.querySelector(".card-navigator-settings-popup");
  if (!settingsPopup) {
    settingsPopup = document.createElement("div");
    settingsPopup.className = "card-navigator-settings-popup";
    const updateSetting = async (settingKey, value) => {
      plugin.settings[settingKey] = value;
      await plugin.saveSettings();
      plugin.triggerRefresh();
    };
    const cardsPerViewSetting = document.createElement("input");
    cardsPerViewSetting.type = "range";
    cardsPerViewSetting.min = "1";
    cardsPerViewSetting.max = "10";
    cardsPerViewSetting.value = plugin.settings.cardsPerView.toString();
    cardsPerViewSetting.addEventListener("input", (e) => {
      const value = parseInt(e.target.value, 10);
      updateSetting("cardsPerView", value);
    });
    const cardsPerViewLabel = document.createElement("label");
    cardsPerViewLabel.textContent = t("Cards per view:");
    settingsPopup.appendChild(cardsPerViewLabel);
    settingsPopup.appendChild(cardsPerViewSetting);
    const fontSizeSetting = document.createElement("input");
    fontSizeSetting.type = "range";
    fontSizeSetting.min = "10";
    fontSizeSetting.max = "30";
    fontSizeSetting.value = plugin.settings.contentSize.toString();
    fontSizeSetting.addEventListener("input", (e) => {
      const value = parseInt(e.target.value, 10);
      updateSetting("contentSize", value);
    });
    const fontSizeLabel = document.createElement("label");
    fontSizeLabel.textContent = t("Content Size:");
    settingsPopup.appendChild(fontSizeLabel);
    settingsPopup.appendChild(fontSizeSetting);
    const createToggle = (labelText, settingKey) => {
      const container = document.createElement("div");
      const label = document.createElement("label");
      label.textContent = labelText;
      const toggle = document.createElement("input");
      toggle.type = "checkbox";
      toggle.checked = plugin.settings[settingKey];
      toggle.addEventListener("change", (e) => {
        updateSetting(settingKey, e.target.checked);
      });
      container.appendChild(label);
      container.appendChild(toggle);
      return container;
    };
    const fileNameToggle = createToggle(t("Show File Name"), t("showFileName"));
    settingsPopup.appendChild(fileNameToggle);
    const firstHeaderToggle = createToggle(t("Show First Header"), t("showFirstHeader"));
    settingsPopup.appendChild(firstHeaderToggle);
    const contentToggle = createToggle(t("Show Content"), t("showContent"));
    settingsPopup.appendChild(contentToggle);
    const dragDropContentToggle = createToggle(t("Drag and Drop Content"), t("dragDropContent"));
    settingsPopup.appendChild(dragDropContentToggle);
    const toolbarEl = document.querySelector(".card-navigator-toolbar-container");
    if (toolbarEl) {
      toolbarEl.insertAdjacentElement("afterend", settingsPopup);
      document.addEventListener("click", function onClickOutside(event) {
        if (settingsPopup && !settingsPopup.contains(event.target) && !toolbarEl.contains(event.target)) {
          settingsPopup.remove();
          document.removeEventListener("click", onClickOutside);
        }
      });
    }
  } else {
    settingsPopup.classList.toggle("hidden");
  }
}

// src/ui/toolbar/toolbar.ts
var Toolbar = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.containerEl = void 0;
    this.isVertical = false;
  }
  initialize(containerEl) {
    this.containerEl = containerEl;
    this.createToolbar();
  }
  setOrientation(isVertical) {
    if (this.isVertical !== isVertical) {
      this.isVertical = isVertical;
      this.updateToolbarStyle();
      this.createToolbar();
    }
  }
  updateToolbarStyle() {
    if (this.containerEl) {
      this.containerEl.classList.toggle("vertical", this.isVertical);
      this.containerEl.classList.toggle("horizontal", !this.isVertical);
    }
  }
  createToolbar() {
    if (!this.containerEl) {
      return;
    }
    this.containerEl.empty();
    const toolbarContainer = document.createElement("div");
    toolbarContainer.className = "card-navigator-toolbar-container";
    const searchContainer = this.createSearchContainer();
    const separator = this.createSeparator();
    const actionIconsContainer = this.createActionIconsContainer();
    toolbarContainer.appendChild(searchContainer);
    toolbarContainer.appendChild(separator);
    toolbarContainer.appendChild(actionIconsContainer);
    this.containerEl.appendChild(toolbarContainer);
  }
  createSearchContainer() {
    const container = document.createElement("div");
    container.className = "card-navigator-search-container";
    const input = document.createElement("input");
    input.type = "text";
    input.placeholder = "Search...";
    input.className = "card-navigator-search-input";
    input.addEventListener("input", (0, import_obsidian2.debounce)(async (e) => {
      const searchTerm = e.target.value;
      const view = this.plugin.app.workspace.getLeavesOfType("card-navigator-view")[0].view;
      await view.cardContainer.searchCards(searchTerm);
    }, 300));
    container.appendChild(input);
    return container;
  }
  createActionIconsContainer() {
    const container = document.createElement("div");
    container.className = "card-navigator-action-icons-container";
    const icons = [
      { name: "folder", label: "Select folder", action: () => this.openFolderSelector() },
      { name: "arrow-up-narrow-wide", label: "Sort cards", action: () => toggleSort(this.plugin) },
      { name: "settings", label: "Settings", action: () => toggleSettings(this.plugin) }
    ];
    icons.forEach((icon) => {
      const iconElement = this.createToolbarIcon(icon.name, icon.label, icon.action);
      if (icon.name === "arrow-up-narrow-wide") {
        iconElement.classList.toggle(
          "active",
          this.plugin.settings.sortCriterion !== "fileName" || this.plugin.settings.sortOrder !== "asc"
        );
      }
      container.appendChild(iconElement);
    });
    return container;
  }
  createToolbarIcon(iconName, ariaLabel, action) {
    const icon = document.createElement("div");
    icon.className = "clickable-icon";
    icon.setAttribute("aria-label", ariaLabel);
    (0, import_obsidian2.setIcon)(icon, iconName);
    icon.addEventListener("click", action);
    return icon;
  }
  createSeparator() {
    const separator = document.createElement("div");
    separator.className = "toolbar-separator";
    return separator;
  }
  openFolderSelector() {
    new FolderSuggestModal(this.plugin, (folder) => {
      const view = this.plugin.app.workspace.getActiveViewOfType(CardNavigator);
      if (view) {
        view.cardContainer.displayCardsForFolder(folder);
      }
    }).open();
  }
  refresh() {
  }
  onClose() {
  }
};

// src/ui/cardContainer/cardContainer.ts
var import_obsidian4 = require("obsidian");

// src/ui/cardContainer/cardMaker.ts
var import_obsidian3 = require("obsidian");

// src/common/utils.ts
function separateFrontmatterAndContent(content) {
  const frontmatterRegex = /^---\s*\n([\s\S]*?)\n---\s*\n/;
  const match = content.match(frontmatterRegex);
  return match ? { frontmatter: match[1], cleanContent: content.slice(match[0].length).trim() } : { frontmatter: null, cleanContent: content.trim() };
}
function sortFiles(files, criterion, order) {
  return files.sort((a, b) => {
    let comparison = 0;
    switch (criterion) {
      case "fileName":
        comparison = a.basename.localeCompare(b.basename, void 0, { numeric: true, sensitivity: "base" });
        break;
      case "lastModified":
        comparison = a.stat.mtime - b.stat.mtime;
        break;
      case "created":
        comparison = a.stat.ctime - b.stat.ctime;
        break;
    }
    return order === "asc" ? comparison : -comparison;
  });
}

// src/ui/cardContainer/cardMaker.ts
var CardMaker = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  async getCardsForActiveFile(activeFile) {
    const folder = activeFile.parent;
    if (!folder) {
      return [];
    }
    const files = folder.children.filter((file) => file instanceof import_obsidian3.TFile);
    const sortedFiles = sortFiles(
      files,
      this.plugin.settings.sortCriterion,
      this.plugin.settings.sortOrder
    );
    return await Promise.all(sortedFiles.map((file) => this.createCard(file)));
  }
  async createCard(file) {
    const content = await this.plugin.app.vault.cachedRead(file);
    const { cleanContent } = separateFrontmatterAndContent(content);
    const contentWithoutHeader = this.removeFirstHeader(cleanContent);
    return {
      file,
      fileName: this.plugin.settings.showFileName ? file.basename : void 0,
      firstHeader: this.plugin.settings.showFirstHeader ? this.findFirstHeader(cleanContent) : void 0,
      content: this.plugin.settings.showContent ? this.truncateContent(contentWithoutHeader) : void 0
    };
  }
  removeFirstHeader(content) {
    const headerRegex = /^#+\s+(.+)$/m;
    return content.replace(headerRegex, "").trim();
  }
  findFirstHeader(content) {
    const headerRegex = /^#+\s+(.+)$/m;
    const match = content.match(headerRegex);
    return match ? match[1].trim() : void 0;
  }
  truncateContent(content) {
    const maxLength = this.plugin.settings.contentLength * 100;
    return content.length <= maxLength ? content : content.slice(0, maxLength) + "...";
  }
  createCardElement(card) {
    const cardElement = document.createElement("div");
    cardElement.className = "card-navigator-card";
    if (this.plugin.settings.showFileName && card.fileName) {
      const fileNameEl = cardElement.createEl("h3", { text: card.fileName });
      fileNameEl.className = "card-navigator-filename";
      fileNameEl.style.fontSize = `${this.plugin.settings.fileNameSize}px`;
    }
    if (this.plugin.settings.showFirstHeader && card.firstHeader) {
      const headerEl = cardElement.createEl("h4", { text: card.firstHeader });
      headerEl.className = "card-navigator-first-header";
      headerEl.style.fontSize = `${this.plugin.settings.firstHeaderSize}px`;
    }
    if (this.plugin.settings.showContent && card.content) {
      const contentEl = cardElement.createEl("div");
      contentEl.className = "card-navigator-content";
      contentEl.style.fontSize = `${this.plugin.settings.contentSize}px`;
      if (this.plugin.settings.renderContentAsHtml) {
        import_obsidian3.MarkdownRenderer.render(
          this.plugin.app,
          card.content,
          contentEl,
          card.file.path,
          this.plugin
        );
      } else {
        contentEl.textContent = card.content;
        contentEl.style.overflow = "hidden";
        contentEl.style.textOverflow = "ellipsis";
        contentEl.style.display = "-webkit-box";
      }
    }
    if (this.plugin.app.workspace.getActiveFile() === card.file) {
      cardElement.addClass("card-navigator-active");
    }
    this.addCardInteractions(cardElement, card);
    return cardElement;
  }
  addCardInteractions(cardElement, card) {
    cardElement.addEventListener("click", () => this.openFile(card.file));
    this.setupDragAndDrop(cardElement, card);
    this.setupContextMenu(cardElement, card.file);
  }
  setupDragAndDrop(cardElement, card) {
    cardElement.setAttribute("draggable", "true");
    cardElement.addEventListener("dragstart", (event) => {
      if (event.dataTransfer) {
        let dragContent = "";
        if (this.plugin.settings.dragDropContent) {
          if (this.plugin.settings.showFileName && card.fileName) {
            dragContent += `## ${card.fileName}

`;
          }
          if (this.plugin.settings.showFirstHeader && card.firstHeader) {
            dragContent += `# ${card.firstHeader}

`;
          }
          if (this.plugin.settings.showContent && card.content) {
            dragContent += `${card.content}

`;
          }
          if (dragContent === "") {
            dragContent = `[[${card.file.name}]]`;
          }
        } else {
          dragContent = `[[${card.file.name}]]`;
        }
        event.dataTransfer.setData("text/plain", dragContent.trim());
        event.dataTransfer.setDragImage(cardElement, 0, 0);
      }
    });
  }
  setupContextMenu(cardElement, file) {
    cardElement.addEventListener("contextmenu", (e) => {
      e.preventDefault();
      const menu = new import_obsidian3.Menu();
      this.plugin.app.workspace.trigger("file-menu", menu, file, "more-options");
      menu.showAtPosition({ x: e.clientX, y: e.clientY });
    });
  }
  openFile(file) {
    this.plugin.app.workspace.getLeaf().openFile(file);
  }
};

// src/ui/cardContainer/cardContainer.ts
var CardContainer = class {
  constructor(plugin, leaf) {
    this.containerEl = null;
    this.plugin = plugin;
    this.leaf = leaf;
    this.cardMaker = new CardMaker(this.plugin);
    this.isVertical = false;
    this.toolbarHeight = this.getCSSVariable("--card-navigator-toolbar-height", 50);
    this.cardGap = this.getCSSVariable("--card-navigator-gap", 10);
    this.containerPadding = this.getCSSVariable("--card-navigator-container-padding", 10);
  }
  getCSSVariable(variableName, defaultValue) {
    const valueStr = getComputedStyle(document.documentElement).getPropertyValue(variableName).trim();
    return parseInt(valueStr) || defaultValue;
  }
  async initialize(containerEl) {
    this.containerEl = containerEl;
    await this.waitForLeafCreation();
    this.registerEvents();
    this.updateContainerStyle();
    this.refresh();
  }
  async waitForLeafCreation() {
    return new Promise((resolve) => {
      const checkLeaf = () => {
        if (this.containerEl && this.containerEl.getBoundingClientRect().width > 0 && this.containerEl.clientHeight > 0) {
          resolve();
        } else {
          requestAnimationFrame(checkLeaf);
        }
      };
      checkLeaf();
    });
  }
  registerEvents() {
    this.plugin.registerEvent(
      this.plugin.app.workspace.on("active-leaf-change", () => {
        this.plugin.triggerRefresh();
      })
    );
    this.plugin.registerEvent(
      this.plugin.app.vault.on("modify", () => {
        this.plugin.triggerRefresh();
      })
    );
  }
  setOrientation(isVertical) {
    this.isVertical = isVertical;
    this.updateContainerStyle();
    this.refresh();
  }
  updateContainerStyle() {
    if (this.containerEl) {
      this.containerEl.classList.add("card-navigator-container");
      this.containerEl.classList.toggle("vertical", this.isVertical);
      this.containerEl.classList.toggle("horizontal", !this.isVertical);
      this.containerEl.classList.toggle("fixed-height", this.plugin.settings.fixedCardHeight);
      this.containerEl.classList.toggle("flexible-height", !this.plugin.settings.fixedCardHeight);
      this.containerEl.style.setProperty("--cards-per-view", this.plugin.settings.cardsPerView.toString());
      this.containerEl.style.setProperty("--card-navigator-gap", `${this.cardGap}px`);
      this.containerEl.style.setProperty("--card-navigator-toolbar-height", `${this.toolbarHeight}px`);
      if (this.isVertical) {
        this.containerEl.style.flexDirection = "column";
        this.containerEl.style.overflowY = "auto";
        this.containerEl.style.overflowX = "hidden";
        this.containerEl.style.height = `calc(100% - ${this.toolbarHeight}px)`;
        this.containerEl.style.marginTop = `${this.toolbarHeight}px`;
        this.containerEl.style.gap = `${this.cardGap}px`;
        this.containerEl.style.marginRight = `-10px`;
        this.containerEl.style.paddingRight = `${this.containerPadding}px`;
      } else {
        this.containerEl.style.flexDirection = "row";
        this.containerEl.style.overflowX = "auto";
        this.containerEl.style.overflowY = "hidden";
        this.containerEl.style.height = "100%";
        this.containerEl.style.marginTop = "0";
        this.containerEl.style.gap = `${this.cardGap}px`;
        this.containerEl.style.paddingTop = `${this.containerPadding}px`;
        this.containerEl.style.paddingBottom = `${this.containerPadding}px`;
      }
    }
  }
  async refresh() {
    let folder = null;
    if (this.plugin.settings.useSelectedFolder && this.plugin.settings.selectedFolder) {
      folder = this.plugin.app.vault.getAbstractFileByPath(this.plugin.settings.selectedFolder);
    } else {
      const activeFile = this.plugin.app.workspace.getActiveFile();
      folder = (activeFile == null ? void 0 : activeFile.parent) || null;
    }
    if (!folder || !this.containerEl) {
      return;
    }
    const files = folder.children.filter((file) => file instanceof import_obsidian4.TFile);
    const sortedFiles = sortFiles(files, this.plugin.settings.sortCriterion, this.plugin.settings.sortOrder);
    const cardsData = await Promise.all(sortedFiles.map((file) => this.cardMaker.createCard(file)));
    this.renderCards(cardsData);
  }
  renderCards(cardsData) {
    const containerEl = this.containerEl;
    if (!containerEl) return;
    const currentScrollTop = containerEl.scrollTop;
    const currentScrollLeft = containerEl.scrollLeft;
    const activeCardIndex = Array.from(containerEl.children).findIndex(
      (child) => child.classList.contains("card-navigator-active")
    );
    containerEl.innerHTML = "";
    const containerHeight = containerEl.clientHeight;
    const availableHeight = containerHeight - this.toolbarHeight;
    cardsData.forEach((cardData, index) => {
      const card = this.cardMaker.createCardElement(cardData);
      card.style.flexShrink = "0";
      if (this.isVertical) {
        card.style.width = "100%";
        if (this.plugin.settings.fixedCardHeight) {
          card.style.height = `${availableHeight / this.plugin.settings.cardsPerView}px`;
          card.style.overflow = "auto";
        } else {
          card.style.height = "auto";
          card.style.minHeight = `${availableHeight / this.plugin.settings.cardsPerView / 2}px`;
          card.style.maxHeight = `${availableHeight / 2}px`;
        }
      } else {
        card.style.width = `${100 / this.plugin.settings.cardsPerView}%`;
        card.style.height = "100%";
      }
      if (cardData.file === this.plugin.app.workspace.getActiveFile()) {
        card.classList.add("card-navigator-active");
      }
      containerEl.appendChild(card);
    });
    containerEl.scrollTop = currentScrollTop;
    containerEl.scrollLeft = currentScrollLeft;
    const newActiveCardIndex = Array.from(containerEl.children).findIndex(
      (child) => child.classList.contains("card-navigator-active")
    );
    if (activeCardIndex !== newActiveCardIndex && newActiveCardIndex !== -1) {
      this.scrollToActiveCard(false);
    }
  }
  scrollToActiveCard(animate = true) {
    if (!this.containerEl) return;
    const activeCard = this.containerEl.querySelector(".card-navigator-active");
    if (!activeCard) return;
    const containerRect = this.containerEl.getBoundingClientRect();
    const activeCardRect = activeCard.getBoundingClientRect();
    let offset = 0;
    let scrollProperty;
    if (this.isVertical) {
      const containerCenter = containerRect.top + containerRect.height / 2;
      const cardCenter = activeCardRect.top + activeCardRect.height / 2;
      offset = cardCenter - containerCenter;
      scrollProperty = "scrollTop";
    } else {
      const containerCenter = containerRect.left + containerRect.width / 2;
      const cardCenter = activeCardRect.left + activeCardRect.width / 2;
      offset = cardCenter - containerCenter;
      scrollProperty = "scrollLeft";
    }
    const threshold = 50;
    if (Math.abs(offset) < threshold) return;
    const newScrollPosition = this.containerEl[scrollProperty] + offset;
    if (animate) {
      const start = this.containerEl[scrollProperty];
      const change = newScrollPosition - start;
      const duration = 300;
      let startTime = null;
      const animateScroll = (currentTime) => {
        if (startTime === null) startTime = currentTime;
        const timeElapsed = currentTime - startTime;
        const progress = Math.min(timeElapsed / duration, 1);
        const easeProgress = 0.5 - Math.cos(progress * Math.PI) / 2;
        if (this.containerEl) {
          this.containerEl[scrollProperty] = start + change * easeProgress;
        }
        if (timeElapsed < duration && this.containerEl) {
          requestAnimationFrame(animateScroll);
        }
      };
      requestAnimationFrame(animateScroll);
    } else {
      this.containerEl[scrollProperty] = newScrollPosition;
    }
  }
  centerActiveCard() {
    this.scrollToActiveCard(true);
  }
  scrollUp(count = 1) {
    if (!this.containerEl) return;
    if (this.isVertical) {
      const scrollAmount = this.getCardHeight() * count;
      this.containerEl.scrollBy({ top: -scrollAmount, behavior: "smooth" });
    } else {
      const scrollAmount = this.getCardWidth() * count;
      this.containerEl.scrollBy({ left: -scrollAmount, behavior: "smooth" });
    }
  }
  scrollDown(count = 1) {
    if (!this.containerEl) return;
    if (this.isVertical) {
      const scrollAmount = this.getCardHeight() * count;
      this.containerEl.scrollBy({ top: scrollAmount, behavior: "smooth" });
    } else {
      const scrollAmount = this.getCardWidth() * count;
      this.containerEl.scrollBy({ left: scrollAmount, behavior: "smooth" });
    }
  }
  scrollLeft(count = 1) {
    if (!this.containerEl) return;
    const scrollAmount = this.getCardWidth() * count;
    this.containerEl.scrollBy({ left: -scrollAmount, behavior: "smooth" });
  }
  scrollRight(count = 1) {
    if (!this.containerEl) return;
    const scrollAmount = this.getCardWidth() * count;
    this.containerEl.scrollBy({ left: scrollAmount, behavior: "smooth" });
  }
  getCardHeight() {
    if (!this.containerEl) return 0;
    const firstCard = this.containerEl.querySelector(".card-navigator-card");
    return firstCard ? firstCard.clientHeight : 0;
  }
  getCardWidth() {
    if (!this.containerEl) return 0;
    const firstCard = this.containerEl.querySelector(".card-navigator-card");
    return firstCard ? firstCard.clientWidth : 0;
  }
  scrollToCenter() {
    this.scrollToActiveCard();
  }
  displayCards(filteredFiles) {
  }
  async searchCards(searchTerm) {
    const activeFile = this.plugin.app.workspace.getActiveFile();
    if (!activeFile) return;
    const folder = activeFile.parent;
    if (!folder) return;
    const files = folder.children.filter((file) => file instanceof import_obsidian4.TFile);
    const filteredFiles = await this.filterFilesByContent(files, searchTerm);
    const cards = await Promise.all(filteredFiles.map((file) => this.cardMaker.createCard(file)));
    this.renderCards(cards);
  }
  async displayCardsForFolder(folder) {
    const files = folder.children.filter((file) => file instanceof import_obsidian4.TFile);
    const cards = await Promise.all(files.map((file) => this.cardMaker.createCard(file)));
    this.renderCards(cards);
  }
  async filterFilesByContent(files, searchTerm) {
    const lowercaseSearchTerm = searchTerm.toLowerCase();
    const filteredFiles = [];
    for (const file of files) {
      const content = await this.plugin.app.vault.cachedRead(file);
      if (file.basename.toLowerCase().includes(lowercaseSearchTerm) || content.toLowerCase().includes(lowercaseSearchTerm)) {
        filteredFiles.push(file);
      }
    }
    return filteredFiles;
  }
  async sortCards(criterion, order) {
    this.plugin.settings.sortCriterion = criterion;
    this.plugin.settings.sortOrder = order;
    await this.plugin.saveSettings();
    this.plugin.triggerRefresh();
  }
  onClose() {
  }
};

// src/ui/cardNavigator.ts
var VIEW_TYPE_CARD_NAVIGATOR = "card-navigator-view";
var CardNavigator = class extends import_obsidian5.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
    this.toolbar = new Toolbar(this.plugin);
    this.cardContainer = new CardContainer(this.plugin, this.leaf);
    this.isVertical = this.calculateIsVertical();
    this.resizeObserver = new ResizeObserver(this.handleResize.bind(this));
  }
  getViewType() {
    return VIEW_TYPE_CARD_NAVIGATOR;
  }
  getDisplayText() {
    return "Card Navigator";
  }
  getIcon() {
    return "layers-3";
  }
  calculateIsVertical() {
    const { width, height } = this.leaf.view.containerEl.getBoundingClientRect();
    const isVertical = height > width;
    this.cardContainer.setOrientation(isVertical);
    return isVertical;
  }
  handleResize() {
    const newIsVertical = this.calculateIsVertical();
    if (newIsVertical !== this.isVertical) {
      this.isVertical = newIsVertical;
      this.cardContainer.setOrientation(this.isVertical);
    }
  }
  updateLayoutAndRefresh() {
    this.isVertical = this.calculateIsVertical();
    this.cardContainer.setOrientation(this.isVertical);
    this.toolbar.setOrientation(this.isVertical);
    this.refresh();
  }
  handleKeyDown(event) {
    if (this.containerEl && this.containerEl.contains(document.activeElement)) {
      switch (event.key) {
        case "ArrowUp":
          this.cardContainer.scrollUp();
          event.preventDefault();
          break;
        case "ArrowDown":
          this.cardContainer.scrollDown();
          event.preventDefault();
          break;
        case "ArrowLeft":
          this.cardContainer.scrollLeft();
          event.preventDefault();
          break;
        case "ArrowRight":
          this.cardContainer.scrollRight();
          event.preventDefault();
          break;
        case "PageUp":
          if (this.isVertical) {
            this.cardContainer.scrollUp();
          } else {
            this.cardContainer.scrollLeft();
          }
          event.preventDefault();
          break;
        case "PageDown":
          if (this.isVertical) {
            this.cardContainer.scrollDown();
          } else {
            this.cardContainer.scrollRight();
          }
          event.preventDefault();
          break;
        case "Home":
          this.cardContainer.scrollToCenter();
          event.preventDefault();
          break;
      }
    }
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    const toolbarEl = container.createDiv("card-navigator-toolbar");
    const cardContainerEl = container.createDiv("card-container");
    this.toolbar.initialize(toolbarEl);
    this.cardContainer.initialize(cardContainerEl);
    this.isVertical = this.calculateIsVertical();
    this.updateLayoutAndRefresh();
    this.resizeObserver.observe(this.leaf.view.containerEl);
    this.registerDomEvent(this.containerEl, "keydown", this.handleKeyDown.bind(this));
    this.refresh();
    this.centerActiveCardOnOpen();
  }
  centerActiveCardOnOpen() {
    if (this.plugin.settings.centerActiveCardOnOpen) {
      setTimeout(() => {
        this.cardContainer.centerActiveCard();
      }, 300);
    }
  }
  async onClose() {
    this.resizeObserver.disconnect();
    this.toolbar.onClose();
    this.cardContainer.onClose();
    this.containerEl.removeEventListener("keydown", this.handleKeyDown.bind(this));
  }
  refresh() {
    this.toolbar.refresh();
    this.cardContainer.refresh();
  }
};

// src/ui/settingsTab.ts
var import_obsidian6 = require("obsidian");
var SettingTab = class extends import_obsidian6.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    const createSetting = (name, desc, settingKey) => {
      return new import_obsidian6.Setting(containerEl).setName(t(name)).setDesc(t(desc));
    };
    const updateSetting = async (settingKey, value) => {
      this.plugin.settings[settingKey] = value;
      await this.plugin.saveSettings();
      this.plugin.triggerRefresh();
    };
    createSetting(t("Cards per view"), t("Number of cards to display at once"), t("cardsPerView")).addSlider((slider) => slider.setLimits(1, 10, 1).setValue(this.plugin.settings.cardsPerView).setDynamicTooltip().onChange(async (value) => {
      await updateSetting("cardsPerView", value);
    }));
    createSetting(t("Folder Selection"), t("Choose whether to use the active file's folder or a selected folder"), t("useSelectedFolder")).addDropdown((dropdown) => dropdown.addOption(t("active"), t("Active File's Folder")).addOption(t("selected"), t("Selected Folder")).setValue(this.plugin.settings.useSelectedFolder ? t("selected") : t("active")).onChange(async (value) => {
      await updateSetting("useSelectedFolder", value === t("selected"));
      this.display();
    }));
    if (this.plugin.settings.useSelectedFolder) {
      createSetting(t("Select Folder"), t("Choose a folder for Card Navigator"), t("selectedFolder")).addButton((button) => button.setButtonText(this.plugin.settings.selectedFolder || t("Choose folder")).onClick(() => {
        new FolderSuggestModal(this.plugin, async (folder) => {
          await updateSetting("selectedFolder", folder.path);
          this.display();
        }).open();
      }));
    }
    createSetting(t("Default sort method"), t("Choose the default sorting method for cards"), t("sortCriterion")).addDropdown((dropdown) => {
      dropdown.addOption(t("fileName_asc"), t("File name (A to Z)")).addOption(t("fileName_desc"), t("File name (Z to A)")).addOption(t("lastModified_desc"), t("Last modified (newest first)")).addOption(t("lastModified_asc"), t("Last modified (oldest first)")).addOption(t("created_desc"), t("Created (newest first)")).addOption(t("created_asc"), t("Created (oldest first)")).setValue(`${this.plugin.settings.sortCriterion}_${this.plugin.settings.sortOrder}`).onChange(async (value) => {
        const [criterion, order] = value.split("_");
        await updateSetting("sortCriterion", criterion);
        await updateSetting("sortOrder", order);
      });
    });
    createSetting(t("Fixed Card Height"), t("If enabled, all cards will have the same height. If disabled, card height will adjust to content."), t("fixedCardHeight")).addToggle((toggle) => toggle.setValue(this.plugin.settings.fixedCardHeight).onChange(async (value) => {
      await updateSetting("fixedCardHeight", value);
    }));
    createSetting(t("Render Content as HTML"), t("If enabled, card content will be rendered as HTML"), t("renderContentAsHtml")).addToggle((toggle) => toggle.setValue(this.plugin.settings.renderContentAsHtml).onChange(async (value) => {
      await updateSetting("renderContentAsHtml", value);
    }));
    createSetting(t("Center Active Card on Open"), t("Automatically center the active card when opening the Card Navigator"), t("centerActiveCardOnOpen")).addToggle((toggle) => toggle.setValue(this.plugin.settings.centerActiveCardOnOpen).onChange(async (value) => {
      this.plugin.settings.centerActiveCardOnOpen = value;
      await this.plugin.saveSettings();
    }));
    createSetting(t("Drag and Drop Content"), t("When enabled, dragging a card will insert the note content instead of a link."), t("dragDropContent")).addToggle((toggle) => toggle.setValue(this.plugin.settings.dragDropContent).onChange(async (value) => {
      await updateSetting("dragDropContent", value);
    }));
    containerEl.createEl("h3", { text: t("Display items Settings") });
    const displaySettings = [
      { name: t("Show File Name"), key: "showFileName" },
      { name: t("Show First Header"), key: "showFirstHeader" },
      { name: t("Show Content"), key: "showContent" }
    ];
    displaySettings.forEach(({ name, key }) => {
      createSetting(name, t(`Toggle to display or hide the ${name.toLowerCase()} on cards`), key).addToggle((toggle) => toggle.setValue(this.plugin.settings[key]).onChange(async (value) => {
        await updateSetting(key, value);
      }));
    });
    const fontSizeSettings = [
      { name: t("File Name Size"), key: "fileNameSize", min: 15, max: 25 },
      { name: t("First Header Size"), key: "firstHeaderSize", min: 15, max: 25 },
      { name: t("Content Size"), key: "contentSize", min: 10, max: 20 }
    ];
    fontSizeSettings.forEach(({ name, key, min, max }) => {
      createSetting(name, t(`Set the font size for the ${name.toLowerCase()}`), key).addSlider((slider) => slider.setLimits(min, max, 1).setValue(this.plugin.settings[key]).setDynamicTooltip().onChange(async (value) => {
        await updateSetting(key, value);
      }));
    });
    createSetting(t("Content Length"), t("Maximum content length displayed on each card"), t("contentLength")).addSlider((slider) => slider.setLimits(1, 10, 1).setValue(this.plugin.settings.contentLength).setDynamicTooltip().onChange(async (value) => {
      await updateSetting("contentLength", value);
    }));
  }
};

// src/common/settings.ts
var DEFAULT_SETTINGS = {
  cardsPerView: 6,
  useSelectedFolder: false,
  selectedFolder: null,
  sortCriterion: "fileName",
  sortOrder: "asc",
  fixedCardHeight: true,
  renderContentAsHtml: false,
  centerActiveCardOnOpen: true,
  centerCardMethod: "scroll",
  animationDuration: 300,
  centerActiveCardHotkey: { modifiers: ["Ctrl", "Mod"], key: "Home" },
  activeCardBorderColor: "var(--active-border-color)",
  activeCardBackgroundColor: "var(--active-background-color)",
  dragDropContent: false,
  showFileName: true,
  fileNameSize: 20,
  showFirstHeader: true,
  firstHeaderSize: 18,
  showContent: true,
  contentSize: 15,
  contentLength: 5
};

// src/locales/en.json
var en_default = {
  "Cards per view": "Cards per view",
  "Number of cards to display at once": "Number of cards to display at once",
  "Folder Selection": "Folder Selection",
  "Choose whether to use the active file's folder or a selected folder": "Choose whether to use the active file's folder or a selected folder",
  "Active File's Folder": "Active File's Folder",
  "Selected Folder": "Selected Folder",
  "Select Folder": "Select Folder",
  "Choose a folder for Card Navigator": "Choose a folder for Card Navigator",
  "Choose folder": "Choose folder",
  "Default sort method": "Default sort method",
  "Choose the default sorting method for cards": "Choose the default sorting method for cards",
  "File name (A to Z)": "File name (A to Z)",
  "File name (Z to A)": "File name (Z to A)",
  "Last modified (newest first)": "Last modified (newest first)",
  "Last modified (oldest first)": "Last modified (oldest first)",
  "Created (newest first)": "Created (newest first)",
  "Created (oldest first)": "Created (oldest first)",
  "Fixed Card Height": "Fixed Card Height",
  "If enabled, all cards will have the same height. If disabled, card height will adjust to content.": "If enabled, all cards will have the same height. If disabled, card height will adjust to content.",
  "Render Content as HTML": "Render Content as HTML",
  "If enabled, card content will be rendered as HTML": "If enabled, card content will be rendered as HTML",
  "Center Active Card on Open": "Center Active Card on Open",
  "Automatically center the active card when opening the Card Navigator": "Automatically center the active card when opening the Card Navigator",
  "Drag and Drop Content": "Drag and Drop Content",
  "When enabled, dragging a card will insert the note content instead of a link.": "When enabled, dragging a card will insert the note content instead of a link.",
  "Display items Settings": "Display items Settings",
  "Show File Name": "Show File Name",
  "Show First Header": "Show First Header",
  "Show Content": "Show Content",
  "Toggle to display or hide the file name on cards": "Toggle to display or hide the file name on cards",
  "Toggle to display or hide the first header on cards": "Toggle to display or hide the first header on cards",
  "Toggle to display or hide the content on cards": "Toggle to display or hide the content on cards",
  "File Name Size": "File Name Size",
  "First Header Size": "First Header Size",
  "Content Size": "Content Size",
  "Set the font size for the file name": "Set the font size for the file name",
  "Set the font size for the first header": "Set the font size for the first header",
  "Set the font size for the content": "Set the font size for the content",
  "Content Length": "Content Length",
  "Maximum content length displayed on each card": "Maximum content length displayed on each card"
};

// src/locales/ko.json
var ko_default = {
  "Cards per view": "\uD654\uBA74\uB2F9 \uCE74\uB4DC \uC218",
  "Number of cards to display at once": "\uD55C \uBC88\uC5D0 \uD45C\uC2DC\uD560 \uCE74\uB4DC \uC218",
  "Folder Selection": "\uD3F4\uB354 \uC120\uD0DD",
  "Choose whether to use the active file's folder or a selected folder": "\uD65C\uC131 \uD30C\uC77C\uC758 \uD3F4\uB354 \uB610\uB294 \uC120\uD0DD\uD55C \uD3F4\uB354 \uC911 \uC0AC\uC6A9\uD560 \uD3F4\uB354 \uC120\uD0DD",
  "Active File's Folder": "\uD65C\uC131 \uD30C\uC77C\uC758 \uD3F4\uB354",
  "Selected Folder": "\uC120\uD0DD\uD55C \uD3F4\uB354",
  "Select Folder": "\uD3F4\uB354 \uC120\uD0DD",
  "Choose a folder for Card Navigator": "Card Navigator\uC6A9 \uD3F4\uB354 \uC120\uD0DD",
  "Choose folder": "\uD3F4\uB354 \uC120\uD0DD",
  "Default sort method": "\uAE30\uBCF8 \uC815\uB82C \uBC29\uC2DD",
  "Choose the default sorting method for cards": "\uCE74\uB4DC\uC758 \uAE30\uBCF8 \uC815\uB82C \uBC29\uC2DD \uC120\uD0DD",
  "File name (A to Z)": "\uD30C\uC77C\uBA85 (\uAC00\uB098\uB2E4\uC21C)",
  "File name (Z to A)": "\uD30C\uC77C\uBA85 (\uC5ED\uAC00\uB098\uB2E4\uC21C)",
  "Last modified (newest first)": "\uCD5C\uC885 \uC218\uC815\uC77C (\uCD5C\uC2E0\uC21C)",
  "Last modified (oldest first)": "\uCD5C\uC885 \uC218\uC815\uC77C (\uC624\uB798\uB41C \uC21C)",
  "Created (newest first)": "\uC0DD\uC131\uC77C (\uCD5C\uC2E0\uC21C)",
  "Created (oldest first)": "\uC0DD\uC131\uC77C (\uC624\uB798\uB41C \uC21C)",
  "Fixed Card Height": "\uACE0\uC815 \uCE74\uB4DC \uB192\uC774",
  "If enabled, all cards will have the same height. If disabled, card height will adjust to content.": "\uD65C\uC131\uD654\uD558\uBA74 \uBAA8\uB4E0 \uCE74\uB4DC\uC758 \uB192\uC774\uAC00 \uB3D9\uC77C\uD569\uB2C8\uB2E4. \uBE44\uD65C\uC131\uD654\uD558\uBA74 \uCE74\uB4DC \uB192\uC774\uAC00 \uB0B4\uC6A9\uC5D0 \uB9DE\uAC8C \uC870\uC815\uB429\uB2C8\uB2E4.",
  "Render Content as HTML": "\uB0B4\uC6A9\uC744 HTML\uB85C \uB80C\uB354\uB9C1",
  "If enabled, card content will be rendered as HTML": "\uD65C\uC131\uD654\uD558\uBA74 \uCE74\uB4DC \uB0B4\uC6A9\uC774 HTML\uB85C \uB80C\uB354\uB9C1\uB429\uB2C8\uB2E4",
  "Center Active Card on Open": "\uC5F4 \uB54C \uD65C\uC131 \uCE74\uB4DC \uC911\uC559 \uC815\uB82C",
  "Automatically center the active card when opening the Card Navigator": "Card Navigator\uB97C \uC5F4 \uB54C \uD65C\uC131 \uCE74\uB4DC\uB97C \uC790\uB3D9\uC73C\uB85C \uC911\uC559\uC5D0 \uC704\uCE58\uC2DC\uD0B5\uB2C8\uB2E4",
  "Drag and Drop Content": "\uB0B4\uC6A9 \uB4DC\uB798\uADF8 \uC564 \uB4DC\uB86D",
  "When enabled, dragging a card will insert the note content instead of a link.": "\uD65C\uC131\uD654\uD558\uBA74 \uCE74\uB4DC\uB97C \uB4DC\uB798\uADF8\uD560 \uB54C \uB9C1\uD06C \uB300\uC2E0 \uB178\uD2B8 \uB0B4\uC6A9\uC774 \uC0BD\uC785\uB429\uB2C8\uB2E4.",
  "Display items Settings": "\uD45C\uC2DC \uD56D\uBAA9 \uC124\uC815",
  "Show File Name": "\uD30C\uC77C\uBA85 \uD45C\uC2DC",
  "Show First Header": "\uCCAB \uBC88\uC9F8 \uD5E4\uB354 \uD45C\uC2DC",
  "Show Content": "\uB0B4\uC6A9 \uD45C\uC2DC",
  "Toggle to display or hide the file name on cards": "\uCE74\uB4DC\uC5D0 \uD30C\uC77C\uBA85\uC744 \uD45C\uC2DC\uD558\uAC70\uB098 \uC228\uAE30\uB294 \uD1A0\uAE00",
  "Toggle to display or hide the first header on cards": "\uCE74\uB4DC\uC5D0 \uCCAB \uBC88\uC9F8 \uD5E4\uB354\uB97C \uD45C\uC2DC\uD558\uAC70\uB098 \uC228\uAE30\uB294 \uD1A0\uAE00",
  "Toggle to display or hide the content on cards": "\uCE74\uB4DC\uC5D0 \uB0B4\uC6A9\uC744 \uD45C\uC2DC\uD558\uAC70\uB098 \uC228\uAE30\uB294 \uD1A0\uAE00",
  "File Name Size": "\uD30C\uC77C\uBA85 \uD06C\uAE30",
  "First Header Size": "\uCCAB \uBC88\uC9F8 \uD5E4\uB354 \uD06C\uAE30",
  "Content Size": "\uB0B4\uC6A9 \uD06C\uAE30",
  "Set the font size for the file name": "\uD30C\uC77C\uBA85\uC758 \uAE00\uAF34 \uD06C\uAE30 \uC124\uC815",
  "Set the font size for the first header": "\uCCAB \uBC88\uC9F8 \uD5E4\uB354\uC758 \uAE00\uAF34 \uD06C\uAE30 \uC124\uC815",
  "Set the font size for the content": "\uB0B4\uC6A9\uC758 \uAE00\uAF34 \uD06C\uAE30 \uC124\uC815",
  "Content Length": "\uB0B4\uC6A9 \uAE38\uC774",
  "Maximum content length displayed on each card": "\uAC01 \uCE74\uB4DC\uC5D0 \uD45C\uC2DC\uB418\uB294 \uCD5C\uB300 \uB0B4\uC6A9 \uAE38\uC774"
};

// src/main.ts
var languageResources = {
  en: { translation: en_default },
  ko: { translation: ko_default }
};
var translationLanguage = Object.keys(languageResources).find((i) => i == import_obsidian7.moment.locale()) ? import_obsidian7.moment.locale() : "en";
var CardNavigatorPlugin = class extends import_obsidian7.Plugin {
  constructor() {
    super(...arguments);
    this.settings = DEFAULT_SETTINGS;
    this.selectedFolder = null;
    this.refreshDebounced = () => {
    };
  }
  async onload() {
    await this.loadSettings();
    instance.init({
      lng: translationLanguage,
      fallbackLng: "en",
      resources: languageResources
    });
    this.addSettingTab(new SettingTab(this.app, this));
    this.registerView(
      VIEW_TYPE_CARD_NAVIGATOR,
      (leaf) => new CardNavigator(leaf, this)
    );
    this.addRibbonIcon("layers-3", "Activate Card Navigator", () => {
      this.activateView();
    });
    this.addCommand({
      id: "scroll-up-one-card",
      name: "Scroll Up One Card",
      callback: () => this.scrollCards("up", 1),
      hotkeys: [{ modifiers: ["Ctrl", "Mod"], key: "ArrowUp" }]
    });
    this.addCommand({
      id: "scroll-down-one-card",
      name: "Scroll Down One Card",
      callback: () => this.scrollCards("down", 1),
      hotkeys: [{ modifiers: ["Ctrl", "Mod"], key: "ArrowDown" }]
    });
    this.addCommand({
      id: "scroll-left-one-card",
      name: "Scroll Left One Card",
      callback: () => this.scrollCards("left", 1),
      hotkeys: [{ modifiers: ["Ctrl", "Mod"], key: "ArrowLeft" }]
    });
    this.addCommand({
      id: "scroll-right-one-card",
      name: "Scroll Right One Card",
      callback: () => this.scrollCards("right", 1),
      hotkeys: [{ modifiers: ["Ctrl", "Mod"], key: "ArrowRight" }]
    });
    this.addCommand({
      id: "scroll-up-page",
      name: "Scroll Up One Page",
      callback: () => this.scrollCards("up", this.settings.cardsPerView),
      hotkeys: [{ modifiers: ["Ctrl", "Mod"], key: "PageUp" }]
    });
    this.addCommand({
      id: "scroll-down-page",
      name: "Scroll Down One Page",
      callback: () => this.scrollCards("down", this.settings.cardsPerView),
      hotkeys: [{ modifiers: ["Ctrl", "Mod"], key: "PageDown" }]
    });
    this.addCommand({
      id: "center-active-card",
      name: "Center Active Card",
      callback: () => {
        const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR);
        for (const leaf of leaves) {
          if (leaf.view instanceof CardNavigator) {
            leaf.view.cardContainer.centerActiveCard();
          }
        }
      },
      hotkeys: this.settings.centerActiveCardHotkey ? [this.settings.centerActiveCardHotkey] : []
    });
    this.app.workspace.onLayoutReady(() => {
      this.activateView();
    });
    this.refreshDebounced = (0, import_obsidian7.debounce)(this.refreshViews.bind(this), 100, true);
  }
  async onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    this.updateHotkey();
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.refreshDebounced();
    this.updateHotkey();
  }
  updateHotkey() {
    const command = this.app.commands.commands["card-navigator-plugin:center-active-card"];
    if (command) {
      command.hotkeys = this.settings.centerActiveCardHotkey ? [this.settings.centerActiveCardHotkey] : [];
    }
  }
  scrollCards(direction, count) {
    const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR);
    for (const leaf of leaves) {
      if (leaf.view instanceof CardNavigator) {
        const { cardContainer } = leaf.view;
        const isVertical = cardContainer.isVertical;
        switch (direction) {
          case "up":
            isVertical ? cardContainer.scrollUp(count) : cardContainer.scrollLeft(count);
            break;
          case "down":
            isVertical ? cardContainer.scrollDown(count) : cardContainer.scrollRight(count);
            break;
          case "left":
            cardContainer.scrollLeft(count);
            break;
          case "right":
            cardContainer.scrollRight(count);
            break;
        }
      }
    }
  }
  refreshViews() {
    const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR);
    leaves.forEach((leaf) => {
      if (leaf.view instanceof CardNavigator) {
        leaf.view.updateLayoutAndRefresh();
      }
    });
  }
  displayFilteredCards(filteredFiles) {
    var _a;
    const view = (_a = this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR)[0]) == null ? void 0 : _a.view;
    if (view) {
      view.cardContainer.displayCards(filteredFiles);
    }
  }
  sortCards(criterion, order) {
    var _a;
    const view = (_a = this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR)[0]) == null ? void 0 : _a.view;
    if (view) {
      view.cardContainer.sortCards(criterion, order);
    }
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR)[0];
    if (!leaf) {
      const rightLeaf = workspace.getRightLeaf(false);
      if (rightLeaf) {
        await rightLeaf.setViewState({ type: VIEW_TYPE_CARD_NAVIGATOR, active: true });
        leaf = workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR)[0];
      }
    }
    if (leaf) {
      workspace.revealLeaf(leaf);
    }
  }
  triggerRefresh() {
    this.refreshDebounced();
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL3VpL2NhcmROYXZpZ2F0b3IudHMiLCAic3JjL3VpL3Rvb2xiYXIvdG9vbGJhci50cyIsICJzcmMvdWkvdG9vbGJhci90b29sYmFyQWN0aW9ucy50cyIsICJub2RlX21vZHVsZXMvaTE4bmV4dC9kaXN0L2VzbS9pMThuZXh0LmpzIiwgInNyYy91aS9jYXJkQ29udGFpbmVyL2NhcmRDb250YWluZXIudHMiLCAic3JjL3VpL2NhcmRDb250YWluZXIvY2FyZE1ha2VyLnRzIiwgInNyYy9jb21tb24vdXRpbHMudHMiLCAic3JjL3VpL3NldHRpbmdzVGFiLnRzIiwgInNyYy9jb21tb24vc2V0dGluZ3MudHMiLCAic3JjL2xvY2FsZXMvZW4uanNvbiIsICJzcmMvbG9jYWxlcy9rby5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvLyBzcmMvbWFpbi50c1xuXG5pbXBvcnQgeyBQbHVnaW4sIFRGaWxlLCBkZWJvdW5jZSwgbW9tZW50IH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgQ2FyZE5hdmlnYXRvciwgVklFV19UWVBFX0NBUkRfTkFWSUdBVE9SIH0gZnJvbSAnLi91aS9jYXJkTmF2aWdhdG9yJztcbmltcG9ydCB7IFNldHRpbmdUYWIgfSBmcm9tICcuL3VpL3NldHRpbmdzVGFiJztcbmltcG9ydCB7IENhcmROYXZpZ2F0b3JTZXR0aW5ncywgU29ydENyaXRlcmlvbiB9IGZyb20gJy4vY29tbW9uL3R5cGVzJztcbmltcG9ydCB7IERFRkFVTFRfU0VUVElOR1MgfSBmcm9tICcuL2NvbW1vbi9zZXR0aW5ncyc7XG5pbXBvcnQgaTE4bmV4dCBmcm9tICdpMThuZXh0JztcblxuaW1wb3J0IGVuIGZyb20gJy4vbG9jYWxlcy9lbi5qc29uJ1xuaW1wb3J0IGtvIGZyb20gJy4vbG9jYWxlcy9rby5qc29uJztcblxuZXhwb3J0IGNvbnN0IGxhbmd1YWdlUmVzb3VyY2VzID0ge1xuXHRlbjogeyB0cmFuc2xhdGlvbjogZW4gfSxcblx0a286IHsgdHJhbnNsYXRpb246IGtvIH0sXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgY29uc3QgdHJhbnNsYXRpb25MYW5ndWFnZSA9IE9iamVjdC5rZXlzKGxhbmd1YWdlUmVzb3VyY2VzKS5maW5kKGkgPT4gaT09bW9tZW50LmxvY2FsZSgpKSA/IG1vbWVudC5sb2NhbGUoKSA6IFwiZW5cIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZE5hdmlnYXRvclBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gICAgc2V0dGluZ3M6IENhcmROYXZpZ2F0b3JTZXR0aW5ncyA9IERFRkFVTFRfU0VUVElOR1M7XG4gICAgc2VsZWN0ZWRGb2xkZXI6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICAgIHB1YmxpYyBjb250YWluZXJFbDogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ7XG4gICAgcHJpdmF0ZSByZWZyZXNoRGVib3VuY2VkOiAoKSA9PiB2b2lkID0gKCkgPT4ge307XG5cbiAgICBhc3luYyBvbmxvYWQoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG5cblx0XHRpMThuZXh0LmluaXQoe1xuXHRcdFx0bG5nOiB0cmFuc2xhdGlvbkxhbmd1YWdlLFxuXHRcdFx0ZmFsbGJhY2tMbmc6IFwiZW5cIixcblx0XHRcdHJlc291cmNlczogbGFuZ3VhZ2VSZXNvdXJjZXMsXG5cdFx0fSk7XG5cblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IFNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcblxuICAgICAgICB0aGlzLnJlZ2lzdGVyVmlldyhcbiAgICAgICAgICAgIFZJRVdfVFlQRV9DQVJEX05BVklHQVRPUixcbiAgICAgICAgICAgIChsZWFmKSA9PiBuZXcgQ2FyZE5hdmlnYXRvcihsZWFmLCB0aGlzKVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuYWRkUmliYm9uSWNvbignbGF5ZXJzLTMnLCAnQWN0aXZhdGUgQ2FyZCBOYXZpZ2F0b3InLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFjdGl2YXRlVmlldygpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgICAgICAgaWQ6ICdzY3JvbGwtdXAtb25lLWNhcmQnLFxuICAgICAgICAgICAgbmFtZTogJ1Njcm9sbCBVcCBPbmUgQ2FyZCcsXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4gdGhpcy5zY3JvbGxDYXJkcygndXAnLCAxKSxcbiAgICAgICAgICAgIGhvdGtleXM6IFt7IG1vZGlmaWVyczogWydDdHJsJywgJ01vZCddLCBrZXk6ICdBcnJvd1VwJyB9XVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgICAgICAgaWQ6ICdzY3JvbGwtZG93bi1vbmUtY2FyZCcsXG4gICAgICAgICAgICBuYW1lOiAnU2Nyb2xsIERvd24gT25lIENhcmQnLFxuICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHRoaXMuc2Nyb2xsQ2FyZHMoJ2Rvd24nLCAxKSxcbiAgICAgICAgICAgIGhvdGtleXM6IFt7IG1vZGlmaWVyczogWydDdHJsJywgJ01vZCddLCBrZXk6ICdBcnJvd0Rvd24nIH1dXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICBpZDogJ3Njcm9sbC1sZWZ0LW9uZS1jYXJkJyxcbiAgICAgICAgICAgIG5hbWU6ICdTY3JvbGwgTGVmdCBPbmUgQ2FyZCcsXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4gdGhpcy5zY3JvbGxDYXJkcygnbGVmdCcsIDEpLFxuICAgICAgICAgICAgaG90a2V5czogW3sgbW9kaWZpZXJzOiBbJ0N0cmwnLCAnTW9kJ10sIGtleTogJ0Fycm93TGVmdCcgfV1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiAnc2Nyb2xsLXJpZ2h0LW9uZS1jYXJkJyxcbiAgICAgICAgICAgIG5hbWU6ICdTY3JvbGwgUmlnaHQgT25lIENhcmQnLFxuICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHRoaXMuc2Nyb2xsQ2FyZHMoJ3JpZ2h0JywgMSksXG4gICAgICAgICAgICBob3RrZXlzOiBbeyBtb2RpZmllcnM6IFsnQ3RybCcsICdNb2QnXSwga2V5OiAnQXJyb3dSaWdodCcgfV1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiAnc2Nyb2xsLXVwLXBhZ2UnLFxuICAgICAgICAgICAgbmFtZTogJ1Njcm9sbCBVcCBPbmUgUGFnZScsXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4gdGhpcy5zY3JvbGxDYXJkcygndXAnLCB0aGlzLnNldHRpbmdzLmNhcmRzUGVyVmlldyksXG4gICAgICAgICAgICBob3RrZXlzOiBbeyBtb2RpZmllcnM6IFsnQ3RybCcsICdNb2QnXSwga2V5OiAnUGFnZVVwJyB9XVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgICAgICAgaWQ6ICdzY3JvbGwtZG93bi1wYWdlJyxcbiAgICAgICAgICAgIG5hbWU6ICdTY3JvbGwgRG93biBPbmUgUGFnZScsXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4gdGhpcy5zY3JvbGxDYXJkcygnZG93bicsIHRoaXMuc2V0dGluZ3MuY2FyZHNQZXJWaWV3KSxcbiAgICAgICAgICAgIGhvdGtleXM6IFt7IG1vZGlmaWVyczogWydDdHJsJywgJ01vZCddLCBrZXk6ICdQYWdlRG93bicgfV1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiAnY2VudGVyLWFjdGl2ZS1jYXJkJyxcbiAgICAgICAgICAgIG5hbWU6ICdDZW50ZXIgQWN0aXZlIENhcmQnLFxuICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBsZWF2ZXMgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKFZJRVdfVFlQRV9DQVJEX05BVklHQVRPUik7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBsZWFmIG9mIGxlYXZlcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAobGVhZi52aWV3IGluc3RhbmNlb2YgQ2FyZE5hdmlnYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVhZi52aWV3LmNhcmRDb250YWluZXIuY2VudGVyQWN0aXZlQ2FyZCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhvdGtleXM6IHRoaXMuc2V0dGluZ3MuY2VudGVyQWN0aXZlQ2FyZEhvdGtleSA/IFt0aGlzLnNldHRpbmdzLmNlbnRlckFjdGl2ZUNhcmRIb3RrZXldIDogW11cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hcHAud29ya3NwYWNlLm9uTGF5b3V0UmVhZHkoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hY3RpdmF0ZVZpZXcoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBkZWJvdW5jZWQgcmVmcmVzaCBmdW5jdGlvblxuICAgICAgICB0aGlzLnJlZnJlc2hEZWJvdW5jZWQgPSBkZWJvdW5jZSh0aGlzLnJlZnJlc2hWaWV3cy5iaW5kKHRoaXMpLCAxMDAsIHRydWUpO1xuICAgIH1cblxuICAgIGFzeW5jIG9udW5sb2FkKCkge1xuICAgICAgICB0aGlzLmFwcC53b3Jrc3BhY2UuZGV0YWNoTGVhdmVzT2ZUeXBlKFZJRVdfVFlQRV9DQVJEX05BVklHQVRPUik7XG4gICAgfVxuXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcblx0XHR0aGlzLnVwZGF0ZUhvdGtleSgpO1xuXHR9XG5cbiAgICBhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG4gICAgICAgIHRoaXMucmVmcmVzaERlYm91bmNlZCgpO1xuXHRcdHRoaXMudXBkYXRlSG90a2V5KCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVIb3RrZXkoKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHRoaXMuYXBwLmNvbW1hbmRzLmNvbW1hbmRzWydjYXJkLW5hdmlnYXRvci1wbHVnaW46Y2VudGVyLWFjdGl2ZS1jYXJkJ107XG4gICAgICAgIGlmIChjb21tYW5kKSB7XG4gICAgICAgICAgICBjb21tYW5kLmhvdGtleXMgPSB0aGlzLnNldHRpbmdzLmNlbnRlckFjdGl2ZUNhcmRIb3RrZXkgPyBbdGhpcy5zZXR0aW5ncy5jZW50ZXJBY3RpdmVDYXJkSG90a2V5XSA6IFtdO1xuICAgICAgICB9XG4gICAgfVxuXG5cdHByaXZhdGUgc2Nyb2xsQ2FyZHMoZGlyZWN0aW9uOiAndXAnIHwgJ2Rvd24nIHwgJ2xlZnQnIHwgJ3JpZ2h0JywgY291bnQ6IG51bWJlcikge1xuXHRcdGNvbnN0IGxlYXZlcyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoVklFV19UWVBFX0NBUkRfTkFWSUdBVE9SKTtcblx0XHRmb3IgKGNvbnN0IGxlYWYgb2YgbGVhdmVzKSB7XG5cdFx0XHRpZiAobGVhZi52aWV3IGluc3RhbmNlb2YgQ2FyZE5hdmlnYXRvcikge1xuXHRcdFx0XHRjb25zdCB7IGNhcmRDb250YWluZXIgfSA9IGxlYWYudmlldztcblx0XHRcdFx0Y29uc3QgaXNWZXJ0aWNhbCA9IGNhcmRDb250YWluZXIuaXNWZXJ0aWNhbDtcblx0XG5cdFx0XHRcdHN3aXRjaCAoZGlyZWN0aW9uKSB7XG5cdFx0XHRcdFx0Y2FzZSAndXAnOlxuXHRcdFx0XHRcdFx0aXNWZXJ0aWNhbCA/IGNhcmRDb250YWluZXIuc2Nyb2xsVXAoY291bnQpIDogY2FyZENvbnRhaW5lci5zY3JvbGxMZWZ0KGNvdW50KTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2Rvd24nOlxuXHRcdFx0XHRcdFx0aXNWZXJ0aWNhbCA/IGNhcmRDb250YWluZXIuc2Nyb2xsRG93bihjb3VudCkgOiBjYXJkQ29udGFpbmVyLnNjcm9sbFJpZ2h0KGNvdW50KTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2xlZnQnOlxuXHRcdFx0XHRcdFx0Y2FyZENvbnRhaW5lci5zY3JvbGxMZWZ0KGNvdW50KTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3JpZ2h0Jzpcblx0XHRcdFx0XHRcdGNhcmRDb250YWluZXIuc2Nyb2xsUmlnaHQoY291bnQpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuICAgIHJlZnJlc2hWaWV3cygpIHtcbiAgICAgICAgY29uc3QgbGVhdmVzID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZShWSUVXX1RZUEVfQ0FSRF9OQVZJR0FUT1IpO1xuICAgICAgICBsZWF2ZXMuZm9yRWFjaCgobGVhZikgPT4ge1xuICAgICAgICAgICAgaWYgKGxlYWYudmlldyBpbnN0YW5jZW9mIENhcmROYXZpZ2F0b3IpIHtcbiAgICAgICAgICAgICAgICBsZWFmLnZpZXcudXBkYXRlTGF5b3V0QW5kUmVmcmVzaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBkaXNwbGF5RmlsdGVyZWRDYXJkcyhmaWx0ZXJlZEZpbGVzOiBURmlsZVtdKSB7XG4gICAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKFZJRVdfVFlQRV9DQVJEX05BVklHQVRPUilbMF0/LnZpZXcgYXMgQ2FyZE5hdmlnYXRvcjtcbiAgICAgICAgaWYgKHZpZXcpIHtcbiAgICAgICAgICAgIHZpZXcuY2FyZENvbnRhaW5lci5kaXNwbGF5Q2FyZHMoZmlsdGVyZWRGaWxlcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzb3J0Q2FyZHMoY3JpdGVyaW9uOiBTb3J0Q3JpdGVyaW9uLCBvcmRlcjogJ2FzYycgfCAnZGVzYycpIHtcbiAgICAgICAgY29uc3QgdmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoVklFV19UWVBFX0NBUkRfTkFWSUdBVE9SKVswXT8udmlldyBhcyBDYXJkTmF2aWdhdG9yO1xuICAgICAgICBpZiAodmlldykge1xuICAgICAgICAgICAgdmlldy5jYXJkQ29udGFpbmVyLnNvcnRDYXJkcyhjcml0ZXJpb24sIG9yZGVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGFjdGl2YXRlVmlldygpIHtcbiAgICAgICAgY29uc3QgeyB3b3Jrc3BhY2UgfSA9IHRoaXMuYXBwO1xuICAgICAgICBsZXQgbGVhZiA9IHdvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoVklFV19UWVBFX0NBUkRfTkFWSUdBVE9SKVswXTtcblxuICAgICAgICBpZiAoIWxlYWYpIHtcbiAgICAgICAgICAgIGNvbnN0IHJpZ2h0TGVhZiA9IHdvcmtzcGFjZS5nZXRSaWdodExlYWYoZmFsc2UpO1xuICAgICAgICAgICAgaWYgKHJpZ2h0TGVhZikge1xuICAgICAgICAgICAgICAgIGF3YWl0IHJpZ2h0TGVhZi5zZXRWaWV3U3RhdGUoeyB0eXBlOiBWSUVXX1RZUEVfQ0FSRF9OQVZJR0FUT1IsIGFjdGl2ZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICBsZWFmID0gd29ya3NwYWNlLmdldExlYXZlc09mVHlwZShWSUVXX1RZUEVfQ0FSRF9OQVZJR0FUT1IpWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxlYWYpIHtcbiAgICAgICAgICAgIHdvcmtzcGFjZS5yZXZlYWxMZWFmKGxlYWYpO1xuICAgICAgICB9XG4gICAgfVxuXHRcbiAgICB0cmlnZ2VyUmVmcmVzaCgpIHtcbiAgICAgICAgdGhpcy5yZWZyZXNoRGVib3VuY2VkKCk7XG4gICAgfVxufVxuIiwgIi8vIHNyYy91aS9jYXJkTmF2aWdhdG9yLnRzXG5cbmltcG9ydCB7IEl0ZW1WaWV3LCBXb3Jrc3BhY2VMZWFmIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgQ2FyZE5hdmlnYXRvclBsdWdpbiBmcm9tICcuLi9tYWluJztcbmltcG9ydCB7IFRvb2xiYXIgfSBmcm9tICcuL3Rvb2xiYXIvdG9vbGJhcic7XG5pbXBvcnQgeyBDYXJkQ29udGFpbmVyIH0gZnJvbSAnLi9jYXJkQ29udGFpbmVyL2NhcmRDb250YWluZXInO1xuXG5leHBvcnQgY29uc3QgVklFV19UWVBFX0NBUkRfTkFWSUdBVE9SID0gXCJjYXJkLW5hdmlnYXRvci12aWV3XCI7XG5cbmV4cG9ydCBjbGFzcyBDYXJkTmF2aWdhdG9yIGV4dGVuZHMgSXRlbVZpZXcge1xuICAgIHByaXZhdGUgcGx1Z2luOiBDYXJkTmF2aWdhdG9yUGx1Z2luO1xuICAgIHB1YmxpYyB0b29sYmFyOiBUb29sYmFyO1xuICAgIHB1YmxpYyBjYXJkQ29udGFpbmVyOiBDYXJkQ29udGFpbmVyO1xuICAgIHByaXZhdGUgcmVzaXplT2JzZXJ2ZXI6IFJlc2l6ZU9ic2VydmVyO1xuICAgIHByaXZhdGUgaXNWZXJ0aWNhbDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKGxlYWY6IFdvcmtzcGFjZUxlYWYsIHBsdWdpbjogQ2FyZE5hdmlnYXRvclBsdWdpbikge1xuICAgICAgICBzdXBlcihsZWFmKTtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgICAgIHRoaXMudG9vbGJhciA9IG5ldyBUb29sYmFyKHRoaXMucGx1Z2luKTtcbiAgICAgICAgdGhpcy5jYXJkQ29udGFpbmVyID0gbmV3IENhcmRDb250YWluZXIodGhpcy5wbHVnaW4sIHRoaXMubGVhZik7XG4gICAgICAgIHRoaXMuaXNWZXJ0aWNhbCA9IHRoaXMuY2FsY3VsYXRlSXNWZXJ0aWNhbCgpO1xuICAgICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKHRoaXMuaGFuZGxlUmVzaXplLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIGdldFZpZXdUeXBlKCkge1xuICAgICAgICByZXR1cm4gVklFV19UWVBFX0NBUkRfTkFWSUdBVE9SO1xuICAgIH1cblxuICAgIGdldERpc3BsYXlUZXh0KCkge1xuICAgICAgICByZXR1cm4gXCJDYXJkIE5hdmlnYXRvclwiO1xuICAgIH1cblxuICAgIGdldEljb24oKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwibGF5ZXJzLTNcIjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNhbGN1bGF0ZUlzVmVydGljYWwoKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gdGhpcy5sZWFmLnZpZXcuY29udGFpbmVyRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGNvbnN0IGlzVmVydGljYWwgPSBoZWlnaHQgPiB3aWR0aDtcbiAgICAgICAgdGhpcy5jYXJkQ29udGFpbmVyLnNldE9yaWVudGF0aW9uKGlzVmVydGljYWwpO1xuICAgICAgICByZXR1cm4gaXNWZXJ0aWNhbDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZVJlc2l6ZSgpIHtcbiAgICAgICAgY29uc3QgbmV3SXNWZXJ0aWNhbCA9IHRoaXMuY2FsY3VsYXRlSXNWZXJ0aWNhbCgpO1xuICAgICAgICBpZiAobmV3SXNWZXJ0aWNhbCAhPT0gdGhpcy5pc1ZlcnRpY2FsKSB7XG4gICAgICAgICAgICB0aGlzLmlzVmVydGljYWwgPSBuZXdJc1ZlcnRpY2FsO1xuICAgICAgICAgICAgdGhpcy5jYXJkQ29udGFpbmVyLnNldE9yaWVudGF0aW9uKHRoaXMuaXNWZXJ0aWNhbCk7XG4gICAgICAgIH1cbiAgICB9XG5cblx0cHVibGljIHVwZGF0ZUxheW91dEFuZFJlZnJlc2goKSB7XG4gICAgICAgIHRoaXMuaXNWZXJ0aWNhbCA9IHRoaXMuY2FsY3VsYXRlSXNWZXJ0aWNhbCgpO1xuICAgICAgICB0aGlzLmNhcmRDb250YWluZXIuc2V0T3JpZW50YXRpb24odGhpcy5pc1ZlcnRpY2FsKTtcbiAgICAgICAgdGhpcy50b29sYmFyLnNldE9yaWVudGF0aW9uKHRoaXMuaXNWZXJ0aWNhbCk7XG4gICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlS2V5RG93bihldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBpZiAodGhpcy5jb250YWluZXJFbCAmJiB0aGlzLmNvbnRhaW5lckVsLmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ0Fycm93VXAnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhcmRDb250YWluZXIuc2Nyb2xsVXAoKTtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnQXJyb3dEb3duJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYXJkQ29udGFpbmVyLnNjcm9sbERvd24oKTtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnQXJyb3dMZWZ0JzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYXJkQ29udGFpbmVyLnNjcm9sbExlZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnQXJyb3dSaWdodCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FyZENvbnRhaW5lci5zY3JvbGxSaWdodCgpO1xuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdQYWdlVXAnOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1ZlcnRpY2FsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhcmRDb250YWluZXIuc2Nyb2xsVXAoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FyZENvbnRhaW5lci5zY3JvbGxMZWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnUGFnZURvd24nOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1ZlcnRpY2FsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhcmRDb250YWluZXIuc2Nyb2xsRG93bigpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYXJkQ29udGFpbmVyLnNjcm9sbFJpZ2h0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnSG9tZSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FyZENvbnRhaW5lci5zY3JvbGxUb0NlbnRlcigpO1xuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIG9uT3BlbigpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXJFbC5jaGlsZHJlblsxXSBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgY29udGFpbmVyLmVtcHR5KCk7XG5cbiAgICAgICAgY29uc3QgdG9vbGJhckVsID0gY29udGFpbmVyLmNyZWF0ZURpdignY2FyZC1uYXZpZ2F0b3ItdG9vbGJhcicpO1xuICAgICAgICBjb25zdCBjYXJkQ29udGFpbmVyRWwgPSBjb250YWluZXIuY3JlYXRlRGl2KCdjYXJkLWNvbnRhaW5lcicpO1xuXG4gICAgICAgIHRoaXMudG9vbGJhci5pbml0aWFsaXplKHRvb2xiYXJFbCk7XG4gICAgICAgIHRoaXMuY2FyZENvbnRhaW5lci5pbml0aWFsaXplKGNhcmRDb250YWluZXJFbCk7XG5cbiAgICAgICAgdGhpcy5pc1ZlcnRpY2FsID0gdGhpcy5jYWxjdWxhdGVJc1ZlcnRpY2FsKCk7XG4gICAgICAgIHRoaXMudXBkYXRlTGF5b3V0QW5kUmVmcmVzaCgpO1xuICAgICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyLm9ic2VydmUodGhpcy5sZWFmLnZpZXcuY29udGFpbmVyRWwpO1xuXG4gICAgICAgIHRoaXMucmVnaXN0ZXJEb21FdmVudCh0aGlzLmNvbnRhaW5lckVsLCAna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5RG93bi5iaW5kKHRoaXMpKTtcblxuICAgICAgICB0aGlzLnJlZnJlc2goKTtcblxuXHRcdHRoaXMuY2VudGVyQWN0aXZlQ2FyZE9uT3BlbigpO1xuICAgIH1cblxuXHRwcml2YXRlIGNlbnRlckFjdGl2ZUNhcmRPbk9wZW4oKSB7XG5cdFx0aWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLmNlbnRlckFjdGl2ZUNhcmRPbk9wZW4pIHtcblx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHR0aGlzLmNhcmRDb250YWluZXIuY2VudGVyQWN0aXZlQ2FyZCgpO1xuXHRcdFx0fSwgMzAwKTtcblx0XHR9XG5cdH1cblxuICAgIGFzeW5jIG9uQ2xvc2UoKSB7XG4gICAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICB0aGlzLnRvb2xiYXIub25DbG9zZSgpO1xuICAgICAgICB0aGlzLmNhcmRDb250YWluZXIub25DbG9zZSgpO1xuXG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5RG93bi5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICByZWZyZXNoKCkge1xuICAgICAgICB0aGlzLnRvb2xiYXIucmVmcmVzaCgpO1xuICAgICAgICB0aGlzLmNhcmRDb250YWluZXIucmVmcmVzaCgpO1xuICAgIH1cbn1cbiIsICIvLyBzcmMvdWkvdG9vbGJhci90b29sYmFyLnRzXG5cbmltcG9ydCB7IHNldEljb24sIFRGb2xkZXIsIGRlYm91bmNlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IENhcmROYXZpZ2F0b3JQbHVnaW4gZnJvbSAnLi4vLi4vbWFpbic7XG5pbXBvcnQgeyBDYXJkTmF2aWdhdG9yIH0gZnJvbSAnLi4vY2FyZE5hdmlnYXRvcic7XG5pbXBvcnQgeyBGb2xkZXJTdWdnZXN0TW9kYWwgfSBmcm9tICcuL3Rvb2xiYXJBY3Rpb25zJztcbmltcG9ydCB7IHRvZ2dsZVNvcnQsIHRvZ2dsZVNldHRpbmdzIH0gZnJvbSAnLi90b29sYmFyQWN0aW9ucyc7XG5cbmV4cG9ydCBjbGFzcyBUb29sYmFyIHtcbiAgICBwcml2YXRlIGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgICBwcml2YXRlIGlzVmVydGljYWw6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBsdWdpbjogQ2FyZE5hdmlnYXRvclBsdWdpbikge1xuICAgICAgICB0aGlzLmlzVmVydGljYWwgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpbml0aWFsaXplKGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCkge1xuICAgICAgICB0aGlzLmNvbnRhaW5lckVsID0gY29udGFpbmVyRWw7XG4gICAgICAgIHRoaXMuY3JlYXRlVG9vbGJhcigpO1xuICAgIH1cblxuXHRzZXRPcmllbnRhdGlvbihpc1ZlcnRpY2FsOiBib29sZWFuKSB7XG4gICAgICAgIGlmICh0aGlzLmlzVmVydGljYWwgIT09IGlzVmVydGljYWwpIHtcbiAgICAgICAgICAgIHRoaXMuaXNWZXJ0aWNhbCA9IGlzVmVydGljYWw7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVRvb2xiYXJTdHlsZSgpO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVUb29sYmFyKCk7XG4gICAgICAgIH1cbiAgICB9XG5cblx0cHJpdmF0ZSB1cGRhdGVUb29sYmFyU3R5bGUoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbnRhaW5lckVsKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmNsYXNzTGlzdC50b2dnbGUoJ3ZlcnRpY2FsJywgdGhpcy5pc1ZlcnRpY2FsKTtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwuY2xhc3NMaXN0LnRvZ2dsZSgnaG9yaXpvbnRhbCcsICF0aGlzLmlzVmVydGljYWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVUb29sYmFyKCkge1xuICAgICAgICBpZiAoIXRoaXMuY29udGFpbmVyRWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuZW1wdHkoKTtcblxuICAgICAgICBjb25zdCB0b29sYmFyQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRvb2xiYXJDb250YWluZXIuY2xhc3NOYW1lID0gJ2NhcmQtbmF2aWdhdG9yLXRvb2xiYXItY29udGFpbmVyJztcblxuICAgICAgICBjb25zdCBzZWFyY2hDb250YWluZXIgPSB0aGlzLmNyZWF0ZVNlYXJjaENvbnRhaW5lcigpO1xuICAgICAgICBjb25zdCBzZXBhcmF0b3IgPSB0aGlzLmNyZWF0ZVNlcGFyYXRvcigpO1xuICAgICAgICBjb25zdCBhY3Rpb25JY29uc0NvbnRhaW5lciA9IHRoaXMuY3JlYXRlQWN0aW9uSWNvbnNDb250YWluZXIoKTtcblxuICAgICAgICB0b29sYmFyQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlYXJjaENvbnRhaW5lcik7XG4gICAgICAgIHRvb2xiYXJDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VwYXJhdG9yKTtcbiAgICAgICAgdG9vbGJhckNvbnRhaW5lci5hcHBlbmRDaGlsZChhY3Rpb25JY29uc0NvbnRhaW5lcik7XG5cbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5hcHBlbmRDaGlsZCh0b29sYmFyQ29udGFpbmVyKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZVNlYXJjaENvbnRhaW5lcigpOiBIVE1MRWxlbWVudCB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjb250YWluZXIuY2xhc3NOYW1lID0gJ2NhcmQtbmF2aWdhdG9yLXNlYXJjaC1jb250YWluZXInO1xuXG4gICAgICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgaW5wdXQudHlwZSA9ICd0ZXh0JztcbiAgICAgICAgaW5wdXQucGxhY2Vob2xkZXIgPSAnU2VhcmNoLi4uJztcbiAgICAgICAgaW5wdXQuY2xhc3NOYW1lID0gJ2NhcmQtbmF2aWdhdG9yLXNlYXJjaC1pbnB1dCc7XG5cbiAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBkZWJvdW5jZShhc3luYyAoZTogRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNlYXJjaFRlcm0gPSAoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWU7XG4gICAgICAgICAgICBjb25zdCB2aWV3ID0gdGhpcy5wbHVnaW4uYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoJ2NhcmQtbmF2aWdhdG9yLXZpZXcnKVswXS52aWV3IGFzIENhcmROYXZpZ2F0b3I7XG4gICAgICAgICAgICBhd2FpdCB2aWV3LmNhcmRDb250YWluZXIuc2VhcmNoQ2FyZHMoc2VhcmNoVGVybSk7XG4gICAgICAgIH0sIDMwMCkpO1xuXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChpbnB1dCk7XG4gICAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVBY3Rpb25JY29uc0NvbnRhaW5lcigpOiBIVE1MRWxlbWVudCB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjb250YWluZXIuY2xhc3NOYW1lID0gJ2NhcmQtbmF2aWdhdG9yLWFjdGlvbi1pY29ucy1jb250YWluZXInO1xuXG4gICAgICAgIGNvbnN0IGljb25zID0gW1xuICAgICAgICAgICAgeyBuYW1lOiAnZm9sZGVyJywgbGFiZWw6ICdTZWxlY3QgZm9sZGVyJywgYWN0aW9uOiAoKSA9PiB0aGlzLm9wZW5Gb2xkZXJTZWxlY3RvcigpIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdhcnJvdy11cC1uYXJyb3ctd2lkZScsIGxhYmVsOiAnU29ydCBjYXJkcycsIGFjdGlvbjogKCkgPT4gdG9nZ2xlU29ydCh0aGlzLnBsdWdpbikgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ3NldHRpbmdzJywgbGFiZWw6ICdTZXR0aW5ncycsIGFjdGlvbjogKCkgPT4gdG9nZ2xlU2V0dGluZ3ModGhpcy5wbHVnaW4pIH0sXG4gICAgICAgIF07XG5cbiAgICAgICAgaWNvbnMuZm9yRWFjaChpY29uID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGljb25FbGVtZW50ID0gdGhpcy5jcmVhdGVUb29sYmFySWNvbihpY29uLm5hbWUsIGljb24ubGFiZWwsIGljb24uYWN0aW9uKTtcbiAgICAgICAgICAgIGlmIChpY29uLm5hbWUgPT09ICdhcnJvdy11cC1uYXJyb3ctd2lkZScpIHtcbiAgICAgICAgICAgICAgICBpY29uRWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnLCBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Muc29ydENyaXRlcmlvbiAhPT0gJ2ZpbGVOYW1lJyB8fCBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Muc29ydE9yZGVyICE9PSAnYXNjJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoaWNvbkVsZW1lbnQpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlVG9vbGJhckljb24oaWNvbk5hbWU6IHN0cmluZywgYXJpYUxhYmVsOiBzdHJpbmcsIGFjdGlvbjogKGU6IE1vdXNlRXZlbnQpID0+IHZvaWQpOiBIVE1MRWxlbWVudCB7XG4gICAgICAgIGNvbnN0IGljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgaWNvbi5jbGFzc05hbWUgPSAnY2xpY2thYmxlLWljb24nO1xuICAgICAgICBpY29uLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIGFyaWFMYWJlbCk7XG5cbiAgICAgICAgc2V0SWNvbihpY29uLCBpY29uTmFtZSk7XG4gICAgICAgIGljb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhY3Rpb24pO1xuXG4gICAgICAgIHJldHVybiBpY29uO1xuICAgIH1cblx0XG5cdHByaXZhdGUgY3JlYXRlU2VwYXJhdG9yKCk6IEhUTUxFbGVtZW50IHtcbiAgICAgICAgY29uc3Qgc2VwYXJhdG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHNlcGFyYXRvci5jbGFzc05hbWUgPSAndG9vbGJhci1zZXBhcmF0b3InO1xuICAgICAgICByZXR1cm4gc2VwYXJhdG9yO1xuICAgIH1cblxuXHRwdWJsaWMgb3BlbkZvbGRlclNlbGVjdG9yKCkge1xuXHRcdG5ldyBGb2xkZXJTdWdnZXN0TW9kYWwodGhpcy5wbHVnaW4sIChmb2xkZXI6IFRGb2xkZXIpID0+IHtcblx0XHRcdGNvbnN0IHZpZXcgPSB0aGlzLnBsdWdpbi5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoQ2FyZE5hdmlnYXRvcik7XG5cdFx0XHRpZiAodmlldykge1xuXHRcdFx0XHR2aWV3LmNhcmRDb250YWluZXIuZGlzcGxheUNhcmRzRm9yRm9sZGVyKGZvbGRlcik7XG5cdFx0XHR9XG5cdFx0fSkub3BlbigpO1xuXHR9XG5cbiAgICByZWZyZXNoKCkge1xuICAgICAgICAvLyBJbXBsZW1lbnQgcmVmcmVzaCBsb2dpYyBpZiBuZWNlc3NhcnlcbiAgICB9XG5cbiAgICBvbkNsb3NlKCkge1xuICAgICAgICAvLyBDbGVhbnVwIHRvb2xiYXItcmVsYXRlZCByZXNvdXJjZXNcbiAgICB9XG59XG4iLCAiLy8gc3JjL3VpL3Rvb2xiYXIvdG9vbGJhckFjdGlvbnMudHNcblxuaW1wb3J0IHsgVEZvbGRlciwgRnV6enlTdWdnZXN0TW9kYWwgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgQ2FyZE5hdmlnYXRvclBsdWdpbiBmcm9tICcuLi8uLi9tYWluJztcbmltcG9ydCB7IFNvcnRDcml0ZXJpb24sIENhcmROYXZpZ2F0b3JTZXR0aW5ncyB9IGZyb20gJy4uLy4uL2NvbW1vbi90eXBlcyc7XG5pbXBvcnQgeyB0IH0gZnJvbSAnaTE4bmV4dCc7XG5cbmV4cG9ydCBjbGFzcyBGb2xkZXJTdWdnZXN0TW9kYWwgZXh0ZW5kcyBGdXp6eVN1Z2dlc3RNb2RhbDxURm9sZGVyPiB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBwbHVnaW46IENhcmROYXZpZ2F0b3JQbHVnaW4sIHByaXZhdGUgb25TZWxlY3Q6IChmb2xkZXI6IFRGb2xkZXIpID0+IHZvaWQpIHtcbiAgICAgICAgc3VwZXIocGx1Z2luLmFwcCk7XG4gICAgfVxuXG4gICAgZ2V0SXRlbXMoKTogVEZvbGRlcltdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGx1Z2luLmFwcC52YXVsdC5nZXRBbGxMb2FkZWRGaWxlcygpXG4gICAgICAgICAgICAuZmlsdGVyKChmaWxlKTogZmlsZSBpcyBURm9sZGVyID0+IGZpbGUgaW5zdGFuY2VvZiBURm9sZGVyKTtcbiAgICB9XG5cbiAgICBnZXRJdGVtVGV4dChmb2xkZXI6IFRGb2xkZXIpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gZm9sZGVyLnBhdGg7XG4gICAgfVxuXG4gICAgb25DaG9vc2VJdGVtKGZvbGRlcjogVEZvbGRlcik6IHZvaWQge1xuICAgICAgICB0aGlzLm9uU2VsZWN0KGZvbGRlcik7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9nZ2xlU29ydChwbHVnaW46IENhcmROYXZpZ2F0b3JQbHVnaW4pIHtcbiAgICBsZXQgc29ydFBvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmQtbmF2aWdhdG9yLXNvcnQtcG9wdXAnKSBhcyBIVE1MRWxlbWVudDtcblxuICAgIGlmICghc29ydFBvcHVwKSB7XG4gICAgICAgIHNvcnRQb3B1cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBzb3J0UG9wdXAuY2xhc3NOYW1lID0gJ2NhcmQtbmF2aWdhdG9yLXNvcnQtcG9wdXAnO1xuXG4gICAgICAgIGNvbnN0IGN1cnJlbnRTb3J0ID0gYCR7cGx1Z2luLnNldHRpbmdzLnNvcnRDcml0ZXJpb259XyR7cGx1Z2luLnNldHRpbmdzLnNvcnRPcmRlcn1gO1xuXG4gICAgICAgIGNvbnN0IGFkZFNvcnRPcHRpb24gPSAodmFsdWU6IHN0cmluZywgbGFiZWw6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgICAgICBvcHRpb24udGV4dENvbnRlbnQgPSBsYWJlbDtcbiAgICAgICAgICAgIG9wdGlvbi5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnLCBjdXJyZW50U29ydCA9PT0gdmFsdWUpO1xuICAgICAgICAgICAgb3B0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IFtjcml0ZXJpb24sIG9yZGVyXSA9IHZhbHVlLnNwbGl0KCdfJykgYXMgW1NvcnRDcml0ZXJpb24sICdhc2MnIHwgJ2Rlc2MnXTtcbiAgICAgICAgICAgICAgICBwbHVnaW4uc2V0dGluZ3Muc29ydENyaXRlcmlvbiA9IGNyaXRlcmlvbjtcbiAgICAgICAgICAgICAgICBwbHVnaW4uc2V0dGluZ3Muc29ydE9yZGVyID0gb3JkZXI7XG4gICAgICAgICAgICAgICAgYXdhaXQgcGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIHBsdWdpbi50cmlnZ2VyUmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgIHNvcnRQb3B1cC5yZW1vdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc29ydFBvcHVwLmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgICAgIH07XG5cbiAgICAgICAgYWRkU29ydE9wdGlvbih0KCdmaWxlTmFtZV9hc2MnKSwgdCgnRmlsZSBuYW1lIChBIHRvIFopJykpO1xuICAgICAgICBhZGRTb3J0T3B0aW9uKHQoJ2ZpbGVOYW1lX2Rlc2MnKSwgdCgnRmlsZSBuYW1lIChaIHRvIEEpJykpO1xuICAgICAgICBhZGRTb3J0T3B0aW9uKHQoJ2xhc3RNb2RpZmllZF9kZXNjJyksIHQoJ0xhc3QgbW9kaWZpZWQgKG5ld2VzdCBmaXJzdCknKSk7XG4gICAgICAgIGFkZFNvcnRPcHRpb24odCgnbGFzdE1vZGlmaWVkX2FzYycpLCB0KCdMYXN0IG1vZGlmaWVkIChvbGRlc3QgZmlyc3QpJykpO1xuICAgICAgICBhZGRTb3J0T3B0aW9uKHQoJ2NyZWF0ZWRfZGVzYycpLCB0KCdDcmVhdGVkIChuZXdlc3QgZmlyc3QpJykpO1xuICAgICAgICBhZGRTb3J0T3B0aW9uKHQoJ2NyZWF0ZWRfYXNjJyksIHQoJ0NyZWF0ZWQgKG9sZGVzdCBmaXJzdCknKSk7XG5cbiAgICAgICAgLy8gXHVEMjM0XHVCQzE0IFx1RDU1OFx1QjJFOFx1QzVEMCBcdUJDMzBcdUNFNThcbiAgICAgICAgY29uc3QgdG9vbGJhckVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmQtbmF2aWdhdG9yLXRvb2xiYXItY29udGFpbmVyJyk7XG4gICAgICAgIGlmICh0b29sYmFyRWwpIHtcbiAgICAgICAgICAgIHRvb2xiYXJFbC5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyZW5kJywgc29ydFBvcHVwKTtcblxuICAgICAgICAgICAgLy8gXHVENjU0XHVCQTc0XHVDNzU4IFx1QjJFNFx1Qjk3OCBcdUFDRjNcdUM3NDQgXHVEMDc0XHVCOUFEXHVENTU4XHVCQTc0IFx1RDMxRFx1QzVDNVx1Qzc0NCBcdUIyRUJcdUIyOTQgXHVDNzc0XHVCQ0E0XHVEMkI4IFx1Q0Q5NFx1QUMwMFxuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiBvbkNsaWNrT3V0c2lkZShldmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChzb3J0UG9wdXAgJiYgIXNvcnRQb3B1cC5jb250YWlucyhldmVudC50YXJnZXQgYXMgTm9kZSkgJiYgIXRvb2xiYXJFbC5jb250YWlucyhldmVudC50YXJnZXQgYXMgTm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc29ydFBvcHVwLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQ2xpY2tPdXRzaWRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHNvcnRQb3B1cC5yZW1vdmUoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGVTZXR0aW5ncyhwbHVnaW46IENhcmROYXZpZ2F0b3JQbHVnaW4pIHtcbiAgICBsZXQgc2V0dGluZ3NQb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkLW5hdmlnYXRvci1zZXR0aW5ncy1wb3B1cCcpIGFzIEhUTUxFbGVtZW50O1xuXG4gICAgaWYgKCFzZXR0aW5nc1BvcHVwKSB7XG4gICAgICAgIHNldHRpbmdzUG9wdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgc2V0dGluZ3NQb3B1cC5jbGFzc05hbWUgPSAnY2FyZC1uYXZpZ2F0b3Itc2V0dGluZ3MtcG9wdXAnO1xuXG4gICAgICAgIGNvbnN0IHVwZGF0ZVNldHRpbmcgPSBhc3luYyA8SyBleHRlbmRzIGtleW9mIENhcmROYXZpZ2F0b3JTZXR0aW5ncz4oXG4gICAgICAgICAgICBzZXR0aW5nS2V5OiBLLFxuICAgICAgICAgICAgdmFsdWU6IENhcmROYXZpZ2F0b3JTZXR0aW5nc1tLXVxuICAgICAgICApID0+IHtcbiAgICAgICAgICAgIHBsdWdpbi5zZXR0aW5nc1tzZXR0aW5nS2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgYXdhaXQgcGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgcGx1Z2luLnRyaWdnZXJSZWZyZXNoKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gXHVDRTc0XHVCNERDIFx1QzIxOCBcdUMxMjRcdUM4MTVcbiAgICAgICAgY29uc3QgY2FyZHNQZXJWaWV3U2V0dGluZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgIGNhcmRzUGVyVmlld1NldHRpbmcudHlwZSA9ICdyYW5nZSc7XG4gICAgICAgIGNhcmRzUGVyVmlld1NldHRpbmcubWluID0gJzEnO1xuICAgICAgICBjYXJkc1BlclZpZXdTZXR0aW5nLm1heCA9ICcxMCc7XG4gICAgICAgIGNhcmRzUGVyVmlld1NldHRpbmcudmFsdWUgPSBwbHVnaW4uc2V0dGluZ3MuY2FyZHNQZXJWaWV3LnRvU3RyaW5nKCk7XG4gICAgICAgIGNhcmRzUGVyVmlld1NldHRpbmcuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBwYXJzZUludCgoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUsIDEwKTtcbiAgICAgICAgICAgIHVwZGF0ZVNldHRpbmcoJ2NhcmRzUGVyVmlldycsIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGNhcmRzUGVyVmlld0xhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICAgICAgY2FyZHNQZXJWaWV3TGFiZWwudGV4dENvbnRlbnQgPSB0KCdDYXJkcyBwZXIgdmlldzonKTtcbiAgICAgICAgc2V0dGluZ3NQb3B1cC5hcHBlbmRDaGlsZChjYXJkc1BlclZpZXdMYWJlbCk7XG4gICAgICAgIHNldHRpbmdzUG9wdXAuYXBwZW5kQ2hpbGQoY2FyZHNQZXJWaWV3U2V0dGluZyk7XG5cbiAgICAgICAgLy8gXHVBRTAwXHVDNzkwIFx1RDA2Q1x1QUUzMCBcdUMxMjRcdUM4MTVcbiAgICAgICAgY29uc3QgZm9udFNpemVTZXR0aW5nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgZm9udFNpemVTZXR0aW5nLnR5cGUgPSAncmFuZ2UnO1xuICAgICAgICBmb250U2l6ZVNldHRpbmcubWluID0gJzEwJztcbiAgICAgICAgZm9udFNpemVTZXR0aW5nLm1heCA9ICczMCc7XG4gICAgICAgIGZvbnRTaXplU2V0dGluZy52YWx1ZSA9IHBsdWdpbi5zZXR0aW5ncy5jb250ZW50U2l6ZS50b1N0cmluZygpO1xuICAgICAgICBmb250U2l6ZVNldHRpbmcuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBwYXJzZUludCgoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUsIDEwKTtcbiAgICAgICAgICAgIHVwZGF0ZVNldHRpbmcoJ2NvbnRlbnRTaXplJywgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgZm9udFNpemVMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgICAgIGZvbnRTaXplTGFiZWwudGV4dENvbnRlbnQgPSB0KCdDb250ZW50IFNpemU6Jyk7XG4gICAgICAgIHNldHRpbmdzUG9wdXAuYXBwZW5kQ2hpbGQoZm9udFNpemVMYWJlbCk7XG4gICAgICAgIHNldHRpbmdzUG9wdXAuYXBwZW5kQ2hpbGQoZm9udFNpemVTZXR0aW5nKTtcblxuICAgICAgICAvLyBcdUQ0NUNcdUMyREMgXHVENTZEXHVCQUE5IFx1QzEyMFx1RDBERFx1Qzc0NCBcdUM3MDRcdUQ1NUMgXHVEMUEwXHVBRTAwIFx1QkM4NFx1RDJCQ1x1QjRFNFxuICAgICAgICBjb25zdCBjcmVhdGVUb2dnbGUgPSAobGFiZWxUZXh0OiBzdHJpbmcsIHNldHRpbmdLZXk6IGtleW9mIENhcmROYXZpZ2F0b3JTZXR0aW5ncykgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBjb25zdCBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgICAgICAgICBsYWJlbC50ZXh0Q29udGVudCA9IGxhYmVsVGV4dDtcblxuICAgICAgICAgICAgY29uc3QgdG9nZ2xlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgIHRvZ2dsZS50eXBlID0gJ2NoZWNrYm94JztcbiAgICAgICAgICAgIHRvZ2dsZS5jaGVja2VkID0gcGx1Z2luLnNldHRpbmdzW3NldHRpbmdLZXldIGFzIGJvb2xlYW47XG4gICAgICAgICAgICB0b2dnbGUuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICB1cGRhdGVTZXR0aW5nKHNldHRpbmdLZXksIChlLnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS5jaGVja2VkKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xuICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRvZ2dsZSk7XG4gICAgICAgICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEZpbGUgTmFtZSBcdUQ0NUNcdUMyRENcbiAgICAgICAgY29uc3QgZmlsZU5hbWVUb2dnbGUgPSBjcmVhdGVUb2dnbGUodCgnU2hvdyBGaWxlIE5hbWUnKSwgdCgnc2hvd0ZpbGVOYW1lJykpO1xuICAgICAgICBzZXR0aW5nc1BvcHVwLmFwcGVuZENoaWxkKGZpbGVOYW1lVG9nZ2xlKTtcblxuICAgICAgICAvLyBGaXJzdCBIZWFkZXIgXHVENDVDXHVDMkRDXG4gICAgICAgIGNvbnN0IGZpcnN0SGVhZGVyVG9nZ2xlID0gY3JlYXRlVG9nZ2xlKHQoJ1Nob3cgRmlyc3QgSGVhZGVyJyksIHQoJ3Nob3dGaXJzdEhlYWRlcicpKTtcbiAgICAgICAgc2V0dGluZ3NQb3B1cC5hcHBlbmRDaGlsZChmaXJzdEhlYWRlclRvZ2dsZSk7XG5cbiAgICAgICAgLy8gQ29udGVudCBcdUQ0NUNcdUMyRENcbiAgICAgICAgY29uc3QgY29udGVudFRvZ2dsZSA9IGNyZWF0ZVRvZ2dsZSh0KCdTaG93IENvbnRlbnQnKSwgdCgnc2hvd0NvbnRlbnQnKSk7XG4gICAgICAgIHNldHRpbmdzUG9wdXAuYXBwZW5kQ2hpbGQoY29udGVudFRvZ2dsZSk7XG5cbiAgICAgICAgLy8gRHJhZyBhbmQgRHJvcCBDb250ZW50IFx1RDQ1Q1x1QzJEQ1xuICAgICAgICBjb25zdCBkcmFnRHJvcENvbnRlbnRUb2dnbGUgPSBjcmVhdGVUb2dnbGUodCgnRHJhZyBhbmQgRHJvcCBDb250ZW50JyksIHQoJ2RyYWdEcm9wQ29udGVudCcpKTtcbiAgICAgICAgc2V0dGluZ3NQb3B1cC5hcHBlbmRDaGlsZChkcmFnRHJvcENvbnRlbnRUb2dnbGUpO1xuXG4gICAgICAgIC8vIFx1RDIzNFx1QkMxNCBcdUQ1NThcdUIyRThcdUM1RDAgXHVCQzMwXHVDRTU4XG4gICAgICAgIGNvbnN0IHRvb2xiYXJFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkLW5hdmlnYXRvci10b29sYmFyLWNvbnRhaW5lcicpO1xuICAgICAgICBpZiAodG9vbGJhckVsKSB7XG4gICAgICAgICAgICB0b29sYmFyRWwuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdhZnRlcmVuZCcsIHNldHRpbmdzUG9wdXApO1xuXG4gICAgICAgICAgICAvLyBcdUQ2NTRcdUJBNzRcdUM3NTggXHVCMkU0XHVCOTc4IFx1QUNGM1x1Qzc0NCBcdUQwNzRcdUI5QURcdUQ1NThcdUJBNzQgXHVEMzFEXHVDNUM1XHVDNzQ0IFx1QjJFQlx1QjI5NCBcdUM3NzRcdUJDQTRcdUQyQjggXHVDRDk0XHVBQzAwXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIG9uQ2xpY2tPdXRzaWRlKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzUG9wdXAgJiYgIXNldHRpbmdzUG9wdXAuY29udGFpbnMoZXZlbnQudGFyZ2V0IGFzIE5vZGUpICYmICF0b29sYmFyRWwuY29udGFpbnMoZXZlbnQudGFyZ2V0IGFzIE5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzUG9wdXAucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbGlja091dHNpZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc2V0dGluZ3NQb3B1cC5jbGFzc0xpc3QudG9nZ2xlKCdoaWRkZW4nKTtcbiAgICB9XG59XG4iLCAiY29uc3QgY29uc29sZUxvZ2dlciA9IHtcbiAgdHlwZTogJ2xvZ2dlcicsXG4gIGxvZyhhcmdzKSB7XG4gICAgdGhpcy5vdXRwdXQoJ2xvZycsIGFyZ3MpO1xuICB9LFxuICB3YXJuKGFyZ3MpIHtcbiAgICB0aGlzLm91dHB1dCgnd2FybicsIGFyZ3MpO1xuICB9LFxuICBlcnJvcihhcmdzKSB7XG4gICAgdGhpcy5vdXRwdXQoJ2Vycm9yJywgYXJncyk7XG4gIH0sXG4gIG91dHB1dCh0eXBlLCBhcmdzKSB7XG4gICAgaWYgKGNvbnNvbGUgJiYgY29uc29sZVt0eXBlXSkgY29uc29sZVt0eXBlXS5hcHBseShjb25zb2xlLCBhcmdzKTtcbiAgfVxufTtcbmNsYXNzIExvZ2dlciB7XG4gIGNvbnN0cnVjdG9yKGNvbmNyZXRlTG9nZ2VyKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHRoaXMuaW5pdChjb25jcmV0ZUxvZ2dlciwgb3B0aW9ucyk7XG4gIH1cbiAgaW5pdChjb25jcmV0ZUxvZ2dlcikge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB0aGlzLnByZWZpeCA9IG9wdGlvbnMucHJlZml4IHx8ICdpMThuZXh0Oic7XG4gICAgdGhpcy5sb2dnZXIgPSBjb25jcmV0ZUxvZ2dlciB8fCBjb25zb2xlTG9nZ2VyO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5kZWJ1ZyA9IG9wdGlvbnMuZGVidWc7XG4gIH1cbiAgbG9nKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZm9yd2FyZChhcmdzLCAnbG9nJywgJycsIHRydWUpO1xuICB9XG4gIHdhcm4oKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZvcndhcmQoYXJncywgJ3dhcm4nLCAnJywgdHJ1ZSk7XG4gIH1cbiAgZXJyb3IoKSB7XG4gICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICBhcmdzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZvcndhcmQoYXJncywgJ2Vycm9yJywgJycpO1xuICB9XG4gIGRlcHJlY2F0ZSgpIHtcbiAgICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjQpLCBfa2V5NCA9IDA7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICAgIGFyZ3NbX2tleTRdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZm9yd2FyZChhcmdzLCAnd2FybicsICdXQVJOSU5HIERFUFJFQ0FURUQ6ICcsIHRydWUpO1xuICB9XG4gIGZvcndhcmQoYXJncywgbHZsLCBwcmVmaXgsIGRlYnVnT25seSkge1xuICAgIGlmIChkZWJ1Z09ubHkgJiYgIXRoaXMuZGVidWcpIHJldHVybiBudWxsO1xuICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycpIGFyZ3NbMF0gPSBgJHtwcmVmaXh9JHt0aGlzLnByZWZpeH0gJHthcmdzWzBdfWA7XG4gICAgcmV0dXJuIHRoaXMubG9nZ2VyW2x2bF0oYXJncyk7XG4gIH1cbiAgY3JlYXRlKG1vZHVsZU5hbWUpIHtcbiAgICByZXR1cm4gbmV3IExvZ2dlcih0aGlzLmxvZ2dlciwge1xuICAgICAgLi4ue1xuICAgICAgICBwcmVmaXg6IGAke3RoaXMucHJlZml4fToke21vZHVsZU5hbWV9OmBcbiAgICAgIH0sXG4gICAgICAuLi50aGlzLm9wdGlvbnNcbiAgICB9KTtcbiAgfVxuICBjbG9uZShvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwgdGhpcy5vcHRpb25zO1xuICAgIG9wdGlvbnMucHJlZml4ID0gb3B0aW9ucy5wcmVmaXggfHwgdGhpcy5wcmVmaXg7XG4gICAgcmV0dXJuIG5ldyBMb2dnZXIodGhpcy5sb2dnZXIsIG9wdGlvbnMpO1xuICB9XG59XG52YXIgYmFzZUxvZ2dlciA9IG5ldyBMb2dnZXIoKTtcblxuY2xhc3MgRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5vYnNlcnZlcnMgPSB7fTtcbiAgfVxuICBvbihldmVudHMsIGxpc3RlbmVyKSB7XG4gICAgZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaChldmVudCA9PiB7XG4gICAgICBpZiAoIXRoaXMub2JzZXJ2ZXJzW2V2ZW50XSkgdGhpcy5vYnNlcnZlcnNbZXZlbnRdID0gbmV3IE1hcCgpO1xuICAgICAgY29uc3QgbnVtTGlzdGVuZXJzID0gdGhpcy5vYnNlcnZlcnNbZXZlbnRdLmdldChsaXN0ZW5lcikgfHwgMDtcbiAgICAgIHRoaXMub2JzZXJ2ZXJzW2V2ZW50XS5zZXQobGlzdGVuZXIsIG51bUxpc3RlbmVycyArIDEpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG9mZihldmVudCwgbGlzdGVuZXIpIHtcbiAgICBpZiAoIXRoaXMub2JzZXJ2ZXJzW2V2ZW50XSkgcmV0dXJuO1xuICAgIGlmICghbGlzdGVuZXIpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLm9ic2VydmVyc1tldmVudF07XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMub2JzZXJ2ZXJzW2V2ZW50XS5kZWxldGUobGlzdGVuZXIpO1xuICB9XG4gIGVtaXQoZXZlbnQpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgaWYgKHRoaXMub2JzZXJ2ZXJzW2V2ZW50XSkge1xuICAgICAgY29uc3QgY2xvbmVkID0gQXJyYXkuZnJvbSh0aGlzLm9ic2VydmVyc1tldmVudF0uZW50cmllcygpKTtcbiAgICAgIGNsb25lZC5mb3JFYWNoKF9yZWYgPT4ge1xuICAgICAgICBsZXQgW29ic2VydmVyLCBudW1UaW1lc0FkZGVkXSA9IF9yZWY7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVGltZXNBZGRlZDsgaSsrKSB7XG4gICAgICAgICAgb2JzZXJ2ZXIoLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5vYnNlcnZlcnNbJyonXSkge1xuICAgICAgY29uc3QgY2xvbmVkID0gQXJyYXkuZnJvbSh0aGlzLm9ic2VydmVyc1snKiddLmVudHJpZXMoKSk7XG4gICAgICBjbG9uZWQuZm9yRWFjaChfcmVmMiA9PiB7XG4gICAgICAgIGxldCBbb2JzZXJ2ZXIsIG51bVRpbWVzQWRkZWRdID0gX3JlZjI7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVGltZXNBZGRlZDsgaSsrKSB7XG4gICAgICAgICAgb2JzZXJ2ZXIuYXBwbHkob2JzZXJ2ZXIsIFtldmVudCwgLi4uYXJnc10pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgZGVmZXIgPSAoKSA9PiB7XG4gIGxldCByZXM7XG4gIGxldCByZWo7XG4gIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgcmVzID0gcmVzb2x2ZTtcbiAgICByZWogPSByZWplY3Q7XG4gIH0pO1xuICBwcm9taXNlLnJlc29sdmUgPSByZXM7XG4gIHByb21pc2UucmVqZWN0ID0gcmVqO1xuICByZXR1cm4gcHJvbWlzZTtcbn07XG5jb25zdCBtYWtlU3RyaW5nID0gb2JqZWN0ID0+IHtcbiAgaWYgKG9iamVjdCA9PSBudWxsKSByZXR1cm4gJyc7XG4gIHJldHVybiAnJyArIG9iamVjdDtcbn07XG5jb25zdCBjb3B5ID0gKGEsIHMsIHQpID0+IHtcbiAgYS5mb3JFYWNoKG0gPT4ge1xuICAgIGlmIChzW21dKSB0W21dID0gc1ttXTtcbiAgfSk7XG59O1xuY29uc3QgbGFzdE9mUGF0aFNlcGFyYXRvclJlZ0V4cCA9IC8jIyMvZztcbmNvbnN0IGNsZWFuS2V5ID0ga2V5ID0+IGtleSAmJiBrZXkuaW5kZXhPZignIyMjJykgPiAtMSA/IGtleS5yZXBsYWNlKGxhc3RPZlBhdGhTZXBhcmF0b3JSZWdFeHAsICcuJykgOiBrZXk7XG5jb25zdCBjYW5Ob3RUcmF2ZXJzZURlZXBlciA9IG9iamVjdCA9PiAhb2JqZWN0IHx8IHR5cGVvZiBvYmplY3QgPT09ICdzdHJpbmcnO1xuY29uc3QgZ2V0TGFzdE9mUGF0aCA9IChvYmplY3QsIHBhdGgsIEVtcHR5KSA9PiB7XG4gIGNvbnN0IHN0YWNrID0gdHlwZW9mIHBhdGggIT09ICdzdHJpbmcnID8gcGF0aCA6IHBhdGguc3BsaXQoJy4nKTtcbiAgbGV0IHN0YWNrSW5kZXggPSAwO1xuICB3aGlsZSAoc3RhY2tJbmRleCA8IHN0YWNrLmxlbmd0aCAtIDEpIHtcbiAgICBpZiAoY2FuTm90VHJhdmVyc2VEZWVwZXIob2JqZWN0KSkgcmV0dXJuIHt9O1xuICAgIGNvbnN0IGtleSA9IGNsZWFuS2V5KHN0YWNrW3N0YWNrSW5kZXhdKTtcbiAgICBpZiAoIW9iamVjdFtrZXldICYmIEVtcHR5KSBvYmplY3Rba2V5XSA9IG5ldyBFbXB0eSgpO1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSB7XG4gICAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqZWN0ID0ge307XG4gICAgfVxuICAgICsrc3RhY2tJbmRleDtcbiAgfVxuICBpZiAoY2FuTm90VHJhdmVyc2VEZWVwZXIob2JqZWN0KSkgcmV0dXJuIHt9O1xuICByZXR1cm4ge1xuICAgIG9iajogb2JqZWN0LFxuICAgIGs6IGNsZWFuS2V5KHN0YWNrW3N0YWNrSW5kZXhdKVxuICB9O1xufTtcbmNvbnN0IHNldFBhdGggPSAob2JqZWN0LCBwYXRoLCBuZXdWYWx1ZSkgPT4ge1xuICBjb25zdCB7XG4gICAgb2JqLFxuICAgIGtcbiAgfSA9IGdldExhc3RPZlBhdGgob2JqZWN0LCBwYXRoLCBPYmplY3QpO1xuICBpZiAob2JqICE9PSB1bmRlZmluZWQgfHwgcGF0aC5sZW5ndGggPT09IDEpIHtcbiAgICBvYmpba10gPSBuZXdWYWx1ZTtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IGUgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gIGxldCBwID0gcGF0aC5zbGljZSgwLCBwYXRoLmxlbmd0aCAtIDEpO1xuICBsZXQgbGFzdCA9IGdldExhc3RPZlBhdGgob2JqZWN0LCBwLCBPYmplY3QpO1xuICB3aGlsZSAobGFzdC5vYmogPT09IHVuZGVmaW5lZCAmJiBwLmxlbmd0aCkge1xuICAgIGUgPSBgJHtwW3AubGVuZ3RoIC0gMV19LiR7ZX1gO1xuICAgIHAgPSBwLnNsaWNlKDAsIHAubGVuZ3RoIC0gMSk7XG4gICAgbGFzdCA9IGdldExhc3RPZlBhdGgob2JqZWN0LCBwLCBPYmplY3QpO1xuICAgIGlmIChsYXN0ICYmIGxhc3Qub2JqICYmIHR5cGVvZiBsYXN0Lm9ialtgJHtsYXN0Lmt9LiR7ZX1gXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGxhc3Qub2JqID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICBsYXN0Lm9ialtgJHtsYXN0Lmt9LiR7ZX1gXSA9IG5ld1ZhbHVlO1xufTtcbmNvbnN0IHB1c2hQYXRoID0gKG9iamVjdCwgcGF0aCwgbmV3VmFsdWUsIGNvbmNhdCkgPT4ge1xuICBjb25zdCB7XG4gICAgb2JqLFxuICAgIGtcbiAgfSA9IGdldExhc3RPZlBhdGgob2JqZWN0LCBwYXRoLCBPYmplY3QpO1xuICBvYmpba10gPSBvYmpba10gfHwgW107XG4gIG9ialtrXS5wdXNoKG5ld1ZhbHVlKTtcbn07XG5jb25zdCBnZXRQYXRoID0gKG9iamVjdCwgcGF0aCkgPT4ge1xuICBjb25zdCB7XG4gICAgb2JqLFxuICAgIGtcbiAgfSA9IGdldExhc3RPZlBhdGgob2JqZWN0LCBwYXRoKTtcbiAgaWYgKCFvYmopIHJldHVybiB1bmRlZmluZWQ7XG4gIHJldHVybiBvYmpba107XG59O1xuY29uc3QgZ2V0UGF0aFdpdGhEZWZhdWx0cyA9IChkYXRhLCBkZWZhdWx0RGF0YSwga2V5KSA9PiB7XG4gIGNvbnN0IHZhbHVlID0gZ2V0UGF0aChkYXRhLCBrZXkpO1xuICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gZ2V0UGF0aChkZWZhdWx0RGF0YSwga2V5KTtcbn07XG5jb25zdCBkZWVwRXh0ZW5kID0gKHRhcmdldCwgc291cmNlLCBvdmVyd3JpdGUpID0+IHtcbiAgZm9yIChjb25zdCBwcm9wIGluIHNvdXJjZSkge1xuICAgIGlmIChwcm9wICE9PSAnX19wcm90b19fJyAmJiBwcm9wICE9PSAnY29uc3RydWN0b3InKSB7XG4gICAgICBpZiAocHJvcCBpbiB0YXJnZXQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXRbcHJvcF0gPT09ICdzdHJpbmcnIHx8IHRhcmdldFtwcm9wXSBpbnN0YW5jZW9mIFN0cmluZyB8fCB0eXBlb2Ygc291cmNlW3Byb3BdID09PSAnc3RyaW5nJyB8fCBzb3VyY2VbcHJvcF0gaW5zdGFuY2VvZiBTdHJpbmcpIHtcbiAgICAgICAgICBpZiAob3ZlcndyaXRlKSB0YXJnZXRbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVlcEV4dGVuZCh0YXJnZXRbcHJvcF0sIHNvdXJjZVtwcm9wXSwgb3ZlcndyaXRlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0W3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufTtcbmNvbnN0IHJlZ2V4RXNjYXBlID0gc3RyID0+IHN0ci5yZXBsYWNlKC9bXFwtXFxbXFxdXFwvXFx7XFx9XFwoXFwpXFwqXFwrXFw/XFwuXFxcXFxcXlxcJFxcfF0vZywgJ1xcXFwkJicpO1xudmFyIF9lbnRpdHlNYXAgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgXCInXCI6ICcmIzM5OycsXG4gICcvJzogJyYjeDJGOydcbn07XG5jb25zdCBlc2NhcGUgPSBkYXRhID0+IHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBkYXRhLnJlcGxhY2UoL1smPD5cIidcXC9dL2csIHMgPT4gX2VudGl0eU1hcFtzXSk7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59O1xuY2xhc3MgUmVnRXhwQ2FjaGUge1xuICBjb25zdHJ1Y3RvcihjYXBhY2l0eSkge1xuICAgIHRoaXMuY2FwYWNpdHkgPSBjYXBhY2l0eTtcbiAgICB0aGlzLnJlZ0V4cE1hcCA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLnJlZ0V4cFF1ZXVlID0gW107XG4gIH1cbiAgZ2V0UmVnRXhwKHBhdHRlcm4pIHtcbiAgICBjb25zdCByZWdFeHBGcm9tQ2FjaGUgPSB0aGlzLnJlZ0V4cE1hcC5nZXQocGF0dGVybik7XG4gICAgaWYgKHJlZ0V4cEZyb21DYWNoZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcmVnRXhwRnJvbUNhY2hlO1xuICAgIH1cbiAgICBjb25zdCByZWdFeHBOZXcgPSBuZXcgUmVnRXhwKHBhdHRlcm4pO1xuICAgIGlmICh0aGlzLnJlZ0V4cFF1ZXVlLmxlbmd0aCA9PT0gdGhpcy5jYXBhY2l0eSkge1xuICAgICAgdGhpcy5yZWdFeHBNYXAuZGVsZXRlKHRoaXMucmVnRXhwUXVldWUuc2hpZnQoKSk7XG4gICAgfVxuICAgIHRoaXMucmVnRXhwTWFwLnNldChwYXR0ZXJuLCByZWdFeHBOZXcpO1xuICAgIHRoaXMucmVnRXhwUXVldWUucHVzaChwYXR0ZXJuKTtcbiAgICByZXR1cm4gcmVnRXhwTmV3O1xuICB9XG59XG5jb25zdCBjaGFycyA9IFsnICcsICcsJywgJz8nLCAnIScsICc7J107XG5jb25zdCBsb29rc0xpa2VPYmplY3RQYXRoUmVnRXhwQ2FjaGUgPSBuZXcgUmVnRXhwQ2FjaGUoMjApO1xuY29uc3QgbG9va3NMaWtlT2JqZWN0UGF0aCA9IChrZXksIG5zU2VwYXJhdG9yLCBrZXlTZXBhcmF0b3IpID0+IHtcbiAgbnNTZXBhcmF0b3IgPSBuc1NlcGFyYXRvciB8fCAnJztcbiAga2V5U2VwYXJhdG9yID0ga2V5U2VwYXJhdG9yIHx8ICcnO1xuICBjb25zdCBwb3NzaWJsZUNoYXJzID0gY2hhcnMuZmlsdGVyKGMgPT4gbnNTZXBhcmF0b3IuaW5kZXhPZihjKSA8IDAgJiYga2V5U2VwYXJhdG9yLmluZGV4T2YoYykgPCAwKTtcbiAgaWYgKHBvc3NpYmxlQ2hhcnMubGVuZ3RoID09PSAwKSByZXR1cm4gdHJ1ZTtcbiAgY29uc3QgciA9IGxvb2tzTGlrZU9iamVjdFBhdGhSZWdFeHBDYWNoZS5nZXRSZWdFeHAoYCgke3Bvc3NpYmxlQ2hhcnMubWFwKGMgPT4gYyA9PT0gJz8nID8gJ1xcXFw/JyA6IGMpLmpvaW4oJ3wnKX0pYCk7XG4gIGxldCBtYXRjaGVkID0gIXIudGVzdChrZXkpO1xuICBpZiAoIW1hdGNoZWQpIHtcbiAgICBjb25zdCBraSA9IGtleS5pbmRleE9mKGtleVNlcGFyYXRvcik7XG4gICAgaWYgKGtpID4gMCAmJiAhci50ZXN0KGtleS5zdWJzdHJpbmcoMCwga2kpKSkge1xuICAgICAgbWF0Y2hlZCA9IHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBtYXRjaGVkO1xufTtcbmNvbnN0IGRlZXBGaW5kID0gZnVuY3Rpb24gKG9iaiwgcGF0aCkge1xuICBsZXQga2V5U2VwYXJhdG9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnLic7XG4gIGlmICghb2JqKSByZXR1cm4gdW5kZWZpbmVkO1xuICBpZiAob2JqW3BhdGhdKSByZXR1cm4gb2JqW3BhdGhdO1xuICBjb25zdCB0b2tlbnMgPSBwYXRoLnNwbGl0KGtleVNlcGFyYXRvcik7XG4gIGxldCBjdXJyZW50ID0gb2JqO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7KSB7XG4gICAgaWYgKCFjdXJyZW50IHx8IHR5cGVvZiBjdXJyZW50ICE9PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgbGV0IG5leHQ7XG4gICAgbGV0IG5leHRQYXRoID0gJyc7XG4gICAgZm9yIChsZXQgaiA9IGk7IGogPCB0b2tlbnMubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChqICE9PSBpKSB7XG4gICAgICAgIG5leHRQYXRoICs9IGtleVNlcGFyYXRvcjtcbiAgICAgIH1cbiAgICAgIG5leHRQYXRoICs9IHRva2Vuc1tqXTtcbiAgICAgIG5leHQgPSBjdXJyZW50W25leHRQYXRoXTtcbiAgICAgIGlmIChuZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlcicsICdib29sZWFuJ10uaW5kZXhPZih0eXBlb2YgbmV4dCkgPiAtMSAmJiBqIDwgdG9rZW5zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpICs9IGogLSBpICsgMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGN1cnJlbnQgPSBuZXh0O1xuICB9XG4gIHJldHVybiBjdXJyZW50O1xufTtcbmNvbnN0IGdldENsZWFuZWRDb2RlID0gY29kZSA9PiB7XG4gIGlmIChjb2RlICYmIGNvZGUuaW5kZXhPZignXycpID4gMCkgcmV0dXJuIGNvZGUucmVwbGFjZSgnXycsICctJyk7XG4gIHJldHVybiBjb2RlO1xufTtcblxuY2xhc3MgUmVzb3VyY2VTdG9yZSBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge1xuICAgICAgbnM6IFsndHJhbnNsYXRpb24nXSxcbiAgICAgIGRlZmF1bHROUzogJ3RyYW5zbGF0aW9uJ1xuICAgIH07XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmRhdGEgPSBkYXRhIHx8IHt9O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5vcHRpb25zLmtleVNlcGFyYXRvciA9ICcuJztcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5pZ25vcmVKU09OU3RydWN0dXJlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5pZ25vcmVKU09OU3RydWN0dXJlID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgYWRkTmFtZXNwYWNlcyhucykge1xuICAgIGlmICh0aGlzLm9wdGlvbnMubnMuaW5kZXhPZihucykgPCAwKSB7XG4gICAgICB0aGlzLm9wdGlvbnMubnMucHVzaChucyk7XG4gICAgfVxuICB9XG4gIHJlbW92ZU5hbWVzcGFjZXMobnMpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMub3B0aW9ucy5ucy5pbmRleE9mKG5zKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgdGhpcy5vcHRpb25zLm5zLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9XG4gIGdldFJlc291cmNlKGxuZywgbnMsIGtleSkge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fTtcbiAgICBjb25zdCBrZXlTZXBhcmF0b3IgPSBvcHRpb25zLmtleVNlcGFyYXRvciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5rZXlTZXBhcmF0b3IgOiB0aGlzLm9wdGlvbnMua2V5U2VwYXJhdG9yO1xuICAgIGNvbnN0IGlnbm9yZUpTT05TdHJ1Y3R1cmUgPSBvcHRpb25zLmlnbm9yZUpTT05TdHJ1Y3R1cmUgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuaWdub3JlSlNPTlN0cnVjdHVyZSA6IHRoaXMub3B0aW9ucy5pZ25vcmVKU09OU3RydWN0dXJlO1xuICAgIGxldCBwYXRoO1xuICAgIGlmIChsbmcuaW5kZXhPZignLicpID4gLTEpIHtcbiAgICAgIHBhdGggPSBsbmcuc3BsaXQoJy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGF0aCA9IFtsbmcsIG5zXTtcbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoa2V5KSkge1xuICAgICAgICAgIHBhdGgucHVzaCguLi5rZXkpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleVNlcGFyYXRvcikge1xuICAgICAgICAgIHBhdGgucHVzaCguLi5rZXkuc3BsaXQoa2V5U2VwYXJhdG9yKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGF0aC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gZ2V0UGF0aCh0aGlzLmRhdGEsIHBhdGgpO1xuICAgIGlmICghcmVzdWx0ICYmICFucyAmJiAha2V5ICYmIGxuZy5pbmRleE9mKCcuJykgPiAtMSkge1xuICAgICAgbG5nID0gcGF0aFswXTtcbiAgICAgIG5zID0gcGF0aFsxXTtcbiAgICAgIGtleSA9IHBhdGguc2xpY2UoMikuam9pbignLicpO1xuICAgIH1cbiAgICBpZiAocmVzdWx0IHx8ICFpZ25vcmVKU09OU3RydWN0dXJlIHx8IHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnKSByZXR1cm4gcmVzdWx0O1xuICAgIHJldHVybiBkZWVwRmluZCh0aGlzLmRhdGEgJiYgdGhpcy5kYXRhW2xuZ10gJiYgdGhpcy5kYXRhW2xuZ11bbnNdLCBrZXksIGtleVNlcGFyYXRvcik7XG4gIH1cbiAgYWRkUmVzb3VyY2UobG5nLCBucywga2V5LCB2YWx1ZSkge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiB7XG4gICAgICBzaWxlbnQ6IGZhbHNlXG4gICAgfTtcbiAgICBjb25zdCBrZXlTZXBhcmF0b3IgPSBvcHRpb25zLmtleVNlcGFyYXRvciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5rZXlTZXBhcmF0b3IgOiB0aGlzLm9wdGlvbnMua2V5U2VwYXJhdG9yO1xuICAgIGxldCBwYXRoID0gW2xuZywgbnNdO1xuICAgIGlmIChrZXkpIHBhdGggPSBwYXRoLmNvbmNhdChrZXlTZXBhcmF0b3IgPyBrZXkuc3BsaXQoa2V5U2VwYXJhdG9yKSA6IGtleSk7XG4gICAgaWYgKGxuZy5pbmRleE9mKCcuJykgPiAtMSkge1xuICAgICAgcGF0aCA9IGxuZy5zcGxpdCgnLicpO1xuICAgICAgdmFsdWUgPSBucztcbiAgICAgIG5zID0gcGF0aFsxXTtcbiAgICB9XG4gICAgdGhpcy5hZGROYW1lc3BhY2VzKG5zKTtcbiAgICBzZXRQYXRoKHRoaXMuZGF0YSwgcGF0aCwgdmFsdWUpO1xuICAgIGlmICghb3B0aW9ucy5zaWxlbnQpIHRoaXMuZW1pdCgnYWRkZWQnLCBsbmcsIG5zLCBrZXksIHZhbHVlKTtcbiAgfVxuICBhZGRSZXNvdXJjZXMobG5nLCBucywgcmVzb3VyY2VzKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHtcbiAgICAgIHNpbGVudDogZmFsc2VcbiAgICB9O1xuICAgIGZvciAoY29uc3QgbSBpbiByZXNvdXJjZXMpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVzb3VyY2VzW21dID09PSAnc3RyaW5nJyB8fCBBcnJheS5pc0FycmF5KHJlc291cmNlc1ttXSkpIHRoaXMuYWRkUmVzb3VyY2UobG5nLCBucywgbSwgcmVzb3VyY2VzW21dLCB7XG4gICAgICAgIHNpbGVudDogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICghb3B0aW9ucy5zaWxlbnQpIHRoaXMuZW1pdCgnYWRkZWQnLCBsbmcsIG5zLCByZXNvdXJjZXMpO1xuICB9XG4gIGFkZFJlc291cmNlQnVuZGxlKGxuZywgbnMsIHJlc291cmNlcywgZGVlcCwgb3ZlcndyaXRlKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IHtcbiAgICAgIHNpbGVudDogZmFsc2UsXG4gICAgICBza2lwQ29weTogZmFsc2VcbiAgICB9O1xuICAgIGxldCBwYXRoID0gW2xuZywgbnNdO1xuICAgIGlmIChsbmcuaW5kZXhPZignLicpID4gLTEpIHtcbiAgICAgIHBhdGggPSBsbmcuc3BsaXQoJy4nKTtcbiAgICAgIGRlZXAgPSByZXNvdXJjZXM7XG4gICAgICByZXNvdXJjZXMgPSBucztcbiAgICAgIG5zID0gcGF0aFsxXTtcbiAgICB9XG4gICAgdGhpcy5hZGROYW1lc3BhY2VzKG5zKTtcbiAgICBsZXQgcGFjayA9IGdldFBhdGgodGhpcy5kYXRhLCBwYXRoKSB8fCB7fTtcbiAgICBpZiAoIW9wdGlvbnMuc2tpcENvcHkpIHJlc291cmNlcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocmVzb3VyY2VzKSk7XG4gICAgaWYgKGRlZXApIHtcbiAgICAgIGRlZXBFeHRlbmQocGFjaywgcmVzb3VyY2VzLCBvdmVyd3JpdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYWNrID0ge1xuICAgICAgICAuLi5wYWNrLFxuICAgICAgICAuLi5yZXNvdXJjZXNcbiAgICAgIH07XG4gICAgfVxuICAgIHNldFBhdGgodGhpcy5kYXRhLCBwYXRoLCBwYWNrKTtcbiAgICBpZiAoIW9wdGlvbnMuc2lsZW50KSB0aGlzLmVtaXQoJ2FkZGVkJywgbG5nLCBucywgcmVzb3VyY2VzKTtcbiAgfVxuICByZW1vdmVSZXNvdXJjZUJ1bmRsZShsbmcsIG5zKSB7XG4gICAgaWYgKHRoaXMuaGFzUmVzb3VyY2VCdW5kbGUobG5nLCBucykpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmRhdGFbbG5nXVtuc107XG4gICAgfVxuICAgIHRoaXMucmVtb3ZlTmFtZXNwYWNlcyhucyk7XG4gICAgdGhpcy5lbWl0KCdyZW1vdmVkJywgbG5nLCBucyk7XG4gIH1cbiAgaGFzUmVzb3VyY2VCdW5kbGUobG5nLCBucykge1xuICAgIHJldHVybiB0aGlzLmdldFJlc291cmNlKGxuZywgbnMpICE9PSB1bmRlZmluZWQ7XG4gIH1cbiAgZ2V0UmVzb3VyY2VCdW5kbGUobG5nLCBucykge1xuICAgIGlmICghbnMpIG5zID0gdGhpcy5vcHRpb25zLmRlZmF1bHROUztcbiAgICBpZiAodGhpcy5vcHRpb25zLmNvbXBhdGliaWxpdHlBUEkgPT09ICd2MScpIHJldHVybiB7XG4gICAgICAuLi57fSxcbiAgICAgIC4uLnRoaXMuZ2V0UmVzb3VyY2UobG5nLCBucylcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmdldFJlc291cmNlKGxuZywgbnMpO1xuICB9XG4gIGdldERhdGFCeUxhbmd1YWdlKGxuZykge1xuICAgIHJldHVybiB0aGlzLmRhdGFbbG5nXTtcbiAgfVxuICBoYXNMYW5ndWFnZVNvbWVUcmFuc2xhdGlvbnMobG5nKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuZ2V0RGF0YUJ5TGFuZ3VhZ2UobG5nKTtcbiAgICBjb25zdCBuID0gZGF0YSAmJiBPYmplY3Qua2V5cyhkYXRhKSB8fCBbXTtcbiAgICByZXR1cm4gISFuLmZpbmQodiA9PiBkYXRhW3ZdICYmIE9iamVjdC5rZXlzKGRhdGFbdl0pLmxlbmd0aCA+IDApO1xuICB9XG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhO1xuICB9XG59XG5cbnZhciBwb3N0UHJvY2Vzc29yID0ge1xuICBwcm9jZXNzb3JzOiB7fSxcbiAgYWRkUG9zdFByb2Nlc3Nvcihtb2R1bGUpIHtcbiAgICB0aGlzLnByb2Nlc3NvcnNbbW9kdWxlLm5hbWVdID0gbW9kdWxlO1xuICB9LFxuICBoYW5kbGUocHJvY2Vzc29ycywgdmFsdWUsIGtleSwgb3B0aW9ucywgdHJhbnNsYXRvcikge1xuICAgIHByb2Nlc3NvcnMuZm9yRWFjaChwcm9jZXNzb3IgPT4ge1xuICAgICAgaWYgKHRoaXMucHJvY2Vzc29yc1twcm9jZXNzb3JdKSB2YWx1ZSA9IHRoaXMucHJvY2Vzc29yc1twcm9jZXNzb3JdLnByb2Nlc3ModmFsdWUsIGtleSwgb3B0aW9ucywgdHJhbnNsYXRvcik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59O1xuXG5jb25zdCBjaGVja2VkTG9hZGVkRm9yID0ge307XG5jbGFzcyBUcmFuc2xhdG9yIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3Ioc2VydmljZXMpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgc3VwZXIoKTtcbiAgICBjb3B5KFsncmVzb3VyY2VTdG9yZScsICdsYW5ndWFnZVV0aWxzJywgJ3BsdXJhbFJlc29sdmVyJywgJ2ludGVycG9sYXRvcicsICdiYWNrZW5kQ29ubmVjdG9yJywgJ2kxOG5Gb3JtYXQnLCAndXRpbHMnXSwgc2VydmljZXMsIHRoaXMpO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5vcHRpb25zLmtleVNlcGFyYXRvciA9ICcuJztcbiAgICB9XG4gICAgdGhpcy5sb2dnZXIgPSBiYXNlTG9nZ2VyLmNyZWF0ZSgndHJhbnNsYXRvcicpO1xuICB9XG4gIGNoYW5nZUxhbmd1YWdlKGxuZykge1xuICAgIGlmIChsbmcpIHRoaXMubGFuZ3VhZ2UgPSBsbmc7XG4gIH1cbiAgZXhpc3RzKGtleSkge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7XG4gICAgICBpbnRlcnBvbGF0aW9uOiB7fVxuICAgIH07XG4gICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkIHx8IGtleSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCByZXNvbHZlZCA9IHRoaXMucmVzb2x2ZShrZXksIG9wdGlvbnMpO1xuICAgIHJldHVybiByZXNvbHZlZCAmJiByZXNvbHZlZC5yZXMgIT09IHVuZGVmaW5lZDtcbiAgfVxuICBleHRyYWN0RnJvbUtleShrZXksIG9wdGlvbnMpIHtcbiAgICBsZXQgbnNTZXBhcmF0b3IgPSBvcHRpb25zLm5zU2VwYXJhdG9yICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm5zU2VwYXJhdG9yIDogdGhpcy5vcHRpb25zLm5zU2VwYXJhdG9yO1xuICAgIGlmIChuc1NlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSBuc1NlcGFyYXRvciA9ICc6JztcbiAgICBjb25zdCBrZXlTZXBhcmF0b3IgPSBvcHRpb25zLmtleVNlcGFyYXRvciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5rZXlTZXBhcmF0b3IgOiB0aGlzLm9wdGlvbnMua2V5U2VwYXJhdG9yO1xuICAgIGxldCBuYW1lc3BhY2VzID0gb3B0aW9ucy5ucyB8fCB0aGlzLm9wdGlvbnMuZGVmYXVsdE5TIHx8IFtdO1xuICAgIGNvbnN0IHdvdWxkQ2hlY2tGb3JOc0luS2V5ID0gbnNTZXBhcmF0b3IgJiYga2V5LmluZGV4T2YobnNTZXBhcmF0b3IpID4gLTE7XG4gICAgY29uc3Qgc2VlbXNOYXR1cmFsTGFuZ3VhZ2UgPSAhdGhpcy5vcHRpb25zLnVzZXJEZWZpbmVkS2V5U2VwYXJhdG9yICYmICFvcHRpb25zLmtleVNlcGFyYXRvciAmJiAhdGhpcy5vcHRpb25zLnVzZXJEZWZpbmVkTnNTZXBhcmF0b3IgJiYgIW9wdGlvbnMubnNTZXBhcmF0b3IgJiYgIWxvb2tzTGlrZU9iamVjdFBhdGgoa2V5LCBuc1NlcGFyYXRvciwga2V5U2VwYXJhdG9yKTtcbiAgICBpZiAod291bGRDaGVja0Zvck5zSW5LZXkgJiYgIXNlZW1zTmF0dXJhbExhbmd1YWdlKSB7XG4gICAgICBjb25zdCBtID0ga2V5Lm1hdGNoKHRoaXMuaW50ZXJwb2xhdG9yLm5lc3RpbmdSZWdleHApO1xuICAgICAgaWYgKG0gJiYgbS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAga2V5LFxuICAgICAgICAgIG5hbWVzcGFjZXNcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHBhcnRzID0ga2V5LnNwbGl0KG5zU2VwYXJhdG9yKTtcbiAgICAgIGlmIChuc1NlcGFyYXRvciAhPT0ga2V5U2VwYXJhdG9yIHx8IG5zU2VwYXJhdG9yID09PSBrZXlTZXBhcmF0b3IgJiYgdGhpcy5vcHRpb25zLm5zLmluZGV4T2YocGFydHNbMF0pID4gLTEpIG5hbWVzcGFjZXMgPSBwYXJ0cy5zaGlmdCgpO1xuICAgICAga2V5ID0gcGFydHMuam9pbihrZXlTZXBhcmF0b3IpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnKSBuYW1lc3BhY2VzID0gW25hbWVzcGFjZXNdO1xuICAgIHJldHVybiB7XG4gICAgICBrZXksXG4gICAgICBuYW1lc3BhY2VzXG4gICAgfTtcbiAgfVxuICB0cmFuc2xhdGUoa2V5cywgb3B0aW9ucywgbGFzdEtleSkge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcgJiYgdGhpcy5vcHRpb25zLm92ZXJsb2FkVHJhbnNsYXRpb25PcHRpb25IYW5kbGVyKSB7XG4gICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zLm92ZXJsb2FkVHJhbnNsYXRpb25PcHRpb25IYW5kbGVyKGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ29iamVjdCcpIG9wdGlvbnMgPSB7XG4gICAgICAuLi5vcHRpb25zXG4gICAgfTtcbiAgICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcbiAgICBpZiAoa2V5cyA9PT0gdW5kZWZpbmVkIHx8IGtleXMgPT09IG51bGwpIHJldHVybiAnJztcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoa2V5cykpIGtleXMgPSBbU3RyaW5nKGtleXMpXTtcbiAgICBjb25zdCByZXR1cm5EZXRhaWxzID0gb3B0aW9ucy5yZXR1cm5EZXRhaWxzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLnJldHVybkRldGFpbHMgOiB0aGlzLm9wdGlvbnMucmV0dXJuRGV0YWlscztcbiAgICBjb25zdCBrZXlTZXBhcmF0b3IgPSBvcHRpb25zLmtleVNlcGFyYXRvciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5rZXlTZXBhcmF0b3IgOiB0aGlzLm9wdGlvbnMua2V5U2VwYXJhdG9yO1xuICAgIGNvbnN0IHtcbiAgICAgIGtleSxcbiAgICAgIG5hbWVzcGFjZXNcbiAgICB9ID0gdGhpcy5leHRyYWN0RnJvbUtleShrZXlzW2tleXMubGVuZ3RoIC0gMV0sIG9wdGlvbnMpO1xuICAgIGNvbnN0IG5hbWVzcGFjZSA9IG5hbWVzcGFjZXNbbmFtZXNwYWNlcy5sZW5ndGggLSAxXTtcbiAgICBjb25zdCBsbmcgPSBvcHRpb25zLmxuZyB8fCB0aGlzLmxhbmd1YWdlO1xuICAgIGNvbnN0IGFwcGVuZE5hbWVzcGFjZVRvQ0lNb2RlID0gb3B0aW9ucy5hcHBlbmROYW1lc3BhY2VUb0NJTW9kZSB8fCB0aGlzLm9wdGlvbnMuYXBwZW5kTmFtZXNwYWNlVG9DSU1vZGU7XG4gICAgaWYgKGxuZyAmJiBsbmcudG9Mb3dlckNhc2UoKSA9PT0gJ2NpbW9kZScpIHtcbiAgICAgIGlmIChhcHBlbmROYW1lc3BhY2VUb0NJTW9kZSkge1xuICAgICAgICBjb25zdCBuc1NlcGFyYXRvciA9IG9wdGlvbnMubnNTZXBhcmF0b3IgfHwgdGhpcy5vcHRpb25zLm5zU2VwYXJhdG9yO1xuICAgICAgICBpZiAocmV0dXJuRGV0YWlscykge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXM6IGAke25hbWVzcGFjZX0ke25zU2VwYXJhdG9yfSR7a2V5fWAsXG4gICAgICAgICAgICB1c2VkS2V5OiBrZXksXG4gICAgICAgICAgICBleGFjdFVzZWRLZXk6IGtleSxcbiAgICAgICAgICAgIHVzZWRMbmc6IGxuZyxcbiAgICAgICAgICAgIHVzZWROUzogbmFtZXNwYWNlLFxuICAgICAgICAgICAgdXNlZFBhcmFtczogdGhpcy5nZXRVc2VkUGFyYW1zRGV0YWlscyhvcHRpb25zKVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAke25hbWVzcGFjZX0ke25zU2VwYXJhdG9yfSR7a2V5fWA7XG4gICAgICB9XG4gICAgICBpZiAocmV0dXJuRGV0YWlscykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHJlczoga2V5LFxuICAgICAgICAgIHVzZWRLZXk6IGtleSxcbiAgICAgICAgICBleGFjdFVzZWRLZXk6IGtleSxcbiAgICAgICAgICB1c2VkTG5nOiBsbmcsXG4gICAgICAgICAgdXNlZE5TOiBuYW1lc3BhY2UsXG4gICAgICAgICAgdXNlZFBhcmFtczogdGhpcy5nZXRVc2VkUGFyYW1zRGV0YWlscyhvcHRpb25zKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gICAgY29uc3QgcmVzb2x2ZWQgPSB0aGlzLnJlc29sdmUoa2V5cywgb3B0aW9ucyk7XG4gICAgbGV0IHJlcyA9IHJlc29sdmVkICYmIHJlc29sdmVkLnJlcztcbiAgICBjb25zdCByZXNVc2VkS2V5ID0gcmVzb2x2ZWQgJiYgcmVzb2x2ZWQudXNlZEtleSB8fCBrZXk7XG4gICAgY29uc3QgcmVzRXhhY3RVc2VkS2V5ID0gcmVzb2x2ZWQgJiYgcmVzb2x2ZWQuZXhhY3RVc2VkS2V5IHx8IGtleTtcbiAgICBjb25zdCByZXNUeXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5hcHBseShyZXMpO1xuICAgIGNvbnN0IG5vT2JqZWN0ID0gWydbb2JqZWN0IE51bWJlcl0nLCAnW29iamVjdCBGdW5jdGlvbl0nLCAnW29iamVjdCBSZWdFeHBdJ107XG4gICAgY29uc3Qgam9pbkFycmF5cyA9IG9wdGlvbnMuam9pbkFycmF5cyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5qb2luQXJyYXlzIDogdGhpcy5vcHRpb25zLmpvaW5BcnJheXM7XG4gICAgY29uc3QgaGFuZGxlQXNPYmplY3RJbkkxOG5Gb3JtYXQgPSAhdGhpcy5pMThuRm9ybWF0IHx8IHRoaXMuaTE4bkZvcm1hdC5oYW5kbGVBc09iamVjdDtcbiAgICBjb25zdCBoYW5kbGVBc09iamVjdCA9IHR5cGVvZiByZXMgIT09ICdzdHJpbmcnICYmIHR5cGVvZiByZXMgIT09ICdib29sZWFuJyAmJiB0eXBlb2YgcmVzICE9PSAnbnVtYmVyJztcbiAgICBpZiAoaGFuZGxlQXNPYmplY3RJbkkxOG5Gb3JtYXQgJiYgcmVzICYmIGhhbmRsZUFzT2JqZWN0ICYmIG5vT2JqZWN0LmluZGV4T2YocmVzVHlwZSkgPCAwICYmICEodHlwZW9mIGpvaW5BcnJheXMgPT09ICdzdHJpbmcnICYmIEFycmF5LmlzQXJyYXkocmVzKSkpIHtcbiAgICAgIGlmICghb3B0aW9ucy5yZXR1cm5PYmplY3RzICYmICF0aGlzLm9wdGlvbnMucmV0dXJuT2JqZWN0cykge1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5yZXR1cm5lZE9iamVjdEhhbmRsZXIpIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKCdhY2Nlc3NpbmcgYW4gb2JqZWN0IC0gYnV0IHJldHVybk9iamVjdHMgb3B0aW9ucyBpcyBub3QgZW5hYmxlZCEnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByID0gdGhpcy5vcHRpb25zLnJldHVybmVkT2JqZWN0SGFuZGxlciA/IHRoaXMub3B0aW9ucy5yZXR1cm5lZE9iamVjdEhhbmRsZXIocmVzVXNlZEtleSwgcmVzLCB7XG4gICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICBuczogbmFtZXNwYWNlc1xuICAgICAgICB9KSA6IGBrZXkgJyR7a2V5fSAoJHt0aGlzLmxhbmd1YWdlfSknIHJldHVybmVkIGFuIG9iamVjdCBpbnN0ZWFkIG9mIHN0cmluZy5gO1xuICAgICAgICBpZiAocmV0dXJuRGV0YWlscykge1xuICAgICAgICAgIHJlc29sdmVkLnJlcyA9IHI7XG4gICAgICAgICAgcmVzb2x2ZWQudXNlZFBhcmFtcyA9IHRoaXMuZ2V0VXNlZFBhcmFtc0RldGFpbHMob3B0aW9ucyk7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByO1xuICAgICAgfVxuICAgICAgaWYgKGtleVNlcGFyYXRvcikge1xuICAgICAgICBjb25zdCByZXNUeXBlSXNBcnJheSA9IEFycmF5LmlzQXJyYXkocmVzKTtcbiAgICAgICAgY29uc3QgY29weSA9IHJlc1R5cGVJc0FycmF5ID8gW10gOiB7fTtcbiAgICAgICAgY29uc3QgbmV3S2V5VG9Vc2UgPSByZXNUeXBlSXNBcnJheSA/IHJlc0V4YWN0VXNlZEtleSA6IHJlc1VzZWRLZXk7XG4gICAgICAgIGZvciAoY29uc3QgbSBpbiByZXMpIHtcbiAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlcywgbSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlZXBLZXkgPSBgJHtuZXdLZXlUb1VzZX0ke2tleVNlcGFyYXRvcn0ke219YDtcbiAgICAgICAgICAgIGNvcHlbbV0gPSB0aGlzLnRyYW5zbGF0ZShkZWVwS2V5LCB7XG4gICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAgIC4uLntcbiAgICAgICAgICAgICAgICBqb2luQXJyYXlzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBuczogbmFtZXNwYWNlc1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChjb3B5W21dID09PSBkZWVwS2V5KSBjb3B5W21dID0gcmVzW21dO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXMgPSBjb3B5O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaGFuZGxlQXNPYmplY3RJbkkxOG5Gb3JtYXQgJiYgdHlwZW9mIGpvaW5BcnJheXMgPT09ICdzdHJpbmcnICYmIEFycmF5LmlzQXJyYXkocmVzKSkge1xuICAgICAgcmVzID0gcmVzLmpvaW4oam9pbkFycmF5cyk7XG4gICAgICBpZiAocmVzKSByZXMgPSB0aGlzLmV4dGVuZFRyYW5zbGF0aW9uKHJlcywga2V5cywgb3B0aW9ucywgbGFzdEtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCB1c2VkRGVmYXVsdCA9IGZhbHNlO1xuICAgICAgbGV0IHVzZWRLZXkgPSBmYWxzZTtcbiAgICAgIGNvbnN0IG5lZWRzUGx1cmFsSGFuZGxpbmcgPSBvcHRpb25zLmNvdW50ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9wdGlvbnMuY291bnQgIT09ICdzdHJpbmcnO1xuICAgICAgY29uc3QgaGFzRGVmYXVsdFZhbHVlID0gVHJhbnNsYXRvci5oYXNEZWZhdWx0VmFsdWUob3B0aW9ucyk7XG4gICAgICBjb25zdCBkZWZhdWx0VmFsdWVTdWZmaXggPSBuZWVkc1BsdXJhbEhhbmRsaW5nID8gdGhpcy5wbHVyYWxSZXNvbHZlci5nZXRTdWZmaXgobG5nLCBvcHRpb25zLmNvdW50LCBvcHRpb25zKSA6ICcnO1xuICAgICAgY29uc3QgZGVmYXVsdFZhbHVlU3VmZml4T3JkaW5hbEZhbGxiYWNrID0gb3B0aW9ucy5vcmRpbmFsICYmIG5lZWRzUGx1cmFsSGFuZGxpbmcgPyB0aGlzLnBsdXJhbFJlc29sdmVyLmdldFN1ZmZpeChsbmcsIG9wdGlvbnMuY291bnQsIHtcbiAgICAgICAgb3JkaW5hbDogZmFsc2VcbiAgICAgIH0pIDogJyc7XG4gICAgICBjb25zdCBuZWVkc1plcm9TdWZmaXhMb29rdXAgPSBuZWVkc1BsdXJhbEhhbmRsaW5nICYmICFvcHRpb25zLm9yZGluYWwgJiYgb3B0aW9ucy5jb3VudCA9PT0gMCAmJiB0aGlzLnBsdXJhbFJlc29sdmVyLnNob3VsZFVzZUludGxBcGkoKTtcbiAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IG5lZWRzWmVyb1N1ZmZpeExvb2t1cCAmJiBvcHRpb25zW2BkZWZhdWx0VmFsdWUke3RoaXMub3B0aW9ucy5wbHVyYWxTZXBhcmF0b3J9emVyb2BdIHx8IG9wdGlvbnNbYGRlZmF1bHRWYWx1ZSR7ZGVmYXVsdFZhbHVlU3VmZml4fWBdIHx8IG9wdGlvbnNbYGRlZmF1bHRWYWx1ZSR7ZGVmYXVsdFZhbHVlU3VmZml4T3JkaW5hbEZhbGxiYWNrfWBdIHx8IG9wdGlvbnMuZGVmYXVsdFZhbHVlO1xuICAgICAgaWYgKCF0aGlzLmlzVmFsaWRMb29rdXAocmVzKSAmJiBoYXNEZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgdXNlZERlZmF1bHQgPSB0cnVlO1xuICAgICAgICByZXMgPSBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuaXNWYWxpZExvb2t1cChyZXMpKSB7XG4gICAgICAgIHVzZWRLZXkgPSB0cnVlO1xuICAgICAgICByZXMgPSBrZXk7XG4gICAgICB9XG4gICAgICBjb25zdCBtaXNzaW5nS2V5Tm9WYWx1ZUZhbGxiYWNrVG9LZXkgPSBvcHRpb25zLm1pc3NpbmdLZXlOb1ZhbHVlRmFsbGJhY2tUb0tleSB8fCB0aGlzLm9wdGlvbnMubWlzc2luZ0tleU5vVmFsdWVGYWxsYmFja1RvS2V5O1xuICAgICAgY29uc3QgcmVzRm9yTWlzc2luZyA9IG1pc3NpbmdLZXlOb1ZhbHVlRmFsbGJhY2tUb0tleSAmJiB1c2VkS2V5ID8gdW5kZWZpbmVkIDogcmVzO1xuICAgICAgY29uc3QgdXBkYXRlTWlzc2luZyA9IGhhc0RlZmF1bHRWYWx1ZSAmJiBkZWZhdWx0VmFsdWUgIT09IHJlcyAmJiB0aGlzLm9wdGlvbnMudXBkYXRlTWlzc2luZztcbiAgICAgIGlmICh1c2VkS2V5IHx8IHVzZWREZWZhdWx0IHx8IHVwZGF0ZU1pc3NpbmcpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIubG9nKHVwZGF0ZU1pc3NpbmcgPyAndXBkYXRlS2V5JyA6ICdtaXNzaW5nS2V5JywgbG5nLCBuYW1lc3BhY2UsIGtleSwgdXBkYXRlTWlzc2luZyA/IGRlZmF1bHRWYWx1ZSA6IHJlcyk7XG4gICAgICAgIGlmIChrZXlTZXBhcmF0b3IpIHtcbiAgICAgICAgICBjb25zdCBmayA9IHRoaXMucmVzb2x2ZShrZXksIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBrZXlTZXBhcmF0b3I6IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKGZrICYmIGZrLnJlcykgdGhpcy5sb2dnZXIud2FybignU2VlbXMgdGhlIGxvYWRlZCB0cmFuc2xhdGlvbnMgd2VyZSBpbiBmbGF0IEpTT04gZm9ybWF0IGluc3RlYWQgb2YgbmVzdGVkLiBFaXRoZXIgc2V0IGtleVNlcGFyYXRvcjogZmFsc2Ugb24gaW5pdCBvciBtYWtlIHN1cmUgeW91ciB0cmFuc2xhdGlvbnMgYXJlIHB1Ymxpc2hlZCBpbiBuZXN0ZWQgZm9ybWF0LicpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBsbmdzID0gW107XG4gICAgICAgIGNvbnN0IGZhbGxiYWNrTG5ncyA9IHRoaXMubGFuZ3VhZ2VVdGlscy5nZXRGYWxsYmFja0NvZGVzKHRoaXMub3B0aW9ucy5mYWxsYmFja0xuZywgb3B0aW9ucy5sbmcgfHwgdGhpcy5sYW5ndWFnZSk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2F2ZU1pc3NpbmdUbyA9PT0gJ2ZhbGxiYWNrJyAmJiBmYWxsYmFja0xuZ3MgJiYgZmFsbGJhY2tMbmdzWzBdKSB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmYWxsYmFja0xuZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxuZ3MucHVzaChmYWxsYmFja0xuZ3NbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuc2F2ZU1pc3NpbmdUbyA9PT0gJ2FsbCcpIHtcbiAgICAgICAgICBsbmdzID0gdGhpcy5sYW5ndWFnZVV0aWxzLnRvUmVzb2x2ZUhpZXJhcmNoeShvcHRpb25zLmxuZyB8fCB0aGlzLmxhbmd1YWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsbmdzLnB1c2gob3B0aW9ucy5sbmcgfHwgdGhpcy5sYW5ndWFnZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2VuZCA9IChsLCBrLCBzcGVjaWZpY0RlZmF1bHRWYWx1ZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGRlZmF1bHRGb3JNaXNzaW5nID0gaGFzRGVmYXVsdFZhbHVlICYmIHNwZWNpZmljRGVmYXVsdFZhbHVlICE9PSByZXMgPyBzcGVjaWZpY0RlZmF1bHRWYWx1ZSA6IHJlc0Zvck1pc3Npbmc7XG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5taXNzaW5nS2V5SGFuZGxlcikge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLm1pc3NpbmdLZXlIYW5kbGVyKGwsIG5hbWVzcGFjZSwgaywgZGVmYXVsdEZvck1pc3NpbmcsIHVwZGF0ZU1pc3NpbmcsIG9wdGlvbnMpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5iYWNrZW5kQ29ubmVjdG9yICYmIHRoaXMuYmFja2VuZENvbm5lY3Rvci5zYXZlTWlzc2luZykge1xuICAgICAgICAgICAgdGhpcy5iYWNrZW5kQ29ubmVjdG9yLnNhdmVNaXNzaW5nKGwsIG5hbWVzcGFjZSwgaywgZGVmYXVsdEZvck1pc3NpbmcsIHVwZGF0ZU1pc3NpbmcsIG9wdGlvbnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmVtaXQoJ21pc3NpbmdLZXknLCBsLCBuYW1lc3BhY2UsIGssIHJlcyk7XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2F2ZU1pc3NpbmcpIHtcbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNhdmVNaXNzaW5nUGx1cmFscyAmJiBuZWVkc1BsdXJhbEhhbmRsaW5nKSB7XG4gICAgICAgICAgICBsbmdzLmZvckVhY2gobGFuZ3VhZ2UgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBzdWZmaXhlcyA9IHRoaXMucGx1cmFsUmVzb2x2ZXIuZ2V0U3VmZml4ZXMobGFuZ3VhZ2UsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICBpZiAobmVlZHNaZXJvU3VmZml4TG9va3VwICYmIG9wdGlvbnNbYGRlZmF1bHRWYWx1ZSR7dGhpcy5vcHRpb25zLnBsdXJhbFNlcGFyYXRvcn16ZXJvYF0gJiYgc3VmZml4ZXMuaW5kZXhPZihgJHt0aGlzLm9wdGlvbnMucGx1cmFsU2VwYXJhdG9yfXplcm9gKSA8IDApIHtcbiAgICAgICAgICAgICAgICBzdWZmaXhlcy5wdXNoKGAke3RoaXMub3B0aW9ucy5wbHVyYWxTZXBhcmF0b3J9emVyb2ApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHN1ZmZpeGVzLmZvckVhY2goc3VmZml4ID0+IHtcbiAgICAgICAgICAgICAgICBzZW5kKFtsYW5ndWFnZV0sIGtleSArIHN1ZmZpeCwgb3B0aW9uc1tgZGVmYXVsdFZhbHVlJHtzdWZmaXh9YF0gfHwgZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VuZChsbmdzLCBrZXksIGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXMgPSB0aGlzLmV4dGVuZFRyYW5zbGF0aW9uKHJlcywga2V5cywgb3B0aW9ucywgcmVzb2x2ZWQsIGxhc3RLZXkpO1xuICAgICAgaWYgKHVzZWRLZXkgJiYgcmVzID09PSBrZXkgJiYgdGhpcy5vcHRpb25zLmFwcGVuZE5hbWVzcGFjZVRvTWlzc2luZ0tleSkgcmVzID0gYCR7bmFtZXNwYWNlfToke2tleX1gO1xuICAgICAgaWYgKCh1c2VkS2V5IHx8IHVzZWREZWZhdWx0KSAmJiB0aGlzLm9wdGlvbnMucGFyc2VNaXNzaW5nS2V5SGFuZGxlcikge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNvbXBhdGliaWxpdHlBUEkgIT09ICd2MScpIHtcbiAgICAgICAgICByZXMgPSB0aGlzLm9wdGlvbnMucGFyc2VNaXNzaW5nS2V5SGFuZGxlcih0aGlzLm9wdGlvbnMuYXBwZW5kTmFtZXNwYWNlVG9NaXNzaW5nS2V5ID8gYCR7bmFtZXNwYWNlfToke2tleX1gIDoga2V5LCB1c2VkRGVmYXVsdCA/IHJlcyA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzID0gdGhpcy5vcHRpb25zLnBhcnNlTWlzc2luZ0tleUhhbmRsZXIocmVzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAocmV0dXJuRGV0YWlscykge1xuICAgICAgcmVzb2x2ZWQucmVzID0gcmVzO1xuICAgICAgcmVzb2x2ZWQudXNlZFBhcmFtcyA9IHRoaXMuZ2V0VXNlZFBhcmFtc0RldGFpbHMob3B0aW9ucyk7XG4gICAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH1cbiAgZXh0ZW5kVHJhbnNsYXRpb24ocmVzLCBrZXksIG9wdGlvbnMsIHJlc29sdmVkLCBsYXN0S2V5KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICBpZiAodGhpcy5pMThuRm9ybWF0ICYmIHRoaXMuaTE4bkZvcm1hdC5wYXJzZSkge1xuICAgICAgcmVzID0gdGhpcy5pMThuRm9ybWF0LnBhcnNlKHJlcywge1xuICAgICAgICAuLi50aGlzLm9wdGlvbnMuaW50ZXJwb2xhdGlvbi5kZWZhdWx0VmFyaWFibGVzLFxuICAgICAgICAuLi5vcHRpb25zXG4gICAgICB9LCBvcHRpb25zLmxuZyB8fCB0aGlzLmxhbmd1YWdlIHx8IHJlc29sdmVkLnVzZWRMbmcsIHJlc29sdmVkLnVzZWROUywgcmVzb2x2ZWQudXNlZEtleSwge1xuICAgICAgICByZXNvbHZlZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghb3B0aW9ucy5za2lwSW50ZXJwb2xhdGlvbikge1xuICAgICAgaWYgKG9wdGlvbnMuaW50ZXJwb2xhdGlvbikgdGhpcy5pbnRlcnBvbGF0b3IuaW5pdCh7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIC4uLntcbiAgICAgICAgICBpbnRlcnBvbGF0aW9uOiB7XG4gICAgICAgICAgICAuLi50aGlzLm9wdGlvbnMuaW50ZXJwb2xhdGlvbixcbiAgICAgICAgICAgIC4uLm9wdGlvbnMuaW50ZXJwb2xhdGlvblxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjb25zdCBza2lwT25WYXJpYWJsZXMgPSB0eXBlb2YgcmVzID09PSAnc3RyaW5nJyAmJiAob3B0aW9ucyAmJiBvcHRpb25zLmludGVycG9sYXRpb24gJiYgb3B0aW9ucy5pbnRlcnBvbGF0aW9uLnNraXBPblZhcmlhYmxlcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5pbnRlcnBvbGF0aW9uLnNraXBPblZhcmlhYmxlcyA6IHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLnNraXBPblZhcmlhYmxlcyk7XG4gICAgICBsZXQgbmVzdEJlZjtcbiAgICAgIGlmIChza2lwT25WYXJpYWJsZXMpIHtcbiAgICAgICAgY29uc3QgbmIgPSByZXMubWF0Y2godGhpcy5pbnRlcnBvbGF0b3IubmVzdGluZ1JlZ2V4cCk7XG4gICAgICAgIG5lc3RCZWYgPSBuYiAmJiBuYi5sZW5ndGg7XG4gICAgICB9XG4gICAgICBsZXQgZGF0YSA9IG9wdGlvbnMucmVwbGFjZSAmJiB0eXBlb2Ygb3B0aW9ucy5yZXBsYWNlICE9PSAnc3RyaW5nJyA/IG9wdGlvbnMucmVwbGFjZSA6IG9wdGlvbnM7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uZGVmYXVsdFZhcmlhYmxlcykgZGF0YSA9IHtcbiAgICAgICAgLi4udGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uZGVmYXVsdFZhcmlhYmxlcyxcbiAgICAgICAgLi4uZGF0YVxuICAgICAgfTtcbiAgICAgIHJlcyA9IHRoaXMuaW50ZXJwb2xhdG9yLmludGVycG9sYXRlKHJlcywgZGF0YSwgb3B0aW9ucy5sbmcgfHwgdGhpcy5sYW5ndWFnZSB8fCByZXNvbHZlZC51c2VkTG5nLCBvcHRpb25zKTtcbiAgICAgIGlmIChza2lwT25WYXJpYWJsZXMpIHtcbiAgICAgICAgY29uc3QgbmEgPSByZXMubWF0Y2godGhpcy5pbnRlcnBvbGF0b3IubmVzdGluZ1JlZ2V4cCk7XG4gICAgICAgIGNvbnN0IG5lc3RBZnQgPSBuYSAmJiBuYS5sZW5ndGg7XG4gICAgICAgIGlmIChuZXN0QmVmIDwgbmVzdEFmdCkgb3B0aW9ucy5uZXN0ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoIW9wdGlvbnMubG5nICYmIHRoaXMub3B0aW9ucy5jb21wYXRpYmlsaXR5QVBJICE9PSAndjEnICYmIHJlc29sdmVkICYmIHJlc29sdmVkLnJlcykgb3B0aW9ucy5sbmcgPSB0aGlzLmxhbmd1YWdlIHx8IHJlc29sdmVkLnVzZWRMbmc7XG4gICAgICBpZiAob3B0aW9ucy5uZXN0ICE9PSBmYWxzZSkgcmVzID0gdGhpcy5pbnRlcnBvbGF0b3IubmVzdChyZXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGFzdEtleSAmJiBsYXN0S2V5WzBdID09PSBhcmdzWzBdICYmICFvcHRpb25zLmNvbnRleHQpIHtcbiAgICAgICAgICBfdGhpcy5sb2dnZXIud2FybihgSXQgc2VlbXMgeW91IGFyZSBuZXN0aW5nIHJlY3Vyc2l2ZWx5IGtleTogJHthcmdzWzBdfSBpbiBrZXk6ICR7a2V5WzBdfWApO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcy50cmFuc2xhdGUoLi4uYXJncywga2V5KTtcbiAgICAgIH0sIG9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMuaW50ZXJwb2xhdGlvbikgdGhpcy5pbnRlcnBvbGF0b3IucmVzZXQoKTtcbiAgICB9XG4gICAgY29uc3QgcG9zdFByb2Nlc3MgPSBvcHRpb25zLnBvc3RQcm9jZXNzIHx8IHRoaXMub3B0aW9ucy5wb3N0UHJvY2VzcztcbiAgICBjb25zdCBwb3N0UHJvY2Vzc29yTmFtZXMgPSB0eXBlb2YgcG9zdFByb2Nlc3MgPT09ICdzdHJpbmcnID8gW3Bvc3RQcm9jZXNzXSA6IHBvc3RQcm9jZXNzO1xuICAgIGlmIChyZXMgIT09IHVuZGVmaW5lZCAmJiByZXMgIT09IG51bGwgJiYgcG9zdFByb2Nlc3Nvck5hbWVzICYmIHBvc3RQcm9jZXNzb3JOYW1lcy5sZW5ndGggJiYgb3B0aW9ucy5hcHBseVBvc3RQcm9jZXNzb3IgIT09IGZhbHNlKSB7XG4gICAgICByZXMgPSBwb3N0UHJvY2Vzc29yLmhhbmRsZShwb3N0UHJvY2Vzc29yTmFtZXMsIHJlcywga2V5LCB0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLnBvc3RQcm9jZXNzUGFzc1Jlc29sdmVkID8ge1xuICAgICAgICBpMThuUmVzb2x2ZWQ6IHtcbiAgICAgICAgICAuLi5yZXNvbHZlZCxcbiAgICAgICAgICB1c2VkUGFyYW1zOiB0aGlzLmdldFVzZWRQYXJhbXNEZXRhaWxzKG9wdGlvbnMpXG4gICAgICAgIH0sXG4gICAgICAgIC4uLm9wdGlvbnNcbiAgICAgIH0gOiBvcHRpb25zLCB0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICByZXNvbHZlKGtleXMpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgbGV0IGZvdW5kO1xuICAgIGxldCB1c2VkS2V5O1xuICAgIGxldCBleGFjdFVzZWRLZXk7XG4gICAgbGV0IHVzZWRMbmc7XG4gICAgbGV0IHVzZWROUztcbiAgICBpZiAodHlwZW9mIGtleXMgPT09ICdzdHJpbmcnKSBrZXlzID0gW2tleXNdO1xuICAgIGtleXMuZm9yRWFjaChrID0+IHtcbiAgICAgIGlmICh0aGlzLmlzVmFsaWRMb29rdXAoZm91bmQpKSByZXR1cm47XG4gICAgICBjb25zdCBleHRyYWN0ZWQgPSB0aGlzLmV4dHJhY3RGcm9tS2V5KGssIG9wdGlvbnMpO1xuICAgICAgY29uc3Qga2V5ID0gZXh0cmFjdGVkLmtleTtcbiAgICAgIHVzZWRLZXkgPSBrZXk7XG4gICAgICBsZXQgbmFtZXNwYWNlcyA9IGV4dHJhY3RlZC5uYW1lc3BhY2VzO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5mYWxsYmFja05TKSBuYW1lc3BhY2VzID0gbmFtZXNwYWNlcy5jb25jYXQodGhpcy5vcHRpb25zLmZhbGxiYWNrTlMpO1xuICAgICAgY29uc3QgbmVlZHNQbHVyYWxIYW5kbGluZyA9IG9wdGlvbnMuY291bnQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb3B0aW9ucy5jb3VudCAhPT0gJ3N0cmluZyc7XG4gICAgICBjb25zdCBuZWVkc1plcm9TdWZmaXhMb29rdXAgPSBuZWVkc1BsdXJhbEhhbmRsaW5nICYmICFvcHRpb25zLm9yZGluYWwgJiYgb3B0aW9ucy5jb3VudCA9PT0gMCAmJiB0aGlzLnBsdXJhbFJlc29sdmVyLnNob3VsZFVzZUludGxBcGkoKTtcbiAgICAgIGNvbnN0IG5lZWRzQ29udGV4dEhhbmRsaW5nID0gb3B0aW9ucy5jb250ZXh0ICE9PSB1bmRlZmluZWQgJiYgKHR5cGVvZiBvcHRpb25zLmNvbnRleHQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zLmNvbnRleHQgPT09ICdudW1iZXInKSAmJiBvcHRpb25zLmNvbnRleHQgIT09ICcnO1xuICAgICAgY29uc3QgY29kZXMgPSBvcHRpb25zLmxuZ3MgPyBvcHRpb25zLmxuZ3MgOiB0aGlzLmxhbmd1YWdlVXRpbHMudG9SZXNvbHZlSGllcmFyY2h5KG9wdGlvbnMubG5nIHx8IHRoaXMubGFuZ3VhZ2UsIG9wdGlvbnMuZmFsbGJhY2tMbmcpO1xuICAgICAgbmFtZXNwYWNlcy5mb3JFYWNoKG5zID0+IHtcbiAgICAgICAgaWYgKHRoaXMuaXNWYWxpZExvb2t1cChmb3VuZCkpIHJldHVybjtcbiAgICAgICAgdXNlZE5TID0gbnM7XG4gICAgICAgIGlmICghY2hlY2tlZExvYWRlZEZvcltgJHtjb2Rlc1swXX0tJHtuc31gXSAmJiB0aGlzLnV0aWxzICYmIHRoaXMudXRpbHMuaGFzTG9hZGVkTmFtZXNwYWNlICYmICF0aGlzLnV0aWxzLmhhc0xvYWRlZE5hbWVzcGFjZSh1c2VkTlMpKSB7XG4gICAgICAgICAgY2hlY2tlZExvYWRlZEZvcltgJHtjb2Rlc1swXX0tJHtuc31gXSA9IHRydWU7XG4gICAgICAgICAgdGhpcy5sb2dnZXIud2Fybihga2V5IFwiJHt1c2VkS2V5fVwiIGZvciBsYW5ndWFnZXMgXCIke2NvZGVzLmpvaW4oJywgJyl9XCIgd29uJ3QgZ2V0IHJlc29sdmVkIGFzIG5hbWVzcGFjZSBcIiR7dXNlZE5TfVwiIHdhcyBub3QgeWV0IGxvYWRlZGAsICdUaGlzIG1lYW5zIHNvbWV0aGluZyBJUyBXUk9ORyBpbiB5b3VyIHNldHVwLiBZb3UgYWNjZXNzIHRoZSB0IGZ1bmN0aW9uIGJlZm9yZSBpMThuZXh0LmluaXQgLyBpMThuZXh0LmxvYWROYW1lc3BhY2UgLyBpMThuZXh0LmNoYW5nZUxhbmd1YWdlIHdhcyBkb25lLiBXYWl0IGZvciB0aGUgY2FsbGJhY2sgb3IgUHJvbWlzZSB0byByZXNvbHZlIGJlZm9yZSBhY2Nlc3NpbmcgaXQhISEnKTtcbiAgICAgICAgfVxuICAgICAgICBjb2Rlcy5mb3JFYWNoKGNvZGUgPT4ge1xuICAgICAgICAgIGlmICh0aGlzLmlzVmFsaWRMb29rdXAoZm91bmQpKSByZXR1cm47XG4gICAgICAgICAgdXNlZExuZyA9IGNvZGU7XG4gICAgICAgICAgY29uc3QgZmluYWxLZXlzID0gW2tleV07XG4gICAgICAgICAgaWYgKHRoaXMuaTE4bkZvcm1hdCAmJiB0aGlzLmkxOG5Gb3JtYXQuYWRkTG9va3VwS2V5cykge1xuICAgICAgICAgICAgdGhpcy5pMThuRm9ybWF0LmFkZExvb2t1cEtleXMoZmluYWxLZXlzLCBrZXksIGNvZGUsIG5zLCBvcHRpb25zKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHBsdXJhbFN1ZmZpeDtcbiAgICAgICAgICAgIGlmIChuZWVkc1BsdXJhbEhhbmRsaW5nKSBwbHVyYWxTdWZmaXggPSB0aGlzLnBsdXJhbFJlc29sdmVyLmdldFN1ZmZpeChjb2RlLCBvcHRpb25zLmNvdW50LCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IHplcm9TdWZmaXggPSBgJHt0aGlzLm9wdGlvbnMucGx1cmFsU2VwYXJhdG9yfXplcm9gO1xuICAgICAgICAgICAgY29uc3Qgb3JkaW5hbFByZWZpeCA9IGAke3RoaXMub3B0aW9ucy5wbHVyYWxTZXBhcmF0b3J9b3JkaW5hbCR7dGhpcy5vcHRpb25zLnBsdXJhbFNlcGFyYXRvcn1gO1xuICAgICAgICAgICAgaWYgKG5lZWRzUGx1cmFsSGFuZGxpbmcpIHtcbiAgICAgICAgICAgICAgZmluYWxLZXlzLnB1c2goa2V5ICsgcGx1cmFsU3VmZml4KTtcbiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMub3JkaW5hbCAmJiBwbHVyYWxTdWZmaXguaW5kZXhPZihvcmRpbmFsUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGZpbmFsS2V5cy5wdXNoKGtleSArIHBsdXJhbFN1ZmZpeC5yZXBsYWNlKG9yZGluYWxQcmVmaXgsIHRoaXMub3B0aW9ucy5wbHVyYWxTZXBhcmF0b3IpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAobmVlZHNaZXJvU3VmZml4TG9va3VwKSB7XG4gICAgICAgICAgICAgICAgZmluYWxLZXlzLnB1c2goa2V5ICsgemVyb1N1ZmZpeCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZWVkc0NvbnRleHRIYW5kbGluZykge1xuICAgICAgICAgICAgICBjb25zdCBjb250ZXh0S2V5ID0gYCR7a2V5fSR7dGhpcy5vcHRpb25zLmNvbnRleHRTZXBhcmF0b3J9JHtvcHRpb25zLmNvbnRleHR9YDtcbiAgICAgICAgICAgICAgZmluYWxLZXlzLnB1c2goY29udGV4dEtleSk7XG4gICAgICAgICAgICAgIGlmIChuZWVkc1BsdXJhbEhhbmRsaW5nKSB7XG4gICAgICAgICAgICAgICAgZmluYWxLZXlzLnB1c2goY29udGV4dEtleSArIHBsdXJhbFN1ZmZpeCk7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMub3JkaW5hbCAmJiBwbHVyYWxTdWZmaXguaW5kZXhPZihvcmRpbmFsUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgZmluYWxLZXlzLnB1c2goY29udGV4dEtleSArIHBsdXJhbFN1ZmZpeC5yZXBsYWNlKG9yZGluYWxQcmVmaXgsIHRoaXMub3B0aW9ucy5wbHVyYWxTZXBhcmF0b3IpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5lZWRzWmVyb1N1ZmZpeExvb2t1cCkge1xuICAgICAgICAgICAgICAgICAgZmluYWxLZXlzLnB1c2goY29udGV4dEtleSArIHplcm9TdWZmaXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBsZXQgcG9zc2libGVLZXk7XG4gICAgICAgICAgd2hpbGUgKHBvc3NpYmxlS2V5ID0gZmluYWxLZXlzLnBvcCgpKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZExvb2t1cChmb3VuZCkpIHtcbiAgICAgICAgICAgICAgZXhhY3RVc2VkS2V5ID0gcG9zc2libGVLZXk7XG4gICAgICAgICAgICAgIGZvdW5kID0gdGhpcy5nZXRSZXNvdXJjZShjb2RlLCBucywgcG9zc2libGVLZXksIG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzOiBmb3VuZCxcbiAgICAgIHVzZWRLZXksXG4gICAgICBleGFjdFVzZWRLZXksXG4gICAgICB1c2VkTG5nLFxuICAgICAgdXNlZE5TXG4gICAgfTtcbiAgfVxuICBpc1ZhbGlkTG9va3VwKHJlcykge1xuICAgIHJldHVybiByZXMgIT09IHVuZGVmaW5lZCAmJiAhKCF0aGlzLm9wdGlvbnMucmV0dXJuTnVsbCAmJiByZXMgPT09IG51bGwpICYmICEoIXRoaXMub3B0aW9ucy5yZXR1cm5FbXB0eVN0cmluZyAmJiByZXMgPT09ICcnKTtcbiAgfVxuICBnZXRSZXNvdXJjZShjb2RlLCBucywga2V5KSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9O1xuICAgIGlmICh0aGlzLmkxOG5Gb3JtYXQgJiYgdGhpcy5pMThuRm9ybWF0LmdldFJlc291cmNlKSByZXR1cm4gdGhpcy5pMThuRm9ybWF0LmdldFJlc291cmNlKGNvZGUsIG5zLCBrZXksIG9wdGlvbnMpO1xuICAgIHJldHVybiB0aGlzLnJlc291cmNlU3RvcmUuZ2V0UmVzb3VyY2UoY29kZSwgbnMsIGtleSwgb3B0aW9ucyk7XG4gIH1cbiAgZ2V0VXNlZFBhcmFtc0RldGFpbHMoKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIGNvbnN0IG9wdGlvbnNLZXlzID0gWydkZWZhdWx0VmFsdWUnLCAnb3JkaW5hbCcsICdjb250ZXh0JywgJ3JlcGxhY2UnLCAnbG5nJywgJ2xuZ3MnLCAnZmFsbGJhY2tMbmcnLCAnbnMnLCAna2V5U2VwYXJhdG9yJywgJ25zU2VwYXJhdG9yJywgJ3JldHVybk9iamVjdHMnLCAncmV0dXJuRGV0YWlscycsICdqb2luQXJyYXlzJywgJ3Bvc3RQcm9jZXNzJywgJ2ludGVycG9sYXRpb24nXTtcbiAgICBjb25zdCB1c2VPcHRpb25zUmVwbGFjZUZvckRhdGEgPSBvcHRpb25zLnJlcGxhY2UgJiYgdHlwZW9mIG9wdGlvbnMucmVwbGFjZSAhPT0gJ3N0cmluZyc7XG4gICAgbGV0IGRhdGEgPSB1c2VPcHRpb25zUmVwbGFjZUZvckRhdGEgPyBvcHRpb25zLnJlcGxhY2UgOiBvcHRpb25zO1xuICAgIGlmICh1c2VPcHRpb25zUmVwbGFjZUZvckRhdGEgJiYgdHlwZW9mIG9wdGlvbnMuY291bnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBkYXRhLmNvdW50ID0gb3B0aW9ucy5jb3VudDtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLmRlZmF1bHRWYXJpYWJsZXMpIHtcbiAgICAgIGRhdGEgPSB7XG4gICAgICAgIC4uLnRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLmRlZmF1bHRWYXJpYWJsZXMsXG4gICAgICAgIC4uLmRhdGFcbiAgICAgIH07XG4gICAgfVxuICAgIGlmICghdXNlT3B0aW9uc1JlcGxhY2VGb3JEYXRhKSB7XG4gICAgICBkYXRhID0ge1xuICAgICAgICAuLi5kYXRhXG4gICAgICB9O1xuICAgICAgZm9yIChjb25zdCBrZXkgb2Ygb3B0aW9uc0tleXMpIHtcbiAgICAgICAgZGVsZXRlIGRhdGFba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cbiAgc3RhdGljIGhhc0RlZmF1bHRWYWx1ZShvcHRpb25zKSB7XG4gICAgY29uc3QgcHJlZml4ID0gJ2RlZmF1bHRWYWx1ZSc7XG4gICAgZm9yIChjb25zdCBvcHRpb24gaW4gb3B0aW9ucykge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCBvcHRpb24pICYmIHByZWZpeCA9PT0gb3B0aW9uLnN1YnN0cmluZygwLCBwcmVmaXgubGVuZ3RoKSAmJiB1bmRlZmluZWQgIT09IG9wdGlvbnNbb3B0aW9uXSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmNvbnN0IGNhcGl0YWxpemUgPSBzdHJpbmcgPT4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpO1xuY2xhc3MgTGFuZ3VhZ2VVdGlsIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5zdXBwb3J0ZWRMbmdzID0gdGhpcy5vcHRpb25zLnN1cHBvcnRlZExuZ3MgfHwgZmFsc2U7XG4gICAgdGhpcy5sb2dnZXIgPSBiYXNlTG9nZ2VyLmNyZWF0ZSgnbGFuZ3VhZ2VVdGlscycpO1xuICB9XG4gIGdldFNjcmlwdFBhcnRGcm9tQ29kZShjb2RlKSB7XG4gICAgY29kZSA9IGdldENsZWFuZWRDb2RlKGNvZGUpO1xuICAgIGlmICghY29kZSB8fCBjb2RlLmluZGV4T2YoJy0nKSA8IDApIHJldHVybiBudWxsO1xuICAgIGNvbnN0IHAgPSBjb2RlLnNwbGl0KCctJyk7XG4gICAgaWYgKHAubGVuZ3RoID09PSAyKSByZXR1cm4gbnVsbDtcbiAgICBwLnBvcCgpO1xuICAgIGlmIChwW3AubGVuZ3RoIC0gMV0udG9Mb3dlckNhc2UoKSA9PT0gJ3gnKSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gdGhpcy5mb3JtYXRMYW5ndWFnZUNvZGUocC5qb2luKCctJykpO1xuICB9XG4gIGdldExhbmd1YWdlUGFydEZyb21Db2RlKGNvZGUpIHtcbiAgICBjb2RlID0gZ2V0Q2xlYW5lZENvZGUoY29kZSk7XG4gICAgaWYgKCFjb2RlIHx8IGNvZGUuaW5kZXhPZignLScpIDwgMCkgcmV0dXJuIGNvZGU7XG4gICAgY29uc3QgcCA9IGNvZGUuc3BsaXQoJy0nKTtcbiAgICByZXR1cm4gdGhpcy5mb3JtYXRMYW5ndWFnZUNvZGUocFswXSk7XG4gIH1cbiAgZm9ybWF0TGFuZ3VhZ2VDb2RlKGNvZGUpIHtcbiAgICBpZiAodHlwZW9mIGNvZGUgPT09ICdzdHJpbmcnICYmIGNvZGUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAgIGNvbnN0IHNwZWNpYWxDYXNlcyA9IFsnaGFucycsICdoYW50JywgJ2xhdG4nLCAnY3lybCcsICdjYW5zJywgJ21vbmcnLCAnYXJhYiddO1xuICAgICAgbGV0IHAgPSBjb2RlLnNwbGl0KCctJyk7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmxvd2VyQ2FzZUxuZykge1xuICAgICAgICBwID0gcC5tYXAocGFydCA9PiBwYXJ0LnRvTG93ZXJDYXNlKCkpO1xuICAgICAgfSBlbHNlIGlmIChwLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBwWzBdID0gcFswXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBwWzFdID0gcFsxXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICBpZiAoc3BlY2lhbENhc2VzLmluZGV4T2YocFsxXS50b0xvd2VyQ2FzZSgpKSA+IC0xKSBwWzFdID0gY2FwaXRhbGl6ZShwWzFdLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgfSBlbHNlIGlmIChwLmxlbmd0aCA9PT0gMykge1xuICAgICAgICBwWzBdID0gcFswXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAocFsxXS5sZW5ndGggPT09IDIpIHBbMV0gPSBwWzFdLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIGlmIChwWzBdICE9PSAnc2duJyAmJiBwWzJdLmxlbmd0aCA9PT0gMikgcFsyXSA9IHBbMl0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgaWYgKHNwZWNpYWxDYXNlcy5pbmRleE9mKHBbMV0udG9Mb3dlckNhc2UoKSkgPiAtMSkgcFsxXSA9IGNhcGl0YWxpemUocFsxXS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgaWYgKHNwZWNpYWxDYXNlcy5pbmRleE9mKHBbMl0udG9Mb3dlckNhc2UoKSkgPiAtMSkgcFsyXSA9IGNhcGl0YWxpemUocFsyXS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwLmpvaW4oJy0nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5jbGVhbkNvZGUgfHwgdGhpcy5vcHRpb25zLmxvd2VyQ2FzZUxuZyA/IGNvZGUudG9Mb3dlckNhc2UoKSA6IGNvZGU7XG4gIH1cbiAgaXNTdXBwb3J0ZWRDb2RlKGNvZGUpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmxvYWQgPT09ICdsYW5ndWFnZU9ubHknIHx8IHRoaXMub3B0aW9ucy5ub25FeHBsaWNpdFN1cHBvcnRlZExuZ3MpIHtcbiAgICAgIGNvZGUgPSB0aGlzLmdldExhbmd1YWdlUGFydEZyb21Db2RlKGNvZGUpO1xuICAgIH1cbiAgICByZXR1cm4gIXRoaXMuc3VwcG9ydGVkTG5ncyB8fCAhdGhpcy5zdXBwb3J0ZWRMbmdzLmxlbmd0aCB8fCB0aGlzLnN1cHBvcnRlZExuZ3MuaW5kZXhPZihjb2RlKSA+IC0xO1xuICB9XG4gIGdldEJlc3RNYXRjaEZyb21Db2Rlcyhjb2Rlcykge1xuICAgIGlmICghY29kZXMpIHJldHVybiBudWxsO1xuICAgIGxldCBmb3VuZDtcbiAgICBjb2Rlcy5mb3JFYWNoKGNvZGUgPT4ge1xuICAgICAgaWYgKGZvdW5kKSByZXR1cm47XG4gICAgICBjb25zdCBjbGVhbmVkTG5nID0gdGhpcy5mb3JtYXRMYW5ndWFnZUNvZGUoY29kZSk7XG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5zdXBwb3J0ZWRMbmdzIHx8IHRoaXMuaXNTdXBwb3J0ZWRDb2RlKGNsZWFuZWRMbmcpKSBmb3VuZCA9IGNsZWFuZWRMbmc7XG4gICAgfSk7XG4gICAgaWYgKCFmb3VuZCAmJiB0aGlzLm9wdGlvbnMuc3VwcG9ydGVkTG5ncykge1xuICAgICAgY29kZXMuZm9yRWFjaChjb2RlID0+IHtcbiAgICAgICAgaWYgKGZvdW5kKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGxuZ09ubHkgPSB0aGlzLmdldExhbmd1YWdlUGFydEZyb21Db2RlKGNvZGUpO1xuICAgICAgICBpZiAodGhpcy5pc1N1cHBvcnRlZENvZGUobG5nT25seSkpIHJldHVybiBmb3VuZCA9IGxuZ09ubHk7XG4gICAgICAgIGZvdW5kID0gdGhpcy5vcHRpb25zLnN1cHBvcnRlZExuZ3MuZmluZChzdXBwb3J0ZWRMbmcgPT4ge1xuICAgICAgICAgIGlmIChzdXBwb3J0ZWRMbmcgPT09IGxuZ09ubHkpIHJldHVybiBzdXBwb3J0ZWRMbmc7XG4gICAgICAgICAgaWYgKHN1cHBvcnRlZExuZy5pbmRleE9mKCctJykgPCAwICYmIGxuZ09ubHkuaW5kZXhPZignLScpIDwgMCkgcmV0dXJuO1xuICAgICAgICAgIGlmIChzdXBwb3J0ZWRMbmcuaW5kZXhPZignLScpID4gMCAmJiBsbmdPbmx5LmluZGV4T2YoJy0nKSA8IDAgJiYgc3VwcG9ydGVkTG5nLnN1YnN0cmluZygwLCBzdXBwb3J0ZWRMbmcuaW5kZXhPZignLScpKSA9PT0gbG5nT25seSkgcmV0dXJuIHN1cHBvcnRlZExuZztcbiAgICAgICAgICBpZiAoc3VwcG9ydGVkTG5nLmluZGV4T2YobG5nT25seSkgPT09IDAgJiYgbG5nT25seS5sZW5ndGggPiAxKSByZXR1cm4gc3VwcG9ydGVkTG5nO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoIWZvdW5kKSBmb3VuZCA9IHRoaXMuZ2V0RmFsbGJhY2tDb2Rlcyh0aGlzLm9wdGlvbnMuZmFsbGJhY2tMbmcpWzBdO1xuICAgIHJldHVybiBmb3VuZDtcbiAgfVxuICBnZXRGYWxsYmFja0NvZGVzKGZhbGxiYWNrcywgY29kZSkge1xuICAgIGlmICghZmFsbGJhY2tzKSByZXR1cm4gW107XG4gICAgaWYgKHR5cGVvZiBmYWxsYmFja3MgPT09ICdmdW5jdGlvbicpIGZhbGxiYWNrcyA9IGZhbGxiYWNrcyhjb2RlKTtcbiAgICBpZiAodHlwZW9mIGZhbGxiYWNrcyA9PT0gJ3N0cmluZycpIGZhbGxiYWNrcyA9IFtmYWxsYmFja3NdO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGZhbGxiYWNrcykpIHJldHVybiBmYWxsYmFja3M7XG4gICAgaWYgKCFjb2RlKSByZXR1cm4gZmFsbGJhY2tzLmRlZmF1bHQgfHwgW107XG4gICAgbGV0IGZvdW5kID0gZmFsbGJhY2tzW2NvZGVdO1xuICAgIGlmICghZm91bmQpIGZvdW5kID0gZmFsbGJhY2tzW3RoaXMuZ2V0U2NyaXB0UGFydEZyb21Db2RlKGNvZGUpXTtcbiAgICBpZiAoIWZvdW5kKSBmb3VuZCA9IGZhbGxiYWNrc1t0aGlzLmZvcm1hdExhbmd1YWdlQ29kZShjb2RlKV07XG4gICAgaWYgKCFmb3VuZCkgZm91bmQgPSBmYWxsYmFja3NbdGhpcy5nZXRMYW5ndWFnZVBhcnRGcm9tQ29kZShjb2RlKV07XG4gICAgaWYgKCFmb3VuZCkgZm91bmQgPSBmYWxsYmFja3MuZGVmYXVsdDtcbiAgICByZXR1cm4gZm91bmQgfHwgW107XG4gIH1cbiAgdG9SZXNvbHZlSGllcmFyY2h5KGNvZGUsIGZhbGxiYWNrQ29kZSkge1xuICAgIGNvbnN0IGZhbGxiYWNrQ29kZXMgPSB0aGlzLmdldEZhbGxiYWNrQ29kZXMoZmFsbGJhY2tDb2RlIHx8IHRoaXMub3B0aW9ucy5mYWxsYmFja0xuZyB8fCBbXSwgY29kZSk7XG4gICAgY29uc3QgY29kZXMgPSBbXTtcbiAgICBjb25zdCBhZGRDb2RlID0gYyA9PiB7XG4gICAgICBpZiAoIWMpIHJldHVybjtcbiAgICAgIGlmICh0aGlzLmlzU3VwcG9ydGVkQ29kZShjKSkge1xuICAgICAgICBjb2Rlcy5wdXNoKGMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5sb2dnZXIud2FybihgcmVqZWN0aW5nIGxhbmd1YWdlIGNvZGUgbm90IGZvdW5kIGluIHN1cHBvcnRlZExuZ3M6ICR7Y31gKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmICh0eXBlb2YgY29kZSA9PT0gJ3N0cmluZycgJiYgKGNvZGUuaW5kZXhPZignLScpID4gLTEgfHwgY29kZS5pbmRleE9mKCdfJykgPiAtMSkpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubG9hZCAhPT0gJ2xhbmd1YWdlT25seScpIGFkZENvZGUodGhpcy5mb3JtYXRMYW5ndWFnZUNvZGUoY29kZSkpO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5sb2FkICE9PSAnbGFuZ3VhZ2VPbmx5JyAmJiB0aGlzLm9wdGlvbnMubG9hZCAhPT0gJ2N1cnJlbnRPbmx5JykgYWRkQ29kZSh0aGlzLmdldFNjcmlwdFBhcnRGcm9tQ29kZShjb2RlKSk7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmxvYWQgIT09ICdjdXJyZW50T25seScpIGFkZENvZGUodGhpcy5nZXRMYW5ndWFnZVBhcnRGcm9tQ29kZShjb2RlKSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGFkZENvZGUodGhpcy5mb3JtYXRMYW5ndWFnZUNvZGUoY29kZSkpO1xuICAgIH1cbiAgICBmYWxsYmFja0NvZGVzLmZvckVhY2goZmMgPT4ge1xuICAgICAgaWYgKGNvZGVzLmluZGV4T2YoZmMpIDwgMCkgYWRkQ29kZSh0aGlzLmZvcm1hdExhbmd1YWdlQ29kZShmYykpO1xuICAgIH0pO1xuICAgIHJldHVybiBjb2RlcztcbiAgfVxufVxuXG5sZXQgc2V0cyA9IFt7XG4gIGxuZ3M6IFsnYWNoJywgJ2FrJywgJ2FtJywgJ2FybicsICdicicsICdmaWwnLCAnZ3VuJywgJ2xuJywgJ21mZScsICdtZycsICdtaScsICdvYycsICdwdCcsICdwdC1CUicsICd0ZycsICd0bCcsICd0aScsICd0cicsICd1eicsICd3YSddLFxuICBucjogWzEsIDJdLFxuICBmYzogMVxufSwge1xuICBsbmdzOiBbJ2FmJywgJ2FuJywgJ2FzdCcsICdheicsICdiZycsICdibicsICdjYScsICdkYScsICdkZScsICdkZXYnLCAnZWwnLCAnZW4nLCAnZW8nLCAnZXMnLCAnZXQnLCAnZXUnLCAnZmknLCAnZm8nLCAnZnVyJywgJ2Z5JywgJ2dsJywgJ2d1JywgJ2hhJywgJ2hpJywgJ2h1JywgJ2h5JywgJ2lhJywgJ2l0JywgJ2trJywgJ2tuJywgJ2t1JywgJ2xiJywgJ21haScsICdtbCcsICdtbicsICdtcicsICduYWgnLCAnbmFwJywgJ25iJywgJ25lJywgJ25sJywgJ25uJywgJ25vJywgJ25zbycsICdwYScsICdwYXAnLCAncG1zJywgJ3BzJywgJ3B0LVBUJywgJ3JtJywgJ3NjbycsICdzZScsICdzaScsICdzbycsICdzb24nLCAnc3EnLCAnc3YnLCAnc3cnLCAndGEnLCAndGUnLCAndGsnLCAndXInLCAneW8nXSxcbiAgbnI6IFsxLCAyXSxcbiAgZmM6IDJcbn0sIHtcbiAgbG5nczogWydheScsICdibycsICdjZ2cnLCAnZmEnLCAnaHQnLCAnaWQnLCAnamEnLCAnamJvJywgJ2thJywgJ2ttJywgJ2tvJywgJ2t5JywgJ2xvJywgJ21zJywgJ3NhaCcsICdzdScsICd0aCcsICd0dCcsICd1ZycsICd2aScsICd3bycsICd6aCddLFxuICBucjogWzFdLFxuICBmYzogM1xufSwge1xuICBsbmdzOiBbJ2JlJywgJ2JzJywgJ2NucicsICdkeicsICdocicsICdydScsICdzcicsICd1ayddLFxuICBucjogWzEsIDIsIDVdLFxuICBmYzogNFxufSwge1xuICBsbmdzOiBbJ2FyJ10sXG4gIG5yOiBbMCwgMSwgMiwgMywgMTEsIDEwMF0sXG4gIGZjOiA1XG59LCB7XG4gIGxuZ3M6IFsnY3MnLCAnc2snXSxcbiAgbnI6IFsxLCAyLCA1XSxcbiAgZmM6IDZcbn0sIHtcbiAgbG5nczogWydjc2InLCAncGwnXSxcbiAgbnI6IFsxLCAyLCA1XSxcbiAgZmM6IDdcbn0sIHtcbiAgbG5nczogWydjeSddLFxuICBucjogWzEsIDIsIDMsIDhdLFxuICBmYzogOFxufSwge1xuICBsbmdzOiBbJ2ZyJ10sXG4gIG5yOiBbMSwgMl0sXG4gIGZjOiA5XG59LCB7XG4gIGxuZ3M6IFsnZ2EnXSxcbiAgbnI6IFsxLCAyLCAzLCA3LCAxMV0sXG4gIGZjOiAxMFxufSwge1xuICBsbmdzOiBbJ2dkJ10sXG4gIG5yOiBbMSwgMiwgMywgMjBdLFxuICBmYzogMTFcbn0sIHtcbiAgbG5nczogWydpcyddLFxuICBucjogWzEsIDJdLFxuICBmYzogMTJcbn0sIHtcbiAgbG5nczogWydqdiddLFxuICBucjogWzAsIDFdLFxuICBmYzogMTNcbn0sIHtcbiAgbG5nczogWydrdyddLFxuICBucjogWzEsIDIsIDMsIDRdLFxuICBmYzogMTRcbn0sIHtcbiAgbG5nczogWydsdCddLFxuICBucjogWzEsIDIsIDEwXSxcbiAgZmM6IDE1XG59LCB7XG4gIGxuZ3M6IFsnbHYnXSxcbiAgbnI6IFsxLCAyLCAwXSxcbiAgZmM6IDE2XG59LCB7XG4gIGxuZ3M6IFsnbWsnXSxcbiAgbnI6IFsxLCAyXSxcbiAgZmM6IDE3XG59LCB7XG4gIGxuZ3M6IFsnbW5rJ10sXG4gIG5yOiBbMCwgMSwgMl0sXG4gIGZjOiAxOFxufSwge1xuICBsbmdzOiBbJ210J10sXG4gIG5yOiBbMSwgMiwgMTEsIDIwXSxcbiAgZmM6IDE5XG59LCB7XG4gIGxuZ3M6IFsnb3InXSxcbiAgbnI6IFsyLCAxXSxcbiAgZmM6IDJcbn0sIHtcbiAgbG5nczogWydybyddLFxuICBucjogWzEsIDIsIDIwXSxcbiAgZmM6IDIwXG59LCB7XG4gIGxuZ3M6IFsnc2wnXSxcbiAgbnI6IFs1LCAxLCAyLCAzXSxcbiAgZmM6IDIxXG59LCB7XG4gIGxuZ3M6IFsnaGUnLCAnaXcnXSxcbiAgbnI6IFsxLCAyLCAyMCwgMjFdLFxuICBmYzogMjJcbn1dO1xubGV0IF9ydWxlc1BsdXJhbHNUeXBlcyA9IHtcbiAgMTogbiA9PiBOdW1iZXIobiA+IDEpLFxuICAyOiBuID0+IE51bWJlcihuICE9IDEpLFxuICAzOiBuID0+IDAsXG4gIDQ6IG4gPT4gTnVtYmVyKG4gJSAxMCA9PSAxICYmIG4gJSAxMDAgIT0gMTEgPyAwIDogbiAlIDEwID49IDIgJiYgbiAlIDEwIDw9IDQgJiYgKG4gJSAxMDAgPCAxMCB8fCBuICUgMTAwID49IDIwKSA/IDEgOiAyKSxcbiAgNTogbiA9PiBOdW1iZXIobiA9PSAwID8gMCA6IG4gPT0gMSA/IDEgOiBuID09IDIgPyAyIDogbiAlIDEwMCA+PSAzICYmIG4gJSAxMDAgPD0gMTAgPyAzIDogbiAlIDEwMCA+PSAxMSA/IDQgOiA1KSxcbiAgNjogbiA9PiBOdW1iZXIobiA9PSAxID8gMCA6IG4gPj0gMiAmJiBuIDw9IDQgPyAxIDogMiksXG4gIDc6IG4gPT4gTnVtYmVyKG4gPT0gMSA/IDAgOiBuICUgMTAgPj0gMiAmJiBuICUgMTAgPD0gNCAmJiAobiAlIDEwMCA8IDEwIHx8IG4gJSAxMDAgPj0gMjApID8gMSA6IDIpLFxuICA4OiBuID0+IE51bWJlcihuID09IDEgPyAwIDogbiA9PSAyID8gMSA6IG4gIT0gOCAmJiBuICE9IDExID8gMiA6IDMpLFxuICA5OiBuID0+IE51bWJlcihuID49IDIpLFxuICAxMDogbiA9PiBOdW1iZXIobiA9PSAxID8gMCA6IG4gPT0gMiA/IDEgOiBuIDwgNyA/IDIgOiBuIDwgMTEgPyAzIDogNCksXG4gIDExOiBuID0+IE51bWJlcihuID09IDEgfHwgbiA9PSAxMSA/IDAgOiBuID09IDIgfHwgbiA9PSAxMiA/IDEgOiBuID4gMiAmJiBuIDwgMjAgPyAyIDogMyksXG4gIDEyOiBuID0+IE51bWJlcihuICUgMTAgIT0gMSB8fCBuICUgMTAwID09IDExKSxcbiAgMTM6IG4gPT4gTnVtYmVyKG4gIT09IDApLFxuICAxNDogbiA9PiBOdW1iZXIobiA9PSAxID8gMCA6IG4gPT0gMiA/IDEgOiBuID09IDMgPyAyIDogMyksXG4gIDE1OiBuID0+IE51bWJlcihuICUgMTAgPT0gMSAmJiBuICUgMTAwICE9IDExID8gMCA6IG4gJSAxMCA+PSAyICYmIChuICUgMTAwIDwgMTAgfHwgbiAlIDEwMCA+PSAyMCkgPyAxIDogMiksXG4gIDE2OiBuID0+IE51bWJlcihuICUgMTAgPT0gMSAmJiBuICUgMTAwICE9IDExID8gMCA6IG4gIT09IDAgPyAxIDogMiksXG4gIDE3OiBuID0+IE51bWJlcihuID09IDEgfHwgbiAlIDEwID09IDEgJiYgbiAlIDEwMCAhPSAxMSA/IDAgOiAxKSxcbiAgMTg6IG4gPT4gTnVtYmVyKG4gPT0gMCA/IDAgOiBuID09IDEgPyAxIDogMiksXG4gIDE5OiBuID0+IE51bWJlcihuID09IDEgPyAwIDogbiA9PSAwIHx8IG4gJSAxMDAgPiAxICYmIG4gJSAxMDAgPCAxMSA/IDEgOiBuICUgMTAwID4gMTAgJiYgbiAlIDEwMCA8IDIwID8gMiA6IDMpLFxuICAyMDogbiA9PiBOdW1iZXIobiA9PSAxID8gMCA6IG4gPT0gMCB8fCBuICUgMTAwID4gMCAmJiBuICUgMTAwIDwgMjAgPyAxIDogMiksXG4gIDIxOiBuID0+IE51bWJlcihuICUgMTAwID09IDEgPyAxIDogbiAlIDEwMCA9PSAyID8gMiA6IG4gJSAxMDAgPT0gMyB8fCBuICUgMTAwID09IDQgPyAzIDogMCksXG4gIDIyOiBuID0+IE51bWJlcihuID09IDEgPyAwIDogbiA9PSAyID8gMSA6IChuIDwgMCB8fCBuID4gMTApICYmIG4gJSAxMCA9PSAwID8gMiA6IDMpXG59O1xuY29uc3Qgbm9uSW50bFZlcnNpb25zID0gWyd2MScsICd2MicsICd2MyddO1xuY29uc3QgaW50bFZlcnNpb25zID0gWyd2NCddO1xuY29uc3Qgc3VmZml4ZXNPcmRlciA9IHtcbiAgemVybzogMCxcbiAgb25lOiAxLFxuICB0d286IDIsXG4gIGZldzogMyxcbiAgbWFueTogNCxcbiAgb3RoZXI6IDVcbn07XG5jb25zdCBjcmVhdGVSdWxlcyA9ICgpID0+IHtcbiAgY29uc3QgcnVsZXMgPSB7fTtcbiAgc2V0cy5mb3JFYWNoKHNldCA9PiB7XG4gICAgc2V0LmxuZ3MuZm9yRWFjaChsID0+IHtcbiAgICAgIHJ1bGVzW2xdID0ge1xuICAgICAgICBudW1iZXJzOiBzZXQubnIsXG4gICAgICAgIHBsdXJhbHM6IF9ydWxlc1BsdXJhbHNUeXBlc1tzZXQuZmNdXG4gICAgICB9O1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHJ1bGVzO1xufTtcbmNsYXNzIFBsdXJhbFJlc29sdmVyIHtcbiAgY29uc3RydWN0b3IobGFuZ3VhZ2VVdGlscykge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB0aGlzLmxhbmd1YWdlVXRpbHMgPSBsYW5ndWFnZVV0aWxzO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5sb2dnZXIgPSBiYXNlTG9nZ2VyLmNyZWF0ZSgncGx1cmFsUmVzb2x2ZXInKTtcbiAgICBpZiAoKCF0aGlzLm9wdGlvbnMuY29tcGF0aWJpbGl0eUpTT04gfHwgaW50bFZlcnNpb25zLmluY2x1ZGVzKHRoaXMub3B0aW9ucy5jb21wYXRpYmlsaXR5SlNPTikpICYmICh0eXBlb2YgSW50bCA9PT0gJ3VuZGVmaW5lZCcgfHwgIUludGwuUGx1cmFsUnVsZXMpKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuY29tcGF0aWJpbGl0eUpTT04gPSAndjMnO1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoJ1lvdXIgZW52aXJvbm1lbnQgc2VlbXMgbm90IHRvIGJlIEludGwgQVBJIGNvbXBhdGlibGUsIHVzZSBhbiBJbnRsLlBsdXJhbFJ1bGVzIHBvbHlmaWxsLiBXaWxsIGZhbGxiYWNrIHRvIHRoZSBjb21wYXRpYmlsaXR5SlNPTiB2MyBmb3JtYXQgaGFuZGxpbmcuJyk7XG4gICAgfVxuICAgIHRoaXMucnVsZXMgPSBjcmVhdGVSdWxlcygpO1xuICAgIHRoaXMucGx1cmFsUnVsZXNDYWNoZSA9IHt9O1xuICB9XG4gIGFkZFJ1bGUobG5nLCBvYmopIHtcbiAgICB0aGlzLnJ1bGVzW2xuZ10gPSBvYmo7XG4gIH1cbiAgY2xlYXJDYWNoZSgpIHtcbiAgICB0aGlzLnBsdXJhbFJ1bGVzQ2FjaGUgPSB7fTtcbiAgfVxuICBnZXRSdWxlKGNvZGUpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgaWYgKHRoaXMuc2hvdWxkVXNlSW50bEFwaSgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBjbGVhbmVkQ29kZSA9IGdldENsZWFuZWRDb2RlKGNvZGUgPT09ICdkZXYnID8gJ2VuJyA6IGNvZGUpO1xuICAgICAgICBjb25zdCB0eXBlID0gb3B0aW9ucy5vcmRpbmFsID8gJ29yZGluYWwnIDogJ2NhcmRpbmFsJztcbiAgICAgICAgY29uc3QgY2FjaGVLZXkgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgY2xlYW5lZENvZGUsXG4gICAgICAgICAgdHlwZVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGNhY2hlS2V5IGluIHRoaXMucGx1cmFsUnVsZXNDYWNoZSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnBsdXJhbFJ1bGVzQ2FjaGVbY2FjaGVLZXldO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJ1bGUgPSBuZXcgSW50bC5QbHVyYWxSdWxlcyhjbGVhbmVkQ29kZSwge1xuICAgICAgICAgIHR5cGVcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucGx1cmFsUnVsZXNDYWNoZVtjYWNoZUtleV0gPSBydWxlO1xuICAgICAgICByZXR1cm4gcnVsZTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnJ1bGVzW2NvZGVdIHx8IHRoaXMucnVsZXNbdGhpcy5sYW5ndWFnZVV0aWxzLmdldExhbmd1YWdlUGFydEZyb21Db2RlKGNvZGUpXTtcbiAgfVxuICBuZWVkc1BsdXJhbChjb2RlKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIGNvbnN0IHJ1bGUgPSB0aGlzLmdldFJ1bGUoY29kZSwgb3B0aW9ucyk7XG4gICAgaWYgKHRoaXMuc2hvdWxkVXNlSW50bEFwaSgpKSB7XG4gICAgICByZXR1cm4gcnVsZSAmJiBydWxlLnJlc29sdmVkT3B0aW9ucygpLnBsdXJhbENhdGVnb3JpZXMubGVuZ3RoID4gMTtcbiAgICB9XG4gICAgcmV0dXJuIHJ1bGUgJiYgcnVsZS5udW1iZXJzLmxlbmd0aCA+IDE7XG4gIH1cbiAgZ2V0UGx1cmFsRm9ybXNPZktleShjb2RlLCBrZXkpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3VmZml4ZXMoY29kZSwgb3B0aW9ucykubWFwKHN1ZmZpeCA9PiBgJHtrZXl9JHtzdWZmaXh9YCk7XG4gIH1cbiAgZ2V0U3VmZml4ZXMoY29kZSkge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICBjb25zdCBydWxlID0gdGhpcy5nZXRSdWxlKGNvZGUsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBpZiAodGhpcy5zaG91bGRVc2VJbnRsQXBpKCkpIHtcbiAgICAgIHJldHVybiBydWxlLnJlc29sdmVkT3B0aW9ucygpLnBsdXJhbENhdGVnb3JpZXMuc29ydCgocGx1cmFsQ2F0ZWdvcnkxLCBwbHVyYWxDYXRlZ29yeTIpID0+IHN1ZmZpeGVzT3JkZXJbcGx1cmFsQ2F0ZWdvcnkxXSAtIHN1ZmZpeGVzT3JkZXJbcGx1cmFsQ2F0ZWdvcnkyXSkubWFwKHBsdXJhbENhdGVnb3J5ID0+IGAke3RoaXMub3B0aW9ucy5wcmVwZW5kfSR7b3B0aW9ucy5vcmRpbmFsID8gYG9yZGluYWwke3RoaXMub3B0aW9ucy5wcmVwZW5kfWAgOiAnJ30ke3BsdXJhbENhdGVnb3J5fWApO1xuICAgIH1cbiAgICByZXR1cm4gcnVsZS5udW1iZXJzLm1hcChudW1iZXIgPT4gdGhpcy5nZXRTdWZmaXgoY29kZSwgbnVtYmVyLCBvcHRpb25zKSk7XG4gIH1cbiAgZ2V0U3VmZml4KGNvZGUsIGNvdW50KSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICAgIGNvbnN0IHJ1bGUgPSB0aGlzLmdldFJ1bGUoY29kZSwgb3B0aW9ucyk7XG4gICAgaWYgKHJ1bGUpIHtcbiAgICAgIGlmICh0aGlzLnNob3VsZFVzZUludGxBcGkoKSkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5vcHRpb25zLnByZXBlbmR9JHtvcHRpb25zLm9yZGluYWwgPyBgb3JkaW5hbCR7dGhpcy5vcHRpb25zLnByZXBlbmR9YCA6ICcnfSR7cnVsZS5zZWxlY3QoY291bnQpfWA7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5nZXRTdWZmaXhSZXRyb0NvbXBhdGlibGUocnVsZSwgY291bnQpO1xuICAgIH1cbiAgICB0aGlzLmxvZ2dlci53YXJuKGBubyBwbHVyYWwgcnVsZSBmb3VuZCBmb3I6ICR7Y29kZX1gKTtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgZ2V0U3VmZml4UmV0cm9Db21wYXRpYmxlKHJ1bGUsIGNvdW50KSB7XG4gICAgY29uc3QgaWR4ID0gcnVsZS5ub0FicyA/IHJ1bGUucGx1cmFscyhjb3VudCkgOiBydWxlLnBsdXJhbHMoTWF0aC5hYnMoY291bnQpKTtcbiAgICBsZXQgc3VmZml4ID0gcnVsZS5udW1iZXJzW2lkeF07XG4gICAgaWYgKHRoaXMub3B0aW9ucy5zaW1wbGlmeVBsdXJhbFN1ZmZpeCAmJiBydWxlLm51bWJlcnMubGVuZ3RoID09PSAyICYmIHJ1bGUubnVtYmVyc1swXSA9PT0gMSkge1xuICAgICAgaWYgKHN1ZmZpeCA9PT0gMikge1xuICAgICAgICBzdWZmaXggPSAncGx1cmFsJztcbiAgICAgIH0gZWxzZSBpZiAoc3VmZml4ID09PSAxKSB7XG4gICAgICAgIHN1ZmZpeCA9ICcnO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCByZXR1cm5TdWZmaXggPSAoKSA9PiB0aGlzLm9wdGlvbnMucHJlcGVuZCAmJiBzdWZmaXgudG9TdHJpbmcoKSA/IHRoaXMub3B0aW9ucy5wcmVwZW5kICsgc3VmZml4LnRvU3RyaW5nKCkgOiBzdWZmaXgudG9TdHJpbmcoKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLmNvbXBhdGliaWxpdHlKU09OID09PSAndjEnKSB7XG4gICAgICBpZiAoc3VmZml4ID09PSAxKSByZXR1cm4gJyc7XG4gICAgICBpZiAodHlwZW9mIHN1ZmZpeCA9PT0gJ251bWJlcicpIHJldHVybiBgX3BsdXJhbF8ke3N1ZmZpeC50b1N0cmluZygpfWA7XG4gICAgICByZXR1cm4gcmV0dXJuU3VmZml4KCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuY29tcGF0aWJpbGl0eUpTT04gPT09ICd2MicpIHtcbiAgICAgIHJldHVybiByZXR1cm5TdWZmaXgoKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5zaW1wbGlmeVBsdXJhbFN1ZmZpeCAmJiBydWxlLm51bWJlcnMubGVuZ3RoID09PSAyICYmIHJ1bGUubnVtYmVyc1swXSA9PT0gMSkge1xuICAgICAgcmV0dXJuIHJldHVyblN1ZmZpeCgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLnByZXBlbmQgJiYgaWR4LnRvU3RyaW5nKCkgPyB0aGlzLm9wdGlvbnMucHJlcGVuZCArIGlkeC50b1N0cmluZygpIDogaWR4LnRvU3RyaW5nKCk7XG4gIH1cbiAgc2hvdWxkVXNlSW50bEFwaSgpIHtcbiAgICByZXR1cm4gIW5vbkludGxWZXJzaW9ucy5pbmNsdWRlcyh0aGlzLm9wdGlvbnMuY29tcGF0aWJpbGl0eUpTT04pO1xuICB9XG59XG5cbmNvbnN0IGRlZXBGaW5kV2l0aERlZmF1bHRzID0gZnVuY3Rpb24gKGRhdGEsIGRlZmF1bHREYXRhLCBrZXkpIHtcbiAgbGV0IGtleVNlcGFyYXRvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogJy4nO1xuICBsZXQgaWdub3JlSlNPTlN0cnVjdHVyZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogdHJ1ZTtcbiAgbGV0IHBhdGggPSBnZXRQYXRoV2l0aERlZmF1bHRzKGRhdGEsIGRlZmF1bHREYXRhLCBrZXkpO1xuICBpZiAoIXBhdGggJiYgaWdub3JlSlNPTlN0cnVjdHVyZSAmJiB0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgIHBhdGggPSBkZWVwRmluZChkYXRhLCBrZXksIGtleVNlcGFyYXRvcik7XG4gICAgaWYgKHBhdGggPT09IHVuZGVmaW5lZCkgcGF0aCA9IGRlZXBGaW5kKGRlZmF1bHREYXRhLCBrZXksIGtleVNlcGFyYXRvcik7XG4gIH1cbiAgcmV0dXJuIHBhdGg7XG59O1xuY29uc3QgcmVnZXhTYWZlID0gdmFsID0+IHZhbC5yZXBsYWNlKC9cXCQvZywgJyQkJCQnKTtcbmNsYXNzIEludGVycG9sYXRvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB0aGlzLmxvZ2dlciA9IGJhc2VMb2dnZXIuY3JlYXRlKCdpbnRlcnBvbGF0b3InKTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuZm9ybWF0ID0gb3B0aW9ucy5pbnRlcnBvbGF0aW9uICYmIG9wdGlvbnMuaW50ZXJwb2xhdGlvbi5mb3JtYXQgfHwgKHZhbHVlID0+IHZhbHVlKTtcbiAgICB0aGlzLmluaXQob3B0aW9ucyk7XG4gIH1cbiAgaW5pdCgpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgaWYgKCFvcHRpb25zLmludGVycG9sYXRpb24pIG9wdGlvbnMuaW50ZXJwb2xhdGlvbiA9IHtcbiAgICAgIGVzY2FwZVZhbHVlOiB0cnVlXG4gICAgfTtcbiAgICBjb25zdCB7XG4gICAgICBlc2NhcGU6IGVzY2FwZSQxLFxuICAgICAgZXNjYXBlVmFsdWUsXG4gICAgICB1c2VSYXdWYWx1ZVRvRXNjYXBlLFxuICAgICAgcHJlZml4LFxuICAgICAgcHJlZml4RXNjYXBlZCxcbiAgICAgIHN1ZmZpeCxcbiAgICAgIHN1ZmZpeEVzY2FwZWQsXG4gICAgICBmb3JtYXRTZXBhcmF0b3IsXG4gICAgICB1bmVzY2FwZVN1ZmZpeCxcbiAgICAgIHVuZXNjYXBlUHJlZml4LFxuICAgICAgbmVzdGluZ1ByZWZpeCxcbiAgICAgIG5lc3RpbmdQcmVmaXhFc2NhcGVkLFxuICAgICAgbmVzdGluZ1N1ZmZpeCxcbiAgICAgIG5lc3RpbmdTdWZmaXhFc2NhcGVkLFxuICAgICAgbmVzdGluZ09wdGlvbnNTZXBhcmF0b3IsXG4gICAgICBtYXhSZXBsYWNlcyxcbiAgICAgIGFsd2F5c0Zvcm1hdFxuICAgIH0gPSBvcHRpb25zLmludGVycG9sYXRpb247XG4gICAgdGhpcy5lc2NhcGUgPSBlc2NhcGUkMSAhPT0gdW5kZWZpbmVkID8gZXNjYXBlJDEgOiBlc2NhcGU7XG4gICAgdGhpcy5lc2NhcGVWYWx1ZSA9IGVzY2FwZVZhbHVlICE9PSB1bmRlZmluZWQgPyBlc2NhcGVWYWx1ZSA6IHRydWU7XG4gICAgdGhpcy51c2VSYXdWYWx1ZVRvRXNjYXBlID0gdXNlUmF3VmFsdWVUb0VzY2FwZSAhPT0gdW5kZWZpbmVkID8gdXNlUmF3VmFsdWVUb0VzY2FwZSA6IGZhbHNlO1xuICAgIHRoaXMucHJlZml4ID0gcHJlZml4ID8gcmVnZXhFc2NhcGUocHJlZml4KSA6IHByZWZpeEVzY2FwZWQgfHwgJ3t7JztcbiAgICB0aGlzLnN1ZmZpeCA9IHN1ZmZpeCA/IHJlZ2V4RXNjYXBlKHN1ZmZpeCkgOiBzdWZmaXhFc2NhcGVkIHx8ICd9fSc7XG4gICAgdGhpcy5mb3JtYXRTZXBhcmF0b3IgPSBmb3JtYXRTZXBhcmF0b3IgfHwgJywnO1xuICAgIHRoaXMudW5lc2NhcGVQcmVmaXggPSB1bmVzY2FwZVN1ZmZpeCA/ICcnIDogdW5lc2NhcGVQcmVmaXggfHwgJy0nO1xuICAgIHRoaXMudW5lc2NhcGVTdWZmaXggPSB0aGlzLnVuZXNjYXBlUHJlZml4ID8gJycgOiB1bmVzY2FwZVN1ZmZpeCB8fCAnJztcbiAgICB0aGlzLm5lc3RpbmdQcmVmaXggPSBuZXN0aW5nUHJlZml4ID8gcmVnZXhFc2NhcGUobmVzdGluZ1ByZWZpeCkgOiBuZXN0aW5nUHJlZml4RXNjYXBlZCB8fCByZWdleEVzY2FwZSgnJHQoJyk7XG4gICAgdGhpcy5uZXN0aW5nU3VmZml4ID0gbmVzdGluZ1N1ZmZpeCA/IHJlZ2V4RXNjYXBlKG5lc3RpbmdTdWZmaXgpIDogbmVzdGluZ1N1ZmZpeEVzY2FwZWQgfHwgcmVnZXhFc2NhcGUoJyknKTtcbiAgICB0aGlzLm5lc3RpbmdPcHRpb25zU2VwYXJhdG9yID0gbmVzdGluZ09wdGlvbnNTZXBhcmF0b3IgfHwgJywnO1xuICAgIHRoaXMubWF4UmVwbGFjZXMgPSBtYXhSZXBsYWNlcyB8fCAxMDAwO1xuICAgIHRoaXMuYWx3YXlzRm9ybWF0ID0gYWx3YXlzRm9ybWF0ICE9PSB1bmRlZmluZWQgPyBhbHdheXNGb3JtYXQgOiBmYWxzZTtcbiAgICB0aGlzLnJlc2V0UmVnRXhwKCk7XG4gIH1cbiAgcmVzZXQoKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucykgdGhpcy5pbml0KHRoaXMub3B0aW9ucyk7XG4gIH1cbiAgcmVzZXRSZWdFeHAoKSB7XG4gICAgY29uc3QgZ2V0T3JSZXNldFJlZ0V4cCA9IChleGlzdGluZ1JlZ0V4cCwgcGF0dGVybikgPT4ge1xuICAgICAgaWYgKGV4aXN0aW5nUmVnRXhwICYmIGV4aXN0aW5nUmVnRXhwLnNvdXJjZSA9PT0gcGF0dGVybikge1xuICAgICAgICBleGlzdGluZ1JlZ0V4cC5sYXN0SW5kZXggPSAwO1xuICAgICAgICByZXR1cm4gZXhpc3RpbmdSZWdFeHA7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IFJlZ0V4cChwYXR0ZXJuLCAnZycpO1xuICAgIH07XG4gICAgdGhpcy5yZWdleHAgPSBnZXRPclJlc2V0UmVnRXhwKHRoaXMucmVnZXhwLCBgJHt0aGlzLnByZWZpeH0oLis/KSR7dGhpcy5zdWZmaXh9YCk7XG4gICAgdGhpcy5yZWdleHBVbmVzY2FwZSA9IGdldE9yUmVzZXRSZWdFeHAodGhpcy5yZWdleHBVbmVzY2FwZSwgYCR7dGhpcy5wcmVmaXh9JHt0aGlzLnVuZXNjYXBlUHJlZml4fSguKz8pJHt0aGlzLnVuZXNjYXBlU3VmZml4fSR7dGhpcy5zdWZmaXh9YCk7XG4gICAgdGhpcy5uZXN0aW5nUmVnZXhwID0gZ2V0T3JSZXNldFJlZ0V4cCh0aGlzLm5lc3RpbmdSZWdleHAsIGAke3RoaXMubmVzdGluZ1ByZWZpeH0oLis/KSR7dGhpcy5uZXN0aW5nU3VmZml4fWApO1xuICB9XG4gIGludGVycG9sYXRlKHN0ciwgZGF0YSwgbG5nLCBvcHRpb25zKSB7XG4gICAgbGV0IG1hdGNoO1xuICAgIGxldCB2YWx1ZTtcbiAgICBsZXQgcmVwbGFjZXM7XG4gICAgY29uc3QgZGVmYXVsdERhdGEgPSB0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24gJiYgdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uZGVmYXVsdFZhcmlhYmxlcyB8fCB7fTtcbiAgICBjb25zdCBoYW5kbGVGb3JtYXQgPSBrZXkgPT4ge1xuICAgICAgaWYgKGtleS5pbmRleE9mKHRoaXMuZm9ybWF0U2VwYXJhdG9yKSA8IDApIHtcbiAgICAgICAgY29uc3QgcGF0aCA9IGRlZXBGaW5kV2l0aERlZmF1bHRzKGRhdGEsIGRlZmF1bHREYXRhLCBrZXksIHRoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3IsIHRoaXMub3B0aW9ucy5pZ25vcmVKU09OU3RydWN0dXJlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWx3YXlzRm9ybWF0ID8gdGhpcy5mb3JtYXQocGF0aCwgdW5kZWZpbmVkLCBsbmcsIHtcbiAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgIC4uLmRhdGEsXG4gICAgICAgICAgaW50ZXJwb2xhdGlvbmtleToga2V5XG4gICAgICAgIH0pIDogcGF0aDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHAgPSBrZXkuc3BsaXQodGhpcy5mb3JtYXRTZXBhcmF0b3IpO1xuICAgICAgY29uc3QgayA9IHAuc2hpZnQoKS50cmltKCk7XG4gICAgICBjb25zdCBmID0gcC5qb2luKHRoaXMuZm9ybWF0U2VwYXJhdG9yKS50cmltKCk7XG4gICAgICByZXR1cm4gdGhpcy5mb3JtYXQoZGVlcEZpbmRXaXRoRGVmYXVsdHMoZGF0YSwgZGVmYXVsdERhdGEsIGssIHRoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3IsIHRoaXMub3B0aW9ucy5pZ25vcmVKU09OU3RydWN0dXJlKSwgZiwgbG5nLCB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIC4uLmRhdGEsXG4gICAgICAgIGludGVycG9sYXRpb25rZXk6IGtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgdGhpcy5yZXNldFJlZ0V4cCgpO1xuICAgIGNvbnN0IG1pc3NpbmdJbnRlcnBvbGF0aW9uSGFuZGxlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5taXNzaW5nSW50ZXJwb2xhdGlvbkhhbmRsZXIgfHwgdGhpcy5vcHRpb25zLm1pc3NpbmdJbnRlcnBvbGF0aW9uSGFuZGxlcjtcbiAgICBjb25zdCBza2lwT25WYXJpYWJsZXMgPSBvcHRpb25zICYmIG9wdGlvbnMuaW50ZXJwb2xhdGlvbiAmJiBvcHRpb25zLmludGVycG9sYXRpb24uc2tpcE9uVmFyaWFibGVzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmludGVycG9sYXRpb24uc2tpcE9uVmFyaWFibGVzIDogdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uc2tpcE9uVmFyaWFibGVzO1xuICAgIGNvbnN0IHRvZG9zID0gW3tcbiAgICAgIHJlZ2V4OiB0aGlzLnJlZ2V4cFVuZXNjYXBlLFxuICAgICAgc2FmZVZhbHVlOiB2YWwgPT4gcmVnZXhTYWZlKHZhbClcbiAgICB9LCB7XG4gICAgICByZWdleDogdGhpcy5yZWdleHAsXG4gICAgICBzYWZlVmFsdWU6IHZhbCA9PiB0aGlzLmVzY2FwZVZhbHVlID8gcmVnZXhTYWZlKHRoaXMuZXNjYXBlKHZhbCkpIDogcmVnZXhTYWZlKHZhbClcbiAgICB9XTtcbiAgICB0b2Rvcy5mb3JFYWNoKHRvZG8gPT4ge1xuICAgICAgcmVwbGFjZXMgPSAwO1xuICAgICAgd2hpbGUgKG1hdGNoID0gdG9kby5yZWdleC5leGVjKHN0cikpIHtcbiAgICAgICAgY29uc3QgbWF0Y2hlZFZhciA9IG1hdGNoWzFdLnRyaW0oKTtcbiAgICAgICAgdmFsdWUgPSBoYW5kbGVGb3JtYXQobWF0Y2hlZFZhcik7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBtaXNzaW5nSW50ZXJwb2xhdGlvbkhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBtaXNzaW5nSW50ZXJwb2xhdGlvbkhhbmRsZXIoc3RyLCBtYXRjaCwgb3B0aW9ucyk7XG4gICAgICAgICAgICB2YWx1ZSA9IHR5cGVvZiB0ZW1wID09PSAnc3RyaW5nJyA/IHRlbXAgOiAnJztcbiAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsIG1hdGNoZWRWYXIpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc2tpcE9uVmFyaWFibGVzKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IG1hdGNoWzBdO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4oYG1pc3NlZCB0byBwYXNzIGluIHZhcmlhYmxlICR7bWF0Y2hlZFZhcn0gZm9yIGludGVycG9sYXRpbmcgJHtzdHJ9YCk7XG4gICAgICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmICF0aGlzLnVzZVJhd1ZhbHVlVG9Fc2NhcGUpIHtcbiAgICAgICAgICB2YWx1ZSA9IG1ha2VTdHJpbmcodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNhZmVWYWx1ZSA9IHRvZG8uc2FmZVZhbHVlKHZhbHVlKTtcbiAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UobWF0Y2hbMF0sIHNhZmVWYWx1ZSk7XG4gICAgICAgIGlmIChza2lwT25WYXJpYWJsZXMpIHtcbiAgICAgICAgICB0b2RvLnJlZ2V4Lmxhc3RJbmRleCArPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgdG9kby5yZWdleC5sYXN0SW5kZXggLT0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRvZG8ucmVnZXgubGFzdEluZGV4ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXBsYWNlcysrO1xuICAgICAgICBpZiAocmVwbGFjZXMgPj0gdGhpcy5tYXhSZXBsYWNlcykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuICBuZXN0KHN0ciwgZmMpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgbGV0IG1hdGNoO1xuICAgIGxldCB2YWx1ZTtcbiAgICBsZXQgY2xvbmVkT3B0aW9ucztcbiAgICBjb25zdCBoYW5kbGVIYXNPcHRpb25zID0gKGtleSwgaW5oZXJpdGVkT3B0aW9ucykgPT4ge1xuICAgICAgY29uc3Qgc2VwID0gdGhpcy5uZXN0aW5nT3B0aW9uc1NlcGFyYXRvcjtcbiAgICAgIGlmIChrZXkuaW5kZXhPZihzZXApIDwgMCkgcmV0dXJuIGtleTtcbiAgICAgIGNvbnN0IGMgPSBrZXkuc3BsaXQobmV3IFJlZ0V4cChgJHtzZXB9WyBdKntgKSk7XG4gICAgICBsZXQgb3B0aW9uc1N0cmluZyA9IGB7JHtjWzFdfWA7XG4gICAgICBrZXkgPSBjWzBdO1xuICAgICAgb3B0aW9uc1N0cmluZyA9IHRoaXMuaW50ZXJwb2xhdGUob3B0aW9uc1N0cmluZywgY2xvbmVkT3B0aW9ucyk7XG4gICAgICBjb25zdCBtYXRjaGVkU2luZ2xlUXVvdGVzID0gb3B0aW9uc1N0cmluZy5tYXRjaCgvJy9nKTtcbiAgICAgIGNvbnN0IG1hdGNoZWREb3VibGVRdW90ZXMgPSBvcHRpb25zU3RyaW5nLm1hdGNoKC9cIi9nKTtcbiAgICAgIGlmIChtYXRjaGVkU2luZ2xlUXVvdGVzICYmIG1hdGNoZWRTaW5nbGVRdW90ZXMubGVuZ3RoICUgMiA9PT0gMCAmJiAhbWF0Y2hlZERvdWJsZVF1b3RlcyB8fCBtYXRjaGVkRG91YmxlUXVvdGVzLmxlbmd0aCAlIDIgIT09IDApIHtcbiAgICAgICAgb3B0aW9uc1N0cmluZyA9IG9wdGlvbnNTdHJpbmcucmVwbGFjZSgvJy9nLCAnXCInKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIGNsb25lZE9wdGlvbnMgPSBKU09OLnBhcnNlKG9wdGlvbnNTdHJpbmcpO1xuICAgICAgICBpZiAoaW5oZXJpdGVkT3B0aW9ucykgY2xvbmVkT3B0aW9ucyA9IHtcbiAgICAgICAgICAuLi5pbmhlcml0ZWRPcHRpb25zLFxuICAgICAgICAgIC4uLmNsb25lZE9wdGlvbnNcbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIud2FybihgZmFpbGVkIHBhcnNpbmcgb3B0aW9ucyBzdHJpbmcgaW4gbmVzdGluZyBmb3Iga2V5ICR7a2V5fWAsIGUpO1xuICAgICAgICByZXR1cm4gYCR7a2V5fSR7c2VwfSR7b3B0aW9uc1N0cmluZ31gO1xuICAgICAgfVxuICAgICAgaWYgKGNsb25lZE9wdGlvbnMuZGVmYXVsdFZhbHVlICYmIGNsb25lZE9wdGlvbnMuZGVmYXVsdFZhbHVlLmluZGV4T2YodGhpcy5wcmVmaXgpID4gLTEpIGRlbGV0ZSBjbG9uZWRPcHRpb25zLmRlZmF1bHRWYWx1ZTtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfTtcbiAgICB3aGlsZSAobWF0Y2ggPSB0aGlzLm5lc3RpbmdSZWdleHAuZXhlYyhzdHIpKSB7XG4gICAgICBsZXQgZm9ybWF0dGVycyA9IFtdO1xuICAgICAgY2xvbmVkT3B0aW9ucyA9IHtcbiAgICAgICAgLi4ub3B0aW9uc1xuICAgICAgfTtcbiAgICAgIGNsb25lZE9wdGlvbnMgPSBjbG9uZWRPcHRpb25zLnJlcGxhY2UgJiYgdHlwZW9mIGNsb25lZE9wdGlvbnMucmVwbGFjZSAhPT0gJ3N0cmluZycgPyBjbG9uZWRPcHRpb25zLnJlcGxhY2UgOiBjbG9uZWRPcHRpb25zO1xuICAgICAgY2xvbmVkT3B0aW9ucy5hcHBseVBvc3RQcm9jZXNzb3IgPSBmYWxzZTtcbiAgICAgIGRlbGV0ZSBjbG9uZWRPcHRpb25zLmRlZmF1bHRWYWx1ZTtcbiAgICAgIGxldCBkb1JlZHVjZSA9IGZhbHNlO1xuICAgICAgaWYgKG1hdGNoWzBdLmluZGV4T2YodGhpcy5mb3JtYXRTZXBhcmF0b3IpICE9PSAtMSAmJiAhL3suKn0vLnRlc3QobWF0Y2hbMV0pKSB7XG4gICAgICAgIGNvbnN0IHIgPSBtYXRjaFsxXS5zcGxpdCh0aGlzLmZvcm1hdFNlcGFyYXRvcikubWFwKGVsZW0gPT4gZWxlbS50cmltKCkpO1xuICAgICAgICBtYXRjaFsxXSA9IHIuc2hpZnQoKTtcbiAgICAgICAgZm9ybWF0dGVycyA9IHI7XG4gICAgICAgIGRvUmVkdWNlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gZmMoaGFuZGxlSGFzT3B0aW9ucy5jYWxsKHRoaXMsIG1hdGNoWzFdLnRyaW0oKSwgY2xvbmVkT3B0aW9ucyksIGNsb25lZE9wdGlvbnMpO1xuICAgICAgaWYgKHZhbHVlICYmIG1hdGNoWzBdID09PSBzdHIgJiYgdHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykgcmV0dXJuIHZhbHVlO1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHZhbHVlID0gbWFrZVN0cmluZyh2YWx1ZSk7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLndhcm4oYG1pc3NlZCB0byByZXNvbHZlICR7bWF0Y2hbMV19IGZvciBuZXN0aW5nICR7c3RyfWApO1xuICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgfVxuICAgICAgaWYgKGRvUmVkdWNlKSB7XG4gICAgICAgIHZhbHVlID0gZm9ybWF0dGVycy5yZWR1Y2UoKHYsIGYpID0+IHRoaXMuZm9ybWF0KHYsIGYsIG9wdGlvbnMubG5nLCB7XG4gICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICBpbnRlcnBvbGF0aW9ua2V5OiBtYXRjaFsxXS50cmltKClcbiAgICAgICAgfSksIHZhbHVlLnRyaW0oKSk7XG4gICAgICB9XG4gICAgICBzdHIgPSBzdHIucmVwbGFjZShtYXRjaFswXSwgdmFsdWUpO1xuICAgICAgdGhpcy5yZWdleHAubGFzdEluZGV4ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuXG5jb25zdCBwYXJzZUZvcm1hdFN0ciA9IGZvcm1hdFN0ciA9PiB7XG4gIGxldCBmb3JtYXROYW1lID0gZm9ybWF0U3RyLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICBjb25zdCBmb3JtYXRPcHRpb25zID0ge307XG4gIGlmIChmb3JtYXRTdHIuaW5kZXhPZignKCcpID4gLTEpIHtcbiAgICBjb25zdCBwID0gZm9ybWF0U3RyLnNwbGl0KCcoJyk7XG4gICAgZm9ybWF0TmFtZSA9IHBbMF0udG9Mb3dlckNhc2UoKS50cmltKCk7XG4gICAgY29uc3Qgb3B0U3RyID0gcFsxXS5zdWJzdHJpbmcoMCwgcFsxXS5sZW5ndGggLSAxKTtcbiAgICBpZiAoZm9ybWF0TmFtZSA9PT0gJ2N1cnJlbmN5JyAmJiBvcHRTdHIuaW5kZXhPZignOicpIDwgMCkge1xuICAgICAgaWYgKCFmb3JtYXRPcHRpb25zLmN1cnJlbmN5KSBmb3JtYXRPcHRpb25zLmN1cnJlbmN5ID0gb3B0U3RyLnRyaW0oKTtcbiAgICB9IGVsc2UgaWYgKGZvcm1hdE5hbWUgPT09ICdyZWxhdGl2ZXRpbWUnICYmIG9wdFN0ci5pbmRleE9mKCc6JykgPCAwKSB7XG4gICAgICBpZiAoIWZvcm1hdE9wdGlvbnMucmFuZ2UpIGZvcm1hdE9wdGlvbnMucmFuZ2UgPSBvcHRTdHIudHJpbSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBvcHRzID0gb3B0U3RyLnNwbGl0KCc7Jyk7XG4gICAgICBvcHRzLmZvckVhY2gob3B0ID0+IHtcbiAgICAgICAgaWYgKG9wdCkge1xuICAgICAgICAgIGNvbnN0IFtrZXksIC4uLnJlc3RdID0gb3B0LnNwbGl0KCc6Jyk7XG4gICAgICAgICAgY29uc3QgdmFsID0gcmVzdC5qb2luKCc6JykudHJpbSgpLnJlcGxhY2UoL14nK3wnKyQvZywgJycpO1xuICAgICAgICAgIGNvbnN0IHRyaW1tZWRLZXkgPSBrZXkudHJpbSgpO1xuICAgICAgICAgIGlmICghZm9ybWF0T3B0aW9uc1t0cmltbWVkS2V5XSkgZm9ybWF0T3B0aW9uc1t0cmltbWVkS2V5XSA9IHZhbDtcbiAgICAgICAgICBpZiAodmFsID09PSAnZmFsc2UnKSBmb3JtYXRPcHRpb25zW3RyaW1tZWRLZXldID0gZmFsc2U7XG4gICAgICAgICAgaWYgKHZhbCA9PT0gJ3RydWUnKSBmb3JtYXRPcHRpb25zW3RyaW1tZWRLZXldID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoIWlzTmFOKHZhbCkpIGZvcm1hdE9wdGlvbnNbdHJpbW1lZEtleV0gPSBwYXJzZUludCh2YWwsIDEwKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgZm9ybWF0TmFtZSxcbiAgICBmb3JtYXRPcHRpb25zXG4gIH07XG59O1xuY29uc3QgY3JlYXRlQ2FjaGVkRm9ybWF0dGVyID0gZm4gPT4ge1xuICBjb25zdCBjYWNoZSA9IHt9O1xuICByZXR1cm4gKHZhbCwgbG5nLCBvcHRpb25zKSA9PiB7XG4gICAgbGV0IG9wdEZvckNhY2hlID0gb3B0aW9ucztcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmludGVycG9sYXRpb25rZXkgJiYgb3B0aW9ucy5mb3JtYXRQYXJhbXMgJiYgb3B0aW9ucy5mb3JtYXRQYXJhbXNbb3B0aW9ucy5pbnRlcnBvbGF0aW9ua2V5XSAmJiBvcHRpb25zW29wdGlvbnMuaW50ZXJwb2xhdGlvbmtleV0pIHtcbiAgICAgIG9wdEZvckNhY2hlID0ge1xuICAgICAgICAuLi5vcHRGb3JDYWNoZSxcbiAgICAgICAgW29wdGlvbnMuaW50ZXJwb2xhdGlvbmtleV06IHVuZGVmaW5lZFxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3Qga2V5ID0gbG5nICsgSlNPTi5zdHJpbmdpZnkob3B0Rm9yQ2FjaGUpO1xuICAgIGxldCBmb3JtYXR0ZXIgPSBjYWNoZVtrZXldO1xuICAgIGlmICghZm9ybWF0dGVyKSB7XG4gICAgICBmb3JtYXR0ZXIgPSBmbihnZXRDbGVhbmVkQ29kZShsbmcpLCBvcHRpb25zKTtcbiAgICAgIGNhY2hlW2tleV0gPSBmb3JtYXR0ZXI7XG4gICAgfVxuICAgIHJldHVybiBmb3JtYXR0ZXIodmFsKTtcbiAgfTtcbn07XG5jbGFzcyBGb3JtYXR0ZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdGhpcy5sb2dnZXIgPSBiYXNlTG9nZ2VyLmNyZWF0ZSgnZm9ybWF0dGVyJyk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmZvcm1hdHMgPSB7XG4gICAgICBudW1iZXI6IGNyZWF0ZUNhY2hlZEZvcm1hdHRlcigobG5nLCBvcHQpID0+IHtcbiAgICAgICAgY29uc3QgZm9ybWF0dGVyID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KGxuZywge1xuICAgICAgICAgIC4uLm9wdFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHZhbCA9PiBmb3JtYXR0ZXIuZm9ybWF0KHZhbCk7XG4gICAgICB9KSxcbiAgICAgIGN1cnJlbmN5OiBjcmVhdGVDYWNoZWRGb3JtYXR0ZXIoKGxuZywgb3B0KSA9PiB7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlciA9IG5ldyBJbnRsLk51bWJlckZvcm1hdChsbmcsIHtcbiAgICAgICAgICAuLi5vcHQsXG4gICAgICAgICAgc3R5bGU6ICdjdXJyZW5jeSdcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB2YWwgPT4gZm9ybWF0dGVyLmZvcm1hdCh2YWwpO1xuICAgICAgfSksXG4gICAgICBkYXRldGltZTogY3JlYXRlQ2FjaGVkRm9ybWF0dGVyKChsbmcsIG9wdCkgPT4ge1xuICAgICAgICBjb25zdCBmb3JtYXR0ZXIgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsbmcsIHtcbiAgICAgICAgICAuLi5vcHRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB2YWwgPT4gZm9ybWF0dGVyLmZvcm1hdCh2YWwpO1xuICAgICAgfSksXG4gICAgICByZWxhdGl2ZXRpbWU6IGNyZWF0ZUNhY2hlZEZvcm1hdHRlcigobG5nLCBvcHQpID0+IHtcbiAgICAgICAgY29uc3QgZm9ybWF0dGVyID0gbmV3IEludGwuUmVsYXRpdmVUaW1lRm9ybWF0KGxuZywge1xuICAgICAgICAgIC4uLm9wdFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHZhbCA9PiBmb3JtYXR0ZXIuZm9ybWF0KHZhbCwgb3B0LnJhbmdlIHx8ICdkYXknKTtcbiAgICAgIH0pLFxuICAgICAgbGlzdDogY3JlYXRlQ2FjaGVkRm9ybWF0dGVyKChsbmcsIG9wdCkgPT4ge1xuICAgICAgICBjb25zdCBmb3JtYXR0ZXIgPSBuZXcgSW50bC5MaXN0Rm9ybWF0KGxuZywge1xuICAgICAgICAgIC4uLm9wdFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHZhbCA9PiBmb3JtYXR0ZXIuZm9ybWF0KHZhbCk7XG4gICAgICB9KVxuICAgIH07XG4gICAgdGhpcy5pbml0KG9wdGlvbnMpO1xuICB9XG4gIGluaXQoc2VydmljZXMpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge1xuICAgICAgaW50ZXJwb2xhdGlvbjoge31cbiAgICB9O1xuICAgIGNvbnN0IGlPcHRzID0gb3B0aW9ucy5pbnRlcnBvbGF0aW9uO1xuICAgIHRoaXMuZm9ybWF0U2VwYXJhdG9yID0gaU9wdHMuZm9ybWF0U2VwYXJhdG9yID8gaU9wdHMuZm9ybWF0U2VwYXJhdG9yIDogaU9wdHMuZm9ybWF0U2VwYXJhdG9yIHx8ICcsJztcbiAgfVxuICBhZGQobmFtZSwgZmMpIHtcbiAgICB0aGlzLmZvcm1hdHNbbmFtZS50b0xvd2VyQ2FzZSgpLnRyaW0oKV0gPSBmYztcbiAgfVxuICBhZGRDYWNoZWQobmFtZSwgZmMpIHtcbiAgICB0aGlzLmZvcm1hdHNbbmFtZS50b0xvd2VyQ2FzZSgpLnRyaW0oKV0gPSBjcmVhdGVDYWNoZWRGb3JtYXR0ZXIoZmMpO1xuICB9XG4gIGZvcm1hdCh2YWx1ZSwgZm9ybWF0LCBsbmcpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge307XG4gICAgY29uc3QgZm9ybWF0cyA9IGZvcm1hdC5zcGxpdCh0aGlzLmZvcm1hdFNlcGFyYXRvcik7XG4gICAgaWYgKGZvcm1hdHMubGVuZ3RoID4gMSAmJiBmb3JtYXRzWzBdLmluZGV4T2YoJygnKSA+IDEgJiYgZm9ybWF0c1swXS5pbmRleE9mKCcpJykgPCAwICYmIGZvcm1hdHMuZmluZChmID0+IGYuaW5kZXhPZignKScpID4gLTEpKSB7XG4gICAgICBjb25zdCBsYXN0SW5kZXggPSBmb3JtYXRzLmZpbmRJbmRleChmID0+IGYuaW5kZXhPZignKScpID4gLTEpO1xuICAgICAgZm9ybWF0c1swXSA9IFtmb3JtYXRzWzBdLCAuLi5mb3JtYXRzLnNwbGljZSgxLCBsYXN0SW5kZXgpXS5qb2luKHRoaXMuZm9ybWF0U2VwYXJhdG9yKTtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gZm9ybWF0cy5yZWR1Y2UoKG1lbSwgZikgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBmb3JtYXROYW1lLFxuICAgICAgICBmb3JtYXRPcHRpb25zXG4gICAgICB9ID0gcGFyc2VGb3JtYXRTdHIoZik7XG4gICAgICBpZiAodGhpcy5mb3JtYXRzW2Zvcm1hdE5hbWVdKSB7XG4gICAgICAgIGxldCBmb3JtYXR0ZWQgPSBtZW07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgdmFsT3B0aW9ucyA9IG9wdGlvbnMgJiYgb3B0aW9ucy5mb3JtYXRQYXJhbXMgJiYgb3B0aW9ucy5mb3JtYXRQYXJhbXNbb3B0aW9ucy5pbnRlcnBvbGF0aW9ua2V5XSB8fCB7fTtcbiAgICAgICAgICBjb25zdCBsID0gdmFsT3B0aW9ucy5sb2NhbGUgfHwgdmFsT3B0aW9ucy5sbmcgfHwgb3B0aW9ucy5sb2NhbGUgfHwgb3B0aW9ucy5sbmcgfHwgbG5nO1xuICAgICAgICAgIGZvcm1hdHRlZCA9IHRoaXMuZm9ybWF0c1tmb3JtYXROYW1lXShtZW0sIGwsIHtcbiAgICAgICAgICAgIC4uLmZvcm1hdE9wdGlvbnMsXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgLi4udmFsT3B0aW9uc1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4oZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JtYXR0ZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKGB0aGVyZSB3YXMgbm8gZm9ybWF0IGZ1bmN0aW9uIGZvciAke2Zvcm1hdE5hbWV9YCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWVtO1xuICAgIH0sIHZhbHVlKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG5cbmNvbnN0IHJlbW92ZVBlbmRpbmcgPSAocSwgbmFtZSkgPT4ge1xuICBpZiAocS5wZW5kaW5nW25hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICBkZWxldGUgcS5wZW5kaW5nW25hbWVdO1xuICAgIHEucGVuZGluZ0NvdW50LS07XG4gIH1cbn07XG5jbGFzcyBDb25uZWN0b3IgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvcihiYWNrZW5kLCBzdG9yZSwgc2VydmljZXMpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge307XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmJhY2tlbmQgPSBiYWNrZW5kO1xuICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgICB0aGlzLnNlcnZpY2VzID0gc2VydmljZXM7XG4gICAgdGhpcy5sYW5ndWFnZVV0aWxzID0gc2VydmljZXMubGFuZ3VhZ2VVdGlscztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMubG9nZ2VyID0gYmFzZUxvZ2dlci5jcmVhdGUoJ2JhY2tlbmRDb25uZWN0b3InKTtcbiAgICB0aGlzLndhaXRpbmdSZWFkcyA9IFtdO1xuICAgIHRoaXMubWF4UGFyYWxsZWxSZWFkcyA9IG9wdGlvbnMubWF4UGFyYWxsZWxSZWFkcyB8fCAxMDtcbiAgICB0aGlzLnJlYWRpbmdDYWxscyA9IDA7XG4gICAgdGhpcy5tYXhSZXRyaWVzID0gb3B0aW9ucy5tYXhSZXRyaWVzID49IDAgPyBvcHRpb25zLm1heFJldHJpZXMgOiA1O1xuICAgIHRoaXMucmV0cnlUaW1lb3V0ID0gb3B0aW9ucy5yZXRyeVRpbWVvdXQgPj0gMSA/IG9wdGlvbnMucmV0cnlUaW1lb3V0IDogMzUwO1xuICAgIHRoaXMuc3RhdGUgPSB7fTtcbiAgICB0aGlzLnF1ZXVlID0gW107XG4gICAgaWYgKHRoaXMuYmFja2VuZCAmJiB0aGlzLmJhY2tlbmQuaW5pdCkge1xuICAgICAgdGhpcy5iYWNrZW5kLmluaXQoc2VydmljZXMsIG9wdGlvbnMuYmFja2VuZCwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG4gIHF1ZXVlTG9hZChsYW5ndWFnZXMsIG5hbWVzcGFjZXMsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgdG9Mb2FkID0ge307XG4gICAgY29uc3QgcGVuZGluZyA9IHt9O1xuICAgIGNvbnN0IHRvTG9hZExhbmd1YWdlcyA9IHt9O1xuICAgIGNvbnN0IHRvTG9hZE5hbWVzcGFjZXMgPSB7fTtcbiAgICBsYW5ndWFnZXMuZm9yRWFjaChsbmcgPT4ge1xuICAgICAgbGV0IGhhc0FsbE5hbWVzcGFjZXMgPSB0cnVlO1xuICAgICAgbmFtZXNwYWNlcy5mb3JFYWNoKG5zID0+IHtcbiAgICAgICAgY29uc3QgbmFtZSA9IGAke2xuZ318JHtuc31gO1xuICAgICAgICBpZiAoIW9wdGlvbnMucmVsb2FkICYmIHRoaXMuc3RvcmUuaGFzUmVzb3VyY2VCdW5kbGUobG5nLCBucykpIHtcbiAgICAgICAgICB0aGlzLnN0YXRlW25hbWVdID0gMjtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlW25hbWVdIDwgMCkgOyBlbHNlIGlmICh0aGlzLnN0YXRlW25hbWVdID09PSAxKSB7XG4gICAgICAgICAgaWYgKHBlbmRpbmdbbmFtZV0gPT09IHVuZGVmaW5lZCkgcGVuZGluZ1tuYW1lXSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zdGF0ZVtuYW1lXSA9IDE7XG4gICAgICAgICAgaGFzQWxsTmFtZXNwYWNlcyA9IGZhbHNlO1xuICAgICAgICAgIGlmIChwZW5kaW5nW25hbWVdID09PSB1bmRlZmluZWQpIHBlbmRpbmdbbmFtZV0gPSB0cnVlO1xuICAgICAgICAgIGlmICh0b0xvYWRbbmFtZV0gPT09IHVuZGVmaW5lZCkgdG9Mb2FkW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgICBpZiAodG9Mb2FkTmFtZXNwYWNlc1tuc10gPT09IHVuZGVmaW5lZCkgdG9Mb2FkTmFtZXNwYWNlc1tuc10gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICghaGFzQWxsTmFtZXNwYWNlcykgdG9Mb2FkTGFuZ3VhZ2VzW2xuZ10gPSB0cnVlO1xuICAgIH0pO1xuICAgIGlmIChPYmplY3Qua2V5cyh0b0xvYWQpLmxlbmd0aCB8fCBPYmplY3Qua2V5cyhwZW5kaW5nKS5sZW5ndGgpIHtcbiAgICAgIHRoaXMucXVldWUucHVzaCh7XG4gICAgICAgIHBlbmRpbmcsXG4gICAgICAgIHBlbmRpbmdDb3VudDogT2JqZWN0LmtleXMocGVuZGluZykubGVuZ3RoLFxuICAgICAgICBsb2FkZWQ6IHt9LFxuICAgICAgICBlcnJvcnM6IFtdLFxuICAgICAgICBjYWxsYmFja1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB0b0xvYWQ6IE9iamVjdC5rZXlzKHRvTG9hZCksXG4gICAgICBwZW5kaW5nOiBPYmplY3Qua2V5cyhwZW5kaW5nKSxcbiAgICAgIHRvTG9hZExhbmd1YWdlczogT2JqZWN0LmtleXModG9Mb2FkTGFuZ3VhZ2VzKSxcbiAgICAgIHRvTG9hZE5hbWVzcGFjZXM6IE9iamVjdC5rZXlzKHRvTG9hZE5hbWVzcGFjZXMpXG4gICAgfTtcbiAgfVxuICBsb2FkZWQobmFtZSwgZXJyLCBkYXRhKSB7XG4gICAgY29uc3QgcyA9IG5hbWUuc3BsaXQoJ3wnKTtcbiAgICBjb25zdCBsbmcgPSBzWzBdO1xuICAgIGNvbnN0IG5zID0gc1sxXTtcbiAgICBpZiAoZXJyKSB0aGlzLmVtaXQoJ2ZhaWxlZExvYWRpbmcnLCBsbmcsIG5zLCBlcnIpO1xuICAgIGlmICghZXJyICYmIGRhdGEpIHtcbiAgICAgIHRoaXMuc3RvcmUuYWRkUmVzb3VyY2VCdW5kbGUobG5nLCBucywgZGF0YSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHtcbiAgICAgICAgc2tpcENvcHk6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLnN0YXRlW25hbWVdID0gZXJyID8gLTEgOiAyO1xuICAgIGlmIChlcnIgJiYgZGF0YSkgdGhpcy5zdGF0ZVtuYW1lXSA9IDA7XG4gICAgY29uc3QgbG9hZGVkID0ge307XG4gICAgdGhpcy5xdWV1ZS5mb3JFYWNoKHEgPT4ge1xuICAgICAgcHVzaFBhdGgocS5sb2FkZWQsIFtsbmddLCBucyk7XG4gICAgICByZW1vdmVQZW5kaW5nKHEsIG5hbWUpO1xuICAgICAgaWYgKGVycikgcS5lcnJvcnMucHVzaChlcnIpO1xuICAgICAgaWYgKHEucGVuZGluZ0NvdW50ID09PSAwICYmICFxLmRvbmUpIHtcbiAgICAgICAgT2JqZWN0LmtleXMocS5sb2FkZWQpLmZvckVhY2gobCA9PiB7XG4gICAgICAgICAgaWYgKCFsb2FkZWRbbF0pIGxvYWRlZFtsXSA9IHt9O1xuICAgICAgICAgIGNvbnN0IGxvYWRlZEtleXMgPSBxLmxvYWRlZFtsXTtcbiAgICAgICAgICBpZiAobG9hZGVkS2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxvYWRlZEtleXMuZm9yRWFjaChuID0+IHtcbiAgICAgICAgICAgICAgaWYgKGxvYWRlZFtsXVtuXSA9PT0gdW5kZWZpbmVkKSBsb2FkZWRbbF1bbl0gPSB0cnVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcS5kb25lID0gdHJ1ZTtcbiAgICAgICAgaWYgKHEuZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgIHEuY2FsbGJhY2socS5lcnJvcnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHEuY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuZW1pdCgnbG9hZGVkJywgbG9hZGVkKTtcbiAgICB0aGlzLnF1ZXVlID0gdGhpcy5xdWV1ZS5maWx0ZXIocSA9PiAhcS5kb25lKTtcbiAgfVxuICByZWFkKGxuZywgbnMsIGZjTmFtZSkge1xuICAgIGxldCB0cmllZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogMDtcbiAgICBsZXQgd2FpdCA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogdGhpcy5yZXRyeVRpbWVvdXQ7XG4gICAgbGV0IGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgPyBhcmd1bWVudHNbNV0gOiB1bmRlZmluZWQ7XG4gICAgaWYgKCFsbmcubGVuZ3RoKSByZXR1cm4gY2FsbGJhY2sobnVsbCwge30pO1xuICAgIGlmICh0aGlzLnJlYWRpbmdDYWxscyA+PSB0aGlzLm1heFBhcmFsbGVsUmVhZHMpIHtcbiAgICAgIHRoaXMud2FpdGluZ1JlYWRzLnB1c2goe1xuICAgICAgICBsbmcsXG4gICAgICAgIG5zLFxuICAgICAgICBmY05hbWUsXG4gICAgICAgIHRyaWVkLFxuICAgICAgICB3YWl0LFxuICAgICAgICBjYWxsYmFja1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMucmVhZGluZ0NhbGxzKys7XG4gICAgY29uc3QgcmVzb2x2ZXIgPSAoZXJyLCBkYXRhKSA9PiB7XG4gICAgICB0aGlzLnJlYWRpbmdDYWxscy0tO1xuICAgICAgaWYgKHRoaXMud2FpdGluZ1JlYWRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgbmV4dCA9IHRoaXMud2FpdGluZ1JlYWRzLnNoaWZ0KCk7XG4gICAgICAgIHRoaXMucmVhZChuZXh0LmxuZywgbmV4dC5ucywgbmV4dC5mY05hbWUsIG5leHQudHJpZWQsIG5leHQud2FpdCwgbmV4dC5jYWxsYmFjayk7XG4gICAgICB9XG4gICAgICBpZiAoZXJyICYmIGRhdGEgJiYgdHJpZWQgPCB0aGlzLm1heFJldHJpZXMpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5yZWFkLmNhbGwodGhpcywgbG5nLCBucywgZmNOYW1lLCB0cmllZCArIDEsIHdhaXQgKiAyLCBjYWxsYmFjayk7XG4gICAgICAgIH0sIHdhaXQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjYWxsYmFjayhlcnIsIGRhdGEpO1xuICAgIH07XG4gICAgY29uc3QgZmMgPSB0aGlzLmJhY2tlbmRbZmNOYW1lXS5iaW5kKHRoaXMuYmFja2VuZCk7XG4gICAgaWYgKGZjLmxlbmd0aCA9PT0gMikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgciA9IGZjKGxuZywgbnMpO1xuICAgICAgICBpZiAociAmJiB0eXBlb2Ygci50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgci50aGVuKGRhdGEgPT4gcmVzb2x2ZXIobnVsbCwgZGF0YSkpLmNhdGNoKHJlc29sdmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlcihudWxsLCByKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJlc29sdmVyKGVycik7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBmYyhsbmcsIG5zLCByZXNvbHZlcik7XG4gIH1cbiAgcHJlcGFyZUxvYWRpbmcobGFuZ3VhZ2VzLCBuYW1lc3BhY2VzKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICAgIGxldCBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogdW5kZWZpbmVkO1xuICAgIGlmICghdGhpcy5iYWNrZW5kKSB7XG4gICAgICB0aGlzLmxvZ2dlci53YXJuKCdObyBiYWNrZW5kIHdhcyBhZGRlZCB2aWEgaTE4bmV4dC51c2UuIFdpbGwgbm90IGxvYWQgcmVzb3VyY2VzLicpO1xuICAgICAgcmV0dXJuIGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbGFuZ3VhZ2VzID09PSAnc3RyaW5nJykgbGFuZ3VhZ2VzID0gdGhpcy5sYW5ndWFnZVV0aWxzLnRvUmVzb2x2ZUhpZXJhcmNoeShsYW5ndWFnZXMpO1xuICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycpIG5hbWVzcGFjZXMgPSBbbmFtZXNwYWNlc107XG4gICAgY29uc3QgdG9Mb2FkID0gdGhpcy5xdWV1ZUxvYWQobGFuZ3VhZ2VzLCBuYW1lc3BhY2VzLCBvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgaWYgKCF0b0xvYWQudG9Mb2FkLmxlbmd0aCkge1xuICAgICAgaWYgKCF0b0xvYWQucGVuZGluZy5sZW5ndGgpIGNhbGxiYWNrKCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdG9Mb2FkLnRvTG9hZC5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgdGhpcy5sb2FkT25lKG5hbWUpO1xuICAgIH0pO1xuICB9XG4gIGxvYWQobGFuZ3VhZ2VzLCBuYW1lc3BhY2VzLCBjYWxsYmFjaykge1xuICAgIHRoaXMucHJlcGFyZUxvYWRpbmcobGFuZ3VhZ2VzLCBuYW1lc3BhY2VzLCB7fSwgY2FsbGJhY2spO1xuICB9XG4gIHJlbG9hZChsYW5ndWFnZXMsIG5hbWVzcGFjZXMsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5wcmVwYXJlTG9hZGluZyhsYW5ndWFnZXMsIG5hbWVzcGFjZXMsIHtcbiAgICAgIHJlbG9hZDogdHJ1ZVxuICAgIH0sIGNhbGxiYWNrKTtcbiAgfVxuICBsb2FkT25lKG5hbWUpIHtcbiAgICBsZXQgcHJlZml4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnJztcbiAgICBjb25zdCBzID0gbmFtZS5zcGxpdCgnfCcpO1xuICAgIGNvbnN0IGxuZyA9IHNbMF07XG4gICAgY29uc3QgbnMgPSBzWzFdO1xuICAgIHRoaXMucmVhZChsbmcsIG5zLCAncmVhZCcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCAoZXJyLCBkYXRhKSA9PiB7XG4gICAgICBpZiAoZXJyKSB0aGlzLmxvZ2dlci53YXJuKGAke3ByZWZpeH1sb2FkaW5nIG5hbWVzcGFjZSAke25zfSBmb3IgbGFuZ3VhZ2UgJHtsbmd9IGZhaWxlZGAsIGVycik7XG4gICAgICBpZiAoIWVyciAmJiBkYXRhKSB0aGlzLmxvZ2dlci5sb2coYCR7cHJlZml4fWxvYWRlZCBuYW1lc3BhY2UgJHtuc30gZm9yIGxhbmd1YWdlICR7bG5nfWAsIGRhdGEpO1xuICAgICAgdGhpcy5sb2FkZWQobmFtZSwgZXJyLCBkYXRhKTtcbiAgICB9KTtcbiAgfVxuICBzYXZlTWlzc2luZyhsYW5ndWFnZXMsIG5hbWVzcGFjZSwga2V5LCBmYWxsYmFja1ZhbHVlLCBpc1VwZGF0ZSkge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiB7fTtcbiAgICBsZXQgY2xiID0gYXJndW1lbnRzLmxlbmd0aCA+IDYgJiYgYXJndW1lbnRzWzZdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNl0gOiAoKSA9PiB7fTtcbiAgICBpZiAodGhpcy5zZXJ2aWNlcy51dGlscyAmJiB0aGlzLnNlcnZpY2VzLnV0aWxzLmhhc0xvYWRlZE5hbWVzcGFjZSAmJiAhdGhpcy5zZXJ2aWNlcy51dGlscy5oYXNMb2FkZWROYW1lc3BhY2UobmFtZXNwYWNlKSkge1xuICAgICAgdGhpcy5sb2dnZXIud2FybihgZGlkIG5vdCBzYXZlIGtleSBcIiR7a2V5fVwiIGFzIHRoZSBuYW1lc3BhY2UgXCIke25hbWVzcGFjZX1cIiB3YXMgbm90IHlldCBsb2FkZWRgLCAnVGhpcyBtZWFucyBzb21ldGhpbmcgSVMgV1JPTkcgaW4geW91ciBzZXR1cC4gWW91IGFjY2VzcyB0aGUgdCBmdW5jdGlvbiBiZWZvcmUgaTE4bmV4dC5pbml0IC8gaTE4bmV4dC5sb2FkTmFtZXNwYWNlIC8gaTE4bmV4dC5jaGFuZ2VMYW5ndWFnZSB3YXMgZG9uZS4gV2FpdCBmb3IgdGhlIGNhbGxiYWNrIG9yIFByb21pc2UgdG8gcmVzb2x2ZSBiZWZvcmUgYWNjZXNzaW5nIGl0ISEhJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCB8fCBrZXkgPT09IG51bGwgfHwga2V5ID09PSAnJykgcmV0dXJuO1xuICAgIGlmICh0aGlzLmJhY2tlbmQgJiYgdGhpcy5iYWNrZW5kLmNyZWF0ZSkge1xuICAgICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgaXNVcGRhdGVcbiAgICAgIH07XG4gICAgICBjb25zdCBmYyA9IHRoaXMuYmFja2VuZC5jcmVhdGUuYmluZCh0aGlzLmJhY2tlbmQpO1xuICAgICAgaWYgKGZjLmxlbmd0aCA8IDYpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBsZXQgcjtcbiAgICAgICAgICBpZiAoZmMubGVuZ3RoID09PSA1KSB7XG4gICAgICAgICAgICByID0gZmMobGFuZ3VhZ2VzLCBuYW1lc3BhY2UsIGtleSwgZmFsbGJhY2tWYWx1ZSwgb3B0cyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHIgPSBmYyhsYW5ndWFnZXMsIG5hbWVzcGFjZSwga2V5LCBmYWxsYmFja1ZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHIgJiYgdHlwZW9mIHIudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgci50aGVuKGRhdGEgPT4gY2xiKG51bGwsIGRhdGEpKS5jYXRjaChjbGIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjbGIobnVsbCwgcik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBjbGIoZXJyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmMobGFuZ3VhZ2VzLCBuYW1lc3BhY2UsIGtleSwgZmFsbGJhY2tWYWx1ZSwgY2xiLCBvcHRzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFsYW5ndWFnZXMgfHwgIWxhbmd1YWdlc1swXSkgcmV0dXJuO1xuICAgIHRoaXMuc3RvcmUuYWRkUmVzb3VyY2UobGFuZ3VhZ2VzWzBdLCBuYW1lc3BhY2UsIGtleSwgZmFsbGJhY2tWYWx1ZSk7XG4gIH1cbn1cblxuY29uc3QgZ2V0ID0gKCkgPT4gKHtcbiAgZGVidWc6IGZhbHNlLFxuICBpbml0SW1tZWRpYXRlOiB0cnVlLFxuICBuczogWyd0cmFuc2xhdGlvbiddLFxuICBkZWZhdWx0TlM6IFsndHJhbnNsYXRpb24nXSxcbiAgZmFsbGJhY2tMbmc6IFsnZGV2J10sXG4gIGZhbGxiYWNrTlM6IGZhbHNlLFxuICBzdXBwb3J0ZWRMbmdzOiBmYWxzZSxcbiAgbm9uRXhwbGljaXRTdXBwb3J0ZWRMbmdzOiBmYWxzZSxcbiAgbG9hZDogJ2FsbCcsXG4gIHByZWxvYWQ6IGZhbHNlLFxuICBzaW1wbGlmeVBsdXJhbFN1ZmZpeDogdHJ1ZSxcbiAga2V5U2VwYXJhdG9yOiAnLicsXG4gIG5zU2VwYXJhdG9yOiAnOicsXG4gIHBsdXJhbFNlcGFyYXRvcjogJ18nLFxuICBjb250ZXh0U2VwYXJhdG9yOiAnXycsXG4gIHBhcnRpYWxCdW5kbGVkTGFuZ3VhZ2VzOiBmYWxzZSxcbiAgc2F2ZU1pc3Npbmc6IGZhbHNlLFxuICB1cGRhdGVNaXNzaW5nOiBmYWxzZSxcbiAgc2F2ZU1pc3NpbmdUbzogJ2ZhbGxiYWNrJyxcbiAgc2F2ZU1pc3NpbmdQbHVyYWxzOiB0cnVlLFxuICBtaXNzaW5nS2V5SGFuZGxlcjogZmFsc2UsXG4gIG1pc3NpbmdJbnRlcnBvbGF0aW9uSGFuZGxlcjogZmFsc2UsXG4gIHBvc3RQcm9jZXNzOiBmYWxzZSxcbiAgcG9zdFByb2Nlc3NQYXNzUmVzb2x2ZWQ6IGZhbHNlLFxuICByZXR1cm5OdWxsOiBmYWxzZSxcbiAgcmV0dXJuRW1wdHlTdHJpbmc6IHRydWUsXG4gIHJldHVybk9iamVjdHM6IGZhbHNlLFxuICBqb2luQXJyYXlzOiBmYWxzZSxcbiAgcmV0dXJuZWRPYmplY3RIYW5kbGVyOiBmYWxzZSxcbiAgcGFyc2VNaXNzaW5nS2V5SGFuZGxlcjogZmFsc2UsXG4gIGFwcGVuZE5hbWVzcGFjZVRvTWlzc2luZ0tleTogZmFsc2UsXG4gIGFwcGVuZE5hbWVzcGFjZVRvQ0lNb2RlOiBmYWxzZSxcbiAgb3ZlcmxvYWRUcmFuc2xhdGlvbk9wdGlvbkhhbmRsZXI6IGFyZ3MgPT4ge1xuICAgIGxldCByZXQgPSB7fTtcbiAgICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdvYmplY3QnKSByZXQgPSBhcmdzWzFdO1xuICAgIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ3N0cmluZycpIHJldC5kZWZhdWx0VmFsdWUgPSBhcmdzWzFdO1xuICAgIGlmICh0eXBlb2YgYXJnc1syXSA9PT0gJ3N0cmluZycpIHJldC50RGVzY3JpcHRpb24gPSBhcmdzWzJdO1xuICAgIGlmICh0eXBlb2YgYXJnc1syXSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGFyZ3NbM10gPT09ICdvYmplY3QnKSB7XG4gICAgICBjb25zdCBvcHRpb25zID0gYXJnc1szXSB8fCBhcmdzWzJdO1xuICAgICAgT2JqZWN0LmtleXMob3B0aW9ucykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICByZXRba2V5XSA9IG9wdGlvbnNba2V5XTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9LFxuICBpbnRlcnBvbGF0aW9uOiB7XG4gICAgZXNjYXBlVmFsdWU6IHRydWUsXG4gICAgZm9ybWF0OiB2YWx1ZSA9PiB2YWx1ZSxcbiAgICBwcmVmaXg6ICd7eycsXG4gICAgc3VmZml4OiAnfX0nLFxuICAgIGZvcm1hdFNlcGFyYXRvcjogJywnLFxuICAgIHVuZXNjYXBlUHJlZml4OiAnLScsXG4gICAgbmVzdGluZ1ByZWZpeDogJyR0KCcsXG4gICAgbmVzdGluZ1N1ZmZpeDogJyknLFxuICAgIG5lc3RpbmdPcHRpb25zU2VwYXJhdG9yOiAnLCcsXG4gICAgbWF4UmVwbGFjZXM6IDEwMDAsXG4gICAgc2tpcE9uVmFyaWFibGVzOiB0cnVlXG4gIH1cbn0pO1xuY29uc3QgdHJhbnNmb3JtT3B0aW9ucyA9IG9wdGlvbnMgPT4ge1xuICBpZiAodHlwZW9mIG9wdGlvbnMubnMgPT09ICdzdHJpbmcnKSBvcHRpb25zLm5zID0gW29wdGlvbnMubnNdO1xuICBpZiAodHlwZW9mIG9wdGlvbnMuZmFsbGJhY2tMbmcgPT09ICdzdHJpbmcnKSBvcHRpb25zLmZhbGxiYWNrTG5nID0gW29wdGlvbnMuZmFsbGJhY2tMbmddO1xuICBpZiAodHlwZW9mIG9wdGlvbnMuZmFsbGJhY2tOUyA9PT0gJ3N0cmluZycpIG9wdGlvbnMuZmFsbGJhY2tOUyA9IFtvcHRpb25zLmZhbGxiYWNrTlNdO1xuICBpZiAob3B0aW9ucy5zdXBwb3J0ZWRMbmdzICYmIG9wdGlvbnMuc3VwcG9ydGVkTG5ncy5pbmRleE9mKCdjaW1vZGUnKSA8IDApIHtcbiAgICBvcHRpb25zLnN1cHBvcnRlZExuZ3MgPSBvcHRpb25zLnN1cHBvcnRlZExuZ3MuY29uY2F0KFsnY2ltb2RlJ10pO1xuICB9XG4gIHJldHVybiBvcHRpb25zO1xufTtcblxuY29uc3Qgbm9vcCA9ICgpID0+IHt9O1xuY29uc3QgYmluZE1lbWJlckZ1bmN0aW9ucyA9IGluc3QgPT4ge1xuICBjb25zdCBtZW1zID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoT2JqZWN0LmdldFByb3RvdHlwZU9mKGluc3QpKTtcbiAgbWVtcy5mb3JFYWNoKG1lbSA9PiB7XG4gICAgaWYgKHR5cGVvZiBpbnN0W21lbV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGluc3RbbWVtXSA9IGluc3RbbWVtXS5iaW5kKGluc3QpO1xuICAgIH1cbiAgfSk7XG59O1xuY2xhc3MgSTE4biBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICBsZXQgY2FsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMub3B0aW9ucyA9IHRyYW5zZm9ybU9wdGlvbnMob3B0aW9ucyk7XG4gICAgdGhpcy5zZXJ2aWNlcyA9IHt9O1xuICAgIHRoaXMubG9nZ2VyID0gYmFzZUxvZ2dlcjtcbiAgICB0aGlzLm1vZHVsZXMgPSB7XG4gICAgICBleHRlcm5hbDogW11cbiAgICB9O1xuICAgIGJpbmRNZW1iZXJGdW5jdGlvbnModGhpcyk7XG4gICAgaWYgKGNhbGxiYWNrICYmICF0aGlzLmlzSW5pdGlhbGl6ZWQgJiYgIW9wdGlvbnMuaXNDbG9uZSkge1xuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuaW5pdEltbWVkaWF0ZSkge1xuICAgICAgICB0aGlzLmluaXQob3B0aW9ucywgY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmluaXQob3B0aW9ucywgY2FsbGJhY2spO1xuICAgICAgfSwgMCk7XG4gICAgfVxuICB9XG4gIGluaXQoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgbGV0IGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdGhpcy5pc0luaXRpYWxpemluZyA9IHRydWU7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIGlmICghb3B0aW9ucy5kZWZhdWx0TlMgJiYgb3B0aW9ucy5kZWZhdWx0TlMgIT09IGZhbHNlICYmIG9wdGlvbnMubnMpIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgb3B0aW9ucy5kZWZhdWx0TlMgPSBvcHRpb25zLm5zO1xuICAgICAgfSBlbHNlIGlmIChvcHRpb25zLm5zLmluZGV4T2YoJ3RyYW5zbGF0aW9uJykgPCAwKSB7XG4gICAgICAgIG9wdGlvbnMuZGVmYXVsdE5TID0gb3B0aW9ucy5uc1swXTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZGVmT3B0cyA9IGdldCgpO1xuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgIC4uLmRlZk9wdHMsXG4gICAgICAuLi50aGlzLm9wdGlvbnMsXG4gICAgICAuLi50cmFuc2Zvcm1PcHRpb25zKG9wdGlvbnMpXG4gICAgfTtcbiAgICBpZiAodGhpcy5vcHRpb25zLmNvbXBhdGliaWxpdHlBUEkgIT09ICd2MScpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uID0ge1xuICAgICAgICAuLi5kZWZPcHRzLmludGVycG9sYXRpb24sXG4gICAgICAgIC4uLnRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5rZXlTZXBhcmF0b3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5vcHRpb25zLnVzZXJEZWZpbmVkS2V5U2VwYXJhdG9yID0gb3B0aW9ucy5rZXlTZXBhcmF0b3I7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLm5zU2VwYXJhdG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMub3B0aW9ucy51c2VyRGVmaW5lZE5zU2VwYXJhdG9yID0gb3B0aW9ucy5uc1NlcGFyYXRvcjtcbiAgICB9XG4gICAgY29uc3QgY3JlYXRlQ2xhc3NPbkRlbWFuZCA9IENsYXNzT3JPYmplY3QgPT4ge1xuICAgICAgaWYgKCFDbGFzc09yT2JqZWN0KSByZXR1cm4gbnVsbDtcbiAgICAgIGlmICh0eXBlb2YgQ2xhc3NPck9iamVjdCA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIG5ldyBDbGFzc09yT2JqZWN0KCk7XG4gICAgICByZXR1cm4gQ2xhc3NPck9iamVjdDtcbiAgICB9O1xuICAgIGlmICghdGhpcy5vcHRpb25zLmlzQ2xvbmUpIHtcbiAgICAgIGlmICh0aGlzLm1vZHVsZXMubG9nZ2VyKSB7XG4gICAgICAgIGJhc2VMb2dnZXIuaW5pdChjcmVhdGVDbGFzc09uRGVtYW5kKHRoaXMubW9kdWxlcy5sb2dnZXIpLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUxvZ2dlci5pbml0KG51bGwsIHRoaXMub3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBsZXQgZm9ybWF0dGVyO1xuICAgICAgaWYgKHRoaXMubW9kdWxlcy5mb3JtYXR0ZXIpIHtcbiAgICAgICAgZm9ybWF0dGVyID0gdGhpcy5tb2R1bGVzLmZvcm1hdHRlcjtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIEludGwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGZvcm1hdHRlciA9IEZvcm1hdHRlcjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGx1ID0gbmV3IExhbmd1YWdlVXRpbCh0aGlzLm9wdGlvbnMpO1xuICAgICAgdGhpcy5zdG9yZSA9IG5ldyBSZXNvdXJjZVN0b3JlKHRoaXMub3B0aW9ucy5yZXNvdXJjZXMsIHRoaXMub3B0aW9ucyk7XG4gICAgICBjb25zdCBzID0gdGhpcy5zZXJ2aWNlcztcbiAgICAgIHMubG9nZ2VyID0gYmFzZUxvZ2dlcjtcbiAgICAgIHMucmVzb3VyY2VTdG9yZSA9IHRoaXMuc3RvcmU7XG4gICAgICBzLmxhbmd1YWdlVXRpbHMgPSBsdTtcbiAgICAgIHMucGx1cmFsUmVzb2x2ZXIgPSBuZXcgUGx1cmFsUmVzb2x2ZXIobHUsIHtcbiAgICAgICAgcHJlcGVuZDogdGhpcy5vcHRpb25zLnBsdXJhbFNlcGFyYXRvcixcbiAgICAgICAgY29tcGF0aWJpbGl0eUpTT046IHRoaXMub3B0aW9ucy5jb21wYXRpYmlsaXR5SlNPTixcbiAgICAgICAgc2ltcGxpZnlQbHVyYWxTdWZmaXg6IHRoaXMub3B0aW9ucy5zaW1wbGlmeVBsdXJhbFN1ZmZpeFxuICAgICAgfSk7XG4gICAgICBpZiAoZm9ybWF0dGVyICYmICghdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uZm9ybWF0IHx8IHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLmZvcm1hdCA9PT0gZGVmT3B0cy5pbnRlcnBvbGF0aW9uLmZvcm1hdCkpIHtcbiAgICAgICAgcy5mb3JtYXR0ZXIgPSBjcmVhdGVDbGFzc09uRGVtYW5kKGZvcm1hdHRlcik7XG4gICAgICAgIHMuZm9ybWF0dGVyLmluaXQocywgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uZm9ybWF0ID0gcy5mb3JtYXR0ZXIuZm9ybWF0LmJpbmQocy5mb3JtYXR0ZXIpO1xuICAgICAgfVxuICAgICAgcy5pbnRlcnBvbGF0b3IgPSBuZXcgSW50ZXJwb2xhdG9yKHRoaXMub3B0aW9ucyk7XG4gICAgICBzLnV0aWxzID0ge1xuICAgICAgICBoYXNMb2FkZWROYW1lc3BhY2U6IHRoaXMuaGFzTG9hZGVkTmFtZXNwYWNlLmJpbmQodGhpcylcbiAgICAgIH07XG4gICAgICBzLmJhY2tlbmRDb25uZWN0b3IgPSBuZXcgQ29ubmVjdG9yKGNyZWF0ZUNsYXNzT25EZW1hbmQodGhpcy5tb2R1bGVzLmJhY2tlbmQpLCBzLnJlc291cmNlU3RvcmUsIHMsIHRoaXMub3B0aW9ucyk7XG4gICAgICBzLmJhY2tlbmRDb25uZWN0b3Iub24oJyonLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLmVtaXQoZXZlbnQsIC4uLmFyZ3MpO1xuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5tb2R1bGVzLmxhbmd1YWdlRGV0ZWN0b3IpIHtcbiAgICAgICAgcy5sYW5ndWFnZURldGVjdG9yID0gY3JlYXRlQ2xhc3NPbkRlbWFuZCh0aGlzLm1vZHVsZXMubGFuZ3VhZ2VEZXRlY3Rvcik7XG4gICAgICAgIGlmIChzLmxhbmd1YWdlRGV0ZWN0b3IuaW5pdCkgcy5sYW5ndWFnZURldGVjdG9yLmluaXQocywgdGhpcy5vcHRpb25zLmRldGVjdGlvbiwgdGhpcy5vcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm1vZHVsZXMuaTE4bkZvcm1hdCkge1xuICAgICAgICBzLmkxOG5Gb3JtYXQgPSBjcmVhdGVDbGFzc09uRGVtYW5kKHRoaXMubW9kdWxlcy5pMThuRm9ybWF0KTtcbiAgICAgICAgaWYgKHMuaTE4bkZvcm1hdC5pbml0KSBzLmkxOG5Gb3JtYXQuaW5pdCh0aGlzKTtcbiAgICAgIH1cbiAgICAgIHRoaXMudHJhbnNsYXRvciA9IG5ldyBUcmFuc2xhdG9yKHRoaXMuc2VydmljZXMsIHRoaXMub3B0aW9ucyk7XG4gICAgICB0aGlzLnRyYW5zbGF0b3Iub24oJyonLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgICBhcmdzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLmVtaXQoZXZlbnQsIC4uLmFyZ3MpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLm1vZHVsZXMuZXh0ZXJuYWwuZm9yRWFjaChtID0+IHtcbiAgICAgICAgaWYgKG0uaW5pdCkgbS5pbml0KHRoaXMpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuZm9ybWF0ID0gdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uZm9ybWF0O1xuICAgIGlmICghY2FsbGJhY2spIGNhbGxiYWNrID0gbm9vcDtcbiAgICBpZiAodGhpcy5vcHRpb25zLmZhbGxiYWNrTG5nICYmICF0aGlzLnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IgJiYgIXRoaXMub3B0aW9ucy5sbmcpIHtcbiAgICAgIGNvbnN0IGNvZGVzID0gdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZVV0aWxzLmdldEZhbGxiYWNrQ29kZXModGhpcy5vcHRpb25zLmZhbGxiYWNrTG5nKTtcbiAgICAgIGlmIChjb2Rlcy5sZW5ndGggPiAwICYmIGNvZGVzWzBdICE9PSAnZGV2JykgdGhpcy5vcHRpb25zLmxuZyA9IGNvZGVzWzBdO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3RvciAmJiAhdGhpcy5vcHRpb25zLmxuZykge1xuICAgICAgdGhpcy5sb2dnZXIud2FybignaW5pdDogbm8gbGFuZ3VhZ2VEZXRlY3RvciBpcyB1c2VkIGFuZCBubyBsbmcgaXMgZGVmaW5lZCcpO1xuICAgIH1cbiAgICBjb25zdCBzdG9yZUFwaSA9IFsnZ2V0UmVzb3VyY2UnLCAnaGFzUmVzb3VyY2VCdW5kbGUnLCAnZ2V0UmVzb3VyY2VCdW5kbGUnLCAnZ2V0RGF0YUJ5TGFuZ3VhZ2UnXTtcbiAgICBzdG9yZUFwaS5mb3JFYWNoKGZjTmFtZSA9PiB7XG4gICAgICB0aGlzW2ZjTmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5zdG9yZVtmY05hbWVdKC4uLmFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIGNvbnN0IHN0b3JlQXBpQ2hhaW5lZCA9IFsnYWRkUmVzb3VyY2UnLCAnYWRkUmVzb3VyY2VzJywgJ2FkZFJlc291cmNlQnVuZGxlJywgJ3JlbW92ZVJlc291cmNlQnVuZGxlJ107XG4gICAgc3RvcmVBcGlDaGFpbmVkLmZvckVhY2goZmNOYW1lID0+IHtcbiAgICAgIHRoaXNbZmNOYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuc3RvcmVbZmNOYW1lXSguLi5hcmd1bWVudHMpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIGNvbnN0IGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICBjb25zdCBsb2FkID0gKCkgPT4ge1xuICAgICAgY29uc3QgZmluaXNoID0gKGVyciwgdCkgPT4ge1xuICAgICAgICB0aGlzLmlzSW5pdGlhbGl6aW5nID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmlzSW5pdGlhbGl6ZWQgJiYgIXRoaXMuaW5pdGlhbGl6ZWRTdG9yZU9uY2UpIHRoaXMubG9nZ2VyLndhcm4oJ2luaXQ6IGkxOG5leHQgaXMgYWxyZWFkeSBpbml0aWFsaXplZC4gWW91IHNob3VsZCBjYWxsIGluaXQganVzdCBvbmNlIScpO1xuICAgICAgICB0aGlzLmlzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5pc0Nsb25lKSB0aGlzLmxvZ2dlci5sb2coJ2luaXRpYWxpemVkJywgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgdGhpcy5lbWl0KCdpbml0aWFsaXplZCcsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUodCk7XG4gICAgICAgIGNhbGxiYWNrKGVyciwgdCk7XG4gICAgICB9O1xuICAgICAgaWYgKHRoaXMubGFuZ3VhZ2VzICYmIHRoaXMub3B0aW9ucy5jb21wYXRpYmlsaXR5QVBJICE9PSAndjEnICYmICF0aGlzLmlzSW5pdGlhbGl6ZWQpIHJldHVybiBmaW5pc2gobnVsbCwgdGhpcy50LmJpbmQodGhpcykpO1xuICAgICAgdGhpcy5jaGFuZ2VMYW5ndWFnZSh0aGlzLm9wdGlvbnMubG5nLCBmaW5pc2gpO1xuICAgIH07XG4gICAgaWYgKHRoaXMub3B0aW9ucy5yZXNvdXJjZXMgfHwgIXRoaXMub3B0aW9ucy5pbml0SW1tZWRpYXRlKSB7XG4gICAgICBsb2FkKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFRpbWVvdXQobG9hZCwgMCk7XG4gICAgfVxuICAgIHJldHVybiBkZWZlcnJlZDtcbiAgfVxuICBsb2FkUmVzb3VyY2VzKGxhbmd1YWdlKSB7XG4gICAgbGV0IGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBub29wO1xuICAgIGxldCB1c2VkQ2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICBjb25zdCB1c2VkTG5nID0gdHlwZW9mIGxhbmd1YWdlID09PSAnc3RyaW5nJyA/IGxhbmd1YWdlIDogdGhpcy5sYW5ndWFnZTtcbiAgICBpZiAodHlwZW9mIGxhbmd1YWdlID09PSAnZnVuY3Rpb24nKSB1c2VkQ2FsbGJhY2sgPSBsYW5ndWFnZTtcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5yZXNvdXJjZXMgfHwgdGhpcy5vcHRpb25zLnBhcnRpYWxCdW5kbGVkTGFuZ3VhZ2VzKSB7XG4gICAgICBpZiAodXNlZExuZyAmJiB1c2VkTG5nLnRvTG93ZXJDYXNlKCkgPT09ICdjaW1vZGUnICYmICghdGhpcy5vcHRpb25zLnByZWxvYWQgfHwgdGhpcy5vcHRpb25zLnByZWxvYWQubGVuZ3RoID09PSAwKSkgcmV0dXJuIHVzZWRDYWxsYmFjaygpO1xuICAgICAgY29uc3QgdG9Mb2FkID0gW107XG4gICAgICBjb25zdCBhcHBlbmQgPSBsbmcgPT4ge1xuICAgICAgICBpZiAoIWxuZykgcmV0dXJuO1xuICAgICAgICBpZiAobG5nID09PSAnY2ltb2RlJykgcmV0dXJuO1xuICAgICAgICBjb25zdCBsbmdzID0gdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZVV0aWxzLnRvUmVzb2x2ZUhpZXJhcmNoeShsbmcpO1xuICAgICAgICBsbmdzLmZvckVhY2gobCA9PiB7XG4gICAgICAgICAgaWYgKGwgPT09ICdjaW1vZGUnKSByZXR1cm47XG4gICAgICAgICAgaWYgKHRvTG9hZC5pbmRleE9mKGwpIDwgMCkgdG9Mb2FkLnB1c2gobCk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICAgIGlmICghdXNlZExuZykge1xuICAgICAgICBjb25zdCBmYWxsYmFja3MgPSB0aGlzLnNlcnZpY2VzLmxhbmd1YWdlVXRpbHMuZ2V0RmFsbGJhY2tDb2Rlcyh0aGlzLm9wdGlvbnMuZmFsbGJhY2tMbmcpO1xuICAgICAgICBmYWxsYmFja3MuZm9yRWFjaChsID0+IGFwcGVuZChsKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcHBlbmQodXNlZExuZyk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnByZWxvYWQpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLnByZWxvYWQuZm9yRWFjaChsID0+IGFwcGVuZChsKSk7XG4gICAgICB9XG4gICAgICB0aGlzLnNlcnZpY2VzLmJhY2tlbmRDb25uZWN0b3IubG9hZCh0b0xvYWQsIHRoaXMub3B0aW9ucy5ucywgZSA9PiB7XG4gICAgICAgIGlmICghZSAmJiAhdGhpcy5yZXNvbHZlZExhbmd1YWdlICYmIHRoaXMubGFuZ3VhZ2UpIHRoaXMuc2V0UmVzb2x2ZWRMYW5ndWFnZSh0aGlzLmxhbmd1YWdlKTtcbiAgICAgICAgdXNlZENhbGxiYWNrKGUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVzZWRDYWxsYmFjayhudWxsKTtcbiAgICB9XG4gIH1cbiAgcmVsb2FkUmVzb3VyY2VzKGxuZ3MsIG5zLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICBpZiAodHlwZW9mIGxuZ3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNhbGxiYWNrID0gbG5ncztcbiAgICAgIGxuZ3MgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNhbGxiYWNrID0gbnM7XG4gICAgICBucyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKCFsbmdzKSBsbmdzID0gdGhpcy5sYW5ndWFnZXM7XG4gICAgaWYgKCFucykgbnMgPSB0aGlzLm9wdGlvbnMubnM7XG4gICAgaWYgKCFjYWxsYmFjaykgY2FsbGJhY2sgPSBub29wO1xuICAgIHRoaXMuc2VydmljZXMuYmFja2VuZENvbm5lY3Rvci5yZWxvYWQobG5ncywgbnMsIGVyciA9PiB7XG4gICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICBjYWxsYmFjayhlcnIpO1xuICAgIH0pO1xuICAgIHJldHVybiBkZWZlcnJlZDtcbiAgfVxuICB1c2UobW9kdWxlKSB7XG4gICAgaWYgKCFtb2R1bGUpIHRocm93IG5ldyBFcnJvcignWW91IGFyZSBwYXNzaW5nIGFuIHVuZGVmaW5lZCBtb2R1bGUhIFBsZWFzZSBjaGVjayB0aGUgb2JqZWN0IHlvdSBhcmUgcGFzc2luZyB0byBpMThuZXh0LnVzZSgpJyk7XG4gICAgaWYgKCFtb2R1bGUudHlwZSkgdGhyb3cgbmV3IEVycm9yKCdZb3UgYXJlIHBhc3NpbmcgYSB3cm9uZyBtb2R1bGUhIFBsZWFzZSBjaGVjayB0aGUgb2JqZWN0IHlvdSBhcmUgcGFzc2luZyB0byBpMThuZXh0LnVzZSgpJyk7XG4gICAgaWYgKG1vZHVsZS50eXBlID09PSAnYmFja2VuZCcpIHtcbiAgICAgIHRoaXMubW9kdWxlcy5iYWNrZW5kID0gbW9kdWxlO1xuICAgIH1cbiAgICBpZiAobW9kdWxlLnR5cGUgPT09ICdsb2dnZXInIHx8IG1vZHVsZS5sb2cgJiYgbW9kdWxlLndhcm4gJiYgbW9kdWxlLmVycm9yKSB7XG4gICAgICB0aGlzLm1vZHVsZXMubG9nZ2VyID0gbW9kdWxlO1xuICAgIH1cbiAgICBpZiAobW9kdWxlLnR5cGUgPT09ICdsYW5ndWFnZURldGVjdG9yJykge1xuICAgICAgdGhpcy5tb2R1bGVzLmxhbmd1YWdlRGV0ZWN0b3IgPSBtb2R1bGU7XG4gICAgfVxuICAgIGlmIChtb2R1bGUudHlwZSA9PT0gJ2kxOG5Gb3JtYXQnKSB7XG4gICAgICB0aGlzLm1vZHVsZXMuaTE4bkZvcm1hdCA9IG1vZHVsZTtcbiAgICB9XG4gICAgaWYgKG1vZHVsZS50eXBlID09PSAncG9zdFByb2Nlc3NvcicpIHtcbiAgICAgIHBvc3RQcm9jZXNzb3IuYWRkUG9zdFByb2Nlc3Nvcihtb2R1bGUpO1xuICAgIH1cbiAgICBpZiAobW9kdWxlLnR5cGUgPT09ICdmb3JtYXR0ZXInKSB7XG4gICAgICB0aGlzLm1vZHVsZXMuZm9ybWF0dGVyID0gbW9kdWxlO1xuICAgIH1cbiAgICBpZiAobW9kdWxlLnR5cGUgPT09ICczcmRQYXJ0eScpIHtcbiAgICAgIHRoaXMubW9kdWxlcy5leHRlcm5hbC5wdXNoKG1vZHVsZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHNldFJlc29sdmVkTGFuZ3VhZ2UobCkge1xuICAgIGlmICghbCB8fCAhdGhpcy5sYW5ndWFnZXMpIHJldHVybjtcbiAgICBpZiAoWydjaW1vZGUnLCAnZGV2J10uaW5kZXhPZihsKSA+IC0xKSByZXR1cm47XG4gICAgZm9yIChsZXQgbGkgPSAwOyBsaSA8IHRoaXMubGFuZ3VhZ2VzLmxlbmd0aDsgbGkrKykge1xuICAgICAgY29uc3QgbG5nSW5MbmdzID0gdGhpcy5sYW5ndWFnZXNbbGldO1xuICAgICAgaWYgKFsnY2ltb2RlJywgJ2RldiddLmluZGV4T2YobG5nSW5MbmdzKSA+IC0xKSBjb250aW51ZTtcbiAgICAgIGlmICh0aGlzLnN0b3JlLmhhc0xhbmd1YWdlU29tZVRyYW5zbGF0aW9ucyhsbmdJbkxuZ3MpKSB7XG4gICAgICAgIHRoaXMucmVzb2x2ZWRMYW5ndWFnZSA9IGxuZ0luTG5ncztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNoYW5nZUxhbmd1YWdlKGxuZywgY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcbiAgICB0aGlzLmlzTGFuZ3VhZ2VDaGFuZ2luZ1RvID0gbG5nO1xuICAgIGNvbnN0IGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICB0aGlzLmVtaXQoJ2xhbmd1YWdlQ2hhbmdpbmcnLCBsbmcpO1xuICAgIGNvbnN0IHNldExuZ1Byb3BzID0gbCA9PiB7XG4gICAgICB0aGlzLmxhbmd1YWdlID0gbDtcbiAgICAgIHRoaXMubGFuZ3VhZ2VzID0gdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZVV0aWxzLnRvUmVzb2x2ZUhpZXJhcmNoeShsKTtcbiAgICAgIHRoaXMucmVzb2x2ZWRMYW5ndWFnZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuc2V0UmVzb2x2ZWRMYW5ndWFnZShsKTtcbiAgICB9O1xuICAgIGNvbnN0IGRvbmUgPSAoZXJyLCBsKSA9PiB7XG4gICAgICBpZiAobCkge1xuICAgICAgICBzZXRMbmdQcm9wcyhsKTtcbiAgICAgICAgdGhpcy50cmFuc2xhdG9yLmNoYW5nZUxhbmd1YWdlKGwpO1xuICAgICAgICB0aGlzLmlzTGFuZ3VhZ2VDaGFuZ2luZ1RvID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmVtaXQoJ2xhbmd1YWdlQ2hhbmdlZCcsIGwpO1xuICAgICAgICB0aGlzLmxvZ2dlci5sb2coJ2xhbmd1YWdlQ2hhbmdlZCcsIGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pc0xhbmd1YWdlQ2hhbmdpbmdUbyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGRlZmVycmVkLnJlc29sdmUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMyLnQoLi4uYXJndW1lbnRzKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhlcnIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi50KC4uLmFyZ3VtZW50cyk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IHNldExuZyA9IGxuZ3MgPT4ge1xuICAgICAgaWYgKCFsbmcgJiYgIWxuZ3MgJiYgdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yKSBsbmdzID0gW107XG4gICAgICBjb25zdCBsID0gdHlwZW9mIGxuZ3MgPT09ICdzdHJpbmcnID8gbG5ncyA6IHRoaXMuc2VydmljZXMubGFuZ3VhZ2VVdGlscy5nZXRCZXN0TWF0Y2hGcm9tQ29kZXMobG5ncyk7XG4gICAgICBpZiAobCkge1xuICAgICAgICBpZiAoIXRoaXMubGFuZ3VhZ2UpIHtcbiAgICAgICAgICBzZXRMbmdQcm9wcyhsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMudHJhbnNsYXRvci5sYW5ndWFnZSkgdGhpcy50cmFuc2xhdG9yLmNoYW5nZUxhbmd1YWdlKGwpO1xuICAgICAgICBpZiAodGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yICYmIHRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3Rvci5jYWNoZVVzZXJMYW5ndWFnZSkgdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yLmNhY2hlVXNlckxhbmd1YWdlKGwpO1xuICAgICAgfVxuICAgICAgdGhpcy5sb2FkUmVzb3VyY2VzKGwsIGVyciA9PiB7XG4gICAgICAgIGRvbmUoZXJyLCBsKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKCFsbmcgJiYgdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yICYmICF0aGlzLnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IuYXN5bmMpIHtcbiAgICAgIHNldExuZyh0aGlzLnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IuZGV0ZWN0KCkpO1xuICAgIH0gZWxzZSBpZiAoIWxuZyAmJiB0aGlzLnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IgJiYgdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yLmFzeW5jKSB7XG4gICAgICBpZiAodGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yLmRldGVjdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yLmRldGVjdCgpLnRoZW4oc2V0TG5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3Rvci5kZXRlY3Qoc2V0TG5nKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2V0TG5nKGxuZyk7XG4gICAgfVxuICAgIHJldHVybiBkZWZlcnJlZDtcbiAgfVxuICBnZXRGaXhlZFQobG5nLCBucywga2V5UHJlZml4KSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG4gICAgY29uc3QgZml4ZWRUID0gZnVuY3Rpb24gKGtleSwgb3B0cykge1xuICAgICAgbGV0IG9wdGlvbnM7XG4gICAgICBpZiAodHlwZW9mIG9wdHMgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdCA9IG5ldyBBcnJheShfbGVuMyA+IDIgPyBfbGVuMyAtIDIgOiAwKSwgX2tleTMgPSAyOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICAgICAgcmVzdFtfa2V5MyAtIDJdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zID0gX3RoaXMzLm9wdGlvbnMub3ZlcmxvYWRUcmFuc2xhdGlvbk9wdGlvbkhhbmRsZXIoW2tleSwgb3B0c10uY29uY2F0KHJlc3QpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgLi4ub3B0c1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgb3B0aW9ucy5sbmcgPSBvcHRpb25zLmxuZyB8fCBmaXhlZFQubG5nO1xuICAgICAgb3B0aW9ucy5sbmdzID0gb3B0aW9ucy5sbmdzIHx8IGZpeGVkVC5sbmdzO1xuICAgICAgb3B0aW9ucy5ucyA9IG9wdGlvbnMubnMgfHwgZml4ZWRULm5zO1xuICAgICAgaWYgKG9wdGlvbnMua2V5UHJlZml4ICE9PSAnJykgb3B0aW9ucy5rZXlQcmVmaXggPSBvcHRpb25zLmtleVByZWZpeCB8fCBrZXlQcmVmaXggfHwgZml4ZWRULmtleVByZWZpeDtcbiAgICAgIGNvbnN0IGtleVNlcGFyYXRvciA9IF90aGlzMy5vcHRpb25zLmtleVNlcGFyYXRvciB8fCAnLic7XG4gICAgICBsZXQgcmVzdWx0S2V5O1xuICAgICAgaWYgKG9wdGlvbnMua2V5UHJlZml4ICYmIEFycmF5LmlzQXJyYXkoa2V5KSkge1xuICAgICAgICByZXN1bHRLZXkgPSBrZXkubWFwKGsgPT4gYCR7b3B0aW9ucy5rZXlQcmVmaXh9JHtrZXlTZXBhcmF0b3J9JHtrfWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0S2V5ID0gb3B0aW9ucy5rZXlQcmVmaXggPyBgJHtvcHRpb25zLmtleVByZWZpeH0ke2tleVNlcGFyYXRvcn0ke2tleX1gIDoga2V5O1xuICAgICAgfVxuICAgICAgcmV0dXJuIF90aGlzMy50KHJlc3VsdEtleSwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICBpZiAodHlwZW9mIGxuZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGZpeGVkVC5sbmcgPSBsbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZpeGVkVC5sbmdzID0gbG5nO1xuICAgIH1cbiAgICBmaXhlZFQubnMgPSBucztcbiAgICBmaXhlZFQua2V5UHJlZml4ID0ga2V5UHJlZml4O1xuICAgIHJldHVybiBmaXhlZFQ7XG4gIH1cbiAgdCgpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2xhdG9yICYmIHRoaXMudHJhbnNsYXRvci50cmFuc2xhdGUoLi4uYXJndW1lbnRzKTtcbiAgfVxuICBleGlzdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNsYXRvciAmJiB0aGlzLnRyYW5zbGF0b3IuZXhpc3RzKC4uLmFyZ3VtZW50cyk7XG4gIH1cbiAgc2V0RGVmYXVsdE5hbWVzcGFjZShucykge1xuICAgIHRoaXMub3B0aW9ucy5kZWZhdWx0TlMgPSBucztcbiAgfVxuICBoYXNMb2FkZWROYW1lc3BhY2UobnMpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgaWYgKCF0aGlzLmlzSW5pdGlhbGl6ZWQpIHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4oJ2hhc0xvYWRlZE5hbWVzcGFjZTogaTE4bmV4dCB3YXMgbm90IGluaXRpYWxpemVkJywgdGhpcy5sYW5ndWFnZXMpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIXRoaXMubGFuZ3VhZ2VzIHx8ICF0aGlzLmxhbmd1YWdlcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4oJ2hhc0xvYWRlZE5hbWVzcGFjZTogaTE4bi5sYW5ndWFnZXMgd2VyZSB1bmRlZmluZWQgb3IgZW1wdHknLCB0aGlzLmxhbmd1YWdlcyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGxuZyA9IG9wdGlvbnMubG5nIHx8IHRoaXMucmVzb2x2ZWRMYW5ndWFnZSB8fCB0aGlzLmxhbmd1YWdlc1swXTtcbiAgICBjb25zdCBmYWxsYmFja0xuZyA9IHRoaXMub3B0aW9ucyA/IHRoaXMub3B0aW9ucy5mYWxsYmFja0xuZyA6IGZhbHNlO1xuICAgIGNvbnN0IGxhc3RMbmcgPSB0aGlzLmxhbmd1YWdlc1t0aGlzLmxhbmd1YWdlcy5sZW5ndGggLSAxXTtcbiAgICBpZiAobG5nLnRvTG93ZXJDYXNlKCkgPT09ICdjaW1vZGUnKSByZXR1cm4gdHJ1ZTtcbiAgICBjb25zdCBsb2FkTm90UGVuZGluZyA9IChsLCBuKSA9PiB7XG4gICAgICBjb25zdCBsb2FkU3RhdGUgPSB0aGlzLnNlcnZpY2VzLmJhY2tlbmRDb25uZWN0b3Iuc3RhdGVbYCR7bH18JHtufWBdO1xuICAgICAgcmV0dXJuIGxvYWRTdGF0ZSA9PT0gLTEgfHwgbG9hZFN0YXRlID09PSAwIHx8IGxvYWRTdGF0ZSA9PT0gMjtcbiAgICB9O1xuICAgIGlmIChvcHRpb25zLnByZWNoZWNrKSB7XG4gICAgICBjb25zdCBwcmVSZXN1bHQgPSBvcHRpb25zLnByZWNoZWNrKHRoaXMsIGxvYWROb3RQZW5kaW5nKTtcbiAgICAgIGlmIChwcmVSZXN1bHQgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHByZVJlc3VsdDtcbiAgICB9XG4gICAgaWYgKHRoaXMuaGFzUmVzb3VyY2VCdW5kbGUobG5nLCBucykpIHJldHVybiB0cnVlO1xuICAgIGlmICghdGhpcy5zZXJ2aWNlcy5iYWNrZW5kQ29ubmVjdG9yLmJhY2tlbmQgfHwgdGhpcy5vcHRpb25zLnJlc291cmNlcyAmJiAhdGhpcy5vcHRpb25zLnBhcnRpYWxCdW5kbGVkTGFuZ3VhZ2VzKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAobG9hZE5vdFBlbmRpbmcobG5nLCBucykgJiYgKCFmYWxsYmFja0xuZyB8fCBsb2FkTm90UGVuZGluZyhsYXN0TG5nLCBucykpKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbG9hZE5hbWVzcGFjZXMobnMsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgIGlmICghdGhpcy5vcHRpb25zLm5zKSB7XG4gICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbnMgPT09ICdzdHJpbmcnKSBucyA9IFtuc107XG4gICAgbnMuZm9yRWFjaChuID0+IHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubnMuaW5kZXhPZihuKSA8IDApIHRoaXMub3B0aW9ucy5ucy5wdXNoKG4pO1xuICAgIH0pO1xuICAgIHRoaXMubG9hZFJlc291cmNlcyhlcnIgPT4ge1xuICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhlcnIpO1xuICAgIH0pO1xuICAgIHJldHVybiBkZWZlcnJlZDtcbiAgfVxuICBsb2FkTGFuZ3VhZ2VzKGxuZ3MsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgIGlmICh0eXBlb2YgbG5ncyA9PT0gJ3N0cmluZycpIGxuZ3MgPSBbbG5nc107XG4gICAgY29uc3QgcHJlbG9hZGVkID0gdGhpcy5vcHRpb25zLnByZWxvYWQgfHwgW107XG4gICAgY29uc3QgbmV3TG5ncyA9IGxuZ3MuZmlsdGVyKGxuZyA9PiBwcmVsb2FkZWQuaW5kZXhPZihsbmcpIDwgMCAmJiB0aGlzLnNlcnZpY2VzLmxhbmd1YWdlVXRpbHMuaXNTdXBwb3J0ZWRDb2RlKGxuZykpO1xuICAgIGlmICghbmV3TG5ncy5sZW5ndGgpIHtcbiAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgdGhpcy5vcHRpb25zLnByZWxvYWQgPSBwcmVsb2FkZWQuY29uY2F0KG5ld0xuZ3MpO1xuICAgIHRoaXMubG9hZFJlc291cmNlcyhlcnIgPT4ge1xuICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhlcnIpO1xuICAgIH0pO1xuICAgIHJldHVybiBkZWZlcnJlZDtcbiAgfVxuICBkaXIobG5nKSB7XG4gICAgaWYgKCFsbmcpIGxuZyA9IHRoaXMucmVzb2x2ZWRMYW5ndWFnZSB8fCAodGhpcy5sYW5ndWFnZXMgJiYgdGhpcy5sYW5ndWFnZXMubGVuZ3RoID4gMCA/IHRoaXMubGFuZ3VhZ2VzWzBdIDogdGhpcy5sYW5ndWFnZSk7XG4gICAgaWYgKCFsbmcpIHJldHVybiAncnRsJztcbiAgICBjb25zdCBydGxMbmdzID0gWydhcicsICdzaHUnLCAnc3FyJywgJ3NzaCcsICd4YWEnLCAneWhkJywgJ3l1ZCcsICdhYW8nLCAnYWJoJywgJ2FidicsICdhY20nLCAnYWNxJywgJ2FjdycsICdhY3gnLCAnYWN5JywgJ2FkZicsICdhZHMnLCAnYWViJywgJ2FlYycsICdhZmInLCAnYWpwJywgJ2FwYycsICdhcGQnLCAnYXJiJywgJ2FycScsICdhcnMnLCAnYXJ5JywgJ2FyeicsICdhdXonLCAnYXZsJywgJ2F5aCcsICdheWwnLCAnYXluJywgJ2F5cCcsICdiYnonLCAncGdhJywgJ2hlJywgJ2l3JywgJ3BzJywgJ3BidCcsICdwYnUnLCAncHN0JywgJ3BycCcsICdwcmQnLCAndWcnLCAndXInLCAneWRkJywgJ3lkcycsICd5aWgnLCAnamknLCAneWknLCAnaGJvJywgJ21lbicsICd4bW4nLCAnZmEnLCAnanByJywgJ3BlbycsICdwZXMnLCAncHJzJywgJ2R2JywgJ3NhbScsICdja2InXTtcbiAgICBjb25zdCBsYW5ndWFnZVV0aWxzID0gdGhpcy5zZXJ2aWNlcyAmJiB0aGlzLnNlcnZpY2VzLmxhbmd1YWdlVXRpbHMgfHwgbmV3IExhbmd1YWdlVXRpbChnZXQoKSk7XG4gICAgcmV0dXJuIHJ0bExuZ3MuaW5kZXhPZihsYW5ndWFnZVV0aWxzLmdldExhbmd1YWdlUGFydEZyb21Db2RlKGxuZykpID4gLTEgfHwgbG5nLnRvTG93ZXJDYXNlKCkuaW5kZXhPZignLWFyYWInKSA+IDEgPyAncnRsJyA6ICdsdHInO1xuICB9XG4gIHN0YXRpYyBjcmVhdGVJbnN0YW5jZSgpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgbGV0IGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIG5ldyBJMThuKG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfVxuICBjbG9uZUluc3RhbmNlKCkge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICBsZXQgY2FsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG5vb3A7XG4gICAgY29uc3QgZm9ya1Jlc291cmNlU3RvcmUgPSBvcHRpb25zLmZvcmtSZXNvdXJjZVN0b3JlO1xuICAgIGlmIChmb3JrUmVzb3VyY2VTdG9yZSkgZGVsZXRlIG9wdGlvbnMuZm9ya1Jlc291cmNlU3RvcmU7XG4gICAgY29uc3QgbWVyZ2VkT3B0aW9ucyA9IHtcbiAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAuLi57XG4gICAgICAgIGlzQ2xvbmU6IHRydWVcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGNsb25lID0gbmV3IEkxOG4obWVyZ2VkT3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMuZGVidWcgIT09IHVuZGVmaW5lZCB8fCBvcHRpb25zLnByZWZpeCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjbG9uZS5sb2dnZXIgPSBjbG9uZS5sb2dnZXIuY2xvbmUob3B0aW9ucyk7XG4gICAgfVxuICAgIGNvbnN0IG1lbWJlcnNUb0NvcHkgPSBbJ3N0b3JlJywgJ3NlcnZpY2VzJywgJ2xhbmd1YWdlJ107XG4gICAgbWVtYmVyc1RvQ29weS5mb3JFYWNoKG0gPT4ge1xuICAgICAgY2xvbmVbbV0gPSB0aGlzW21dO1xuICAgIH0pO1xuICAgIGNsb25lLnNlcnZpY2VzID0ge1xuICAgICAgLi4udGhpcy5zZXJ2aWNlc1xuICAgIH07XG4gICAgY2xvbmUuc2VydmljZXMudXRpbHMgPSB7XG4gICAgICBoYXNMb2FkZWROYW1lc3BhY2U6IGNsb25lLmhhc0xvYWRlZE5hbWVzcGFjZS5iaW5kKGNsb25lKVxuICAgIH07XG4gICAgaWYgKGZvcmtSZXNvdXJjZVN0b3JlKSB7XG4gICAgICBjbG9uZS5zdG9yZSA9IG5ldyBSZXNvdXJjZVN0b3JlKHRoaXMuc3RvcmUuZGF0YSwgbWVyZ2VkT3B0aW9ucyk7XG4gICAgICBjbG9uZS5zZXJ2aWNlcy5yZXNvdXJjZVN0b3JlID0gY2xvbmUuc3RvcmU7XG4gICAgfVxuICAgIGNsb25lLnRyYW5zbGF0b3IgPSBuZXcgVHJhbnNsYXRvcihjbG9uZS5zZXJ2aWNlcywgbWVyZ2VkT3B0aW9ucyk7XG4gICAgY2xvbmUudHJhbnNsYXRvci5vbignKicsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40ID4gMSA/IF9sZW40IC0gMSA6IDApLCBfa2V5NCA9IDE7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICAgICAgYXJnc1tfa2V5NCAtIDFdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgICAgIH1cbiAgICAgIGNsb25lLmVtaXQoZXZlbnQsIC4uLmFyZ3MpO1xuICAgIH0pO1xuICAgIGNsb25lLmluaXQobWVyZ2VkT3B0aW9ucywgY2FsbGJhY2spO1xuICAgIGNsb25lLnRyYW5zbGF0b3Iub3B0aW9ucyA9IG1lcmdlZE9wdGlvbnM7XG4gICAgY2xvbmUudHJhbnNsYXRvci5iYWNrZW5kQ29ubmVjdG9yLnNlcnZpY2VzLnV0aWxzID0ge1xuICAgICAgaGFzTG9hZGVkTmFtZXNwYWNlOiBjbG9uZS5oYXNMb2FkZWROYW1lc3BhY2UuYmluZChjbG9uZSlcbiAgICB9O1xuICAgIHJldHVybiBjbG9uZTtcbiAgfVxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9wdGlvbnM6IHRoaXMub3B0aW9ucyxcbiAgICAgIHN0b3JlOiB0aGlzLnN0b3JlLFxuICAgICAgbGFuZ3VhZ2U6IHRoaXMubGFuZ3VhZ2UsXG4gICAgICBsYW5ndWFnZXM6IHRoaXMubGFuZ3VhZ2VzLFxuICAgICAgcmVzb2x2ZWRMYW5ndWFnZTogdGhpcy5yZXNvbHZlZExhbmd1YWdlXG4gICAgfTtcbiAgfVxufVxuY29uc3QgaW5zdGFuY2UgPSBJMThuLmNyZWF0ZUluc3RhbmNlKCk7XG5pbnN0YW5jZS5jcmVhdGVJbnN0YW5jZSA9IEkxOG4uY3JlYXRlSW5zdGFuY2U7XG5cbmNvbnN0IGNyZWF0ZUluc3RhbmNlID0gaW5zdGFuY2UuY3JlYXRlSW5zdGFuY2U7XG5jb25zdCBkaXIgPSBpbnN0YW5jZS5kaXI7XG5jb25zdCBpbml0ID0gaW5zdGFuY2UuaW5pdDtcbmNvbnN0IGxvYWRSZXNvdXJjZXMgPSBpbnN0YW5jZS5sb2FkUmVzb3VyY2VzO1xuY29uc3QgcmVsb2FkUmVzb3VyY2VzID0gaW5zdGFuY2UucmVsb2FkUmVzb3VyY2VzO1xuY29uc3QgdXNlID0gaW5zdGFuY2UudXNlO1xuY29uc3QgY2hhbmdlTGFuZ3VhZ2UgPSBpbnN0YW5jZS5jaGFuZ2VMYW5ndWFnZTtcbmNvbnN0IGdldEZpeGVkVCA9IGluc3RhbmNlLmdldEZpeGVkVDtcbmNvbnN0IHQgPSBpbnN0YW5jZS50O1xuY29uc3QgZXhpc3RzID0gaW5zdGFuY2UuZXhpc3RzO1xuY29uc3Qgc2V0RGVmYXVsdE5hbWVzcGFjZSA9IGluc3RhbmNlLnNldERlZmF1bHROYW1lc3BhY2U7XG5jb25zdCBoYXNMb2FkZWROYW1lc3BhY2UgPSBpbnN0YW5jZS5oYXNMb2FkZWROYW1lc3BhY2U7XG5jb25zdCBsb2FkTmFtZXNwYWNlcyA9IGluc3RhbmNlLmxvYWROYW1lc3BhY2VzO1xuY29uc3QgbG9hZExhbmd1YWdlcyA9IGluc3RhbmNlLmxvYWRMYW5ndWFnZXM7XG5cbmV4cG9ydCB7IGNoYW5nZUxhbmd1YWdlLCBjcmVhdGVJbnN0YW5jZSwgaW5zdGFuY2UgYXMgZGVmYXVsdCwgZGlyLCBleGlzdHMsIGdldEZpeGVkVCwgaGFzTG9hZGVkTmFtZXNwYWNlLCBpbml0LCBsb2FkTGFuZ3VhZ2VzLCBsb2FkTmFtZXNwYWNlcywgbG9hZFJlc291cmNlcywgcmVsb2FkUmVzb3VyY2VzLCBzZXREZWZhdWx0TmFtZXNwYWNlLCB0LCB1c2UgfTtcbiIsICIvLyBzcmMvdWkvY2FyZENvbnRhaW5lci9jYXJkQ29udGFpbmVyLnRzXG5cbmltcG9ydCB7IFdvcmtzcGFjZUxlYWYsIFRGaWxlLCBURm9sZGVyIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgQ2FyZE5hdmlnYXRvclBsdWdpbiBmcm9tICdtYWluJztcbmltcG9ydCB7IENhcmRNYWtlciB9IGZyb20gJy4vY2FyZE1ha2VyJ1xuaW1wb3J0IHsgc29ydEZpbGVzIH0gZnJvbSAnLi4vLi4vY29tbW9uL3V0aWxzJztcbmltcG9ydCB7IENhcmQsIFNvcnRDcml0ZXJpb24gfSBmcm9tICcuLi8uLi9jb21tb24vdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgQ2FyZENvbnRhaW5lciB7XG4gICAgcHJpdmF0ZSBsZWFmOiBXb3Jrc3BhY2VMZWFmO1xuICAgIHByaXZhdGUgY29udGFpbmVyRWw6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGw7XG4gICAgcHJpdmF0ZSBjYXJkTWFrZXI6IENhcmRNYWtlcjtcbiAgICBwcml2YXRlIHBsdWdpbjogQ2FyZE5hdmlnYXRvclBsdWdpbjtcbiAgICBwdWJsaWMgaXNWZXJ0aWNhbDogYm9vbGVhbjtcbiAgICBwcml2YXRlIHRvb2xiYXJIZWlnaHQ6IG51bWJlcjtcbiAgICBwcml2YXRlIGNhcmRHYXA6IG51bWJlcjtcbiAgICBwcml2YXRlIGNvbnRhaW5lclBhZGRpbmc6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogQ2FyZE5hdmlnYXRvclBsdWdpbiwgbGVhZjogV29ya3NwYWNlTGVhZikge1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICAgICAgdGhpcy5sZWFmID0gbGVhZjtcbiAgICAgICAgdGhpcy5jYXJkTWFrZXIgPSBuZXcgQ2FyZE1ha2VyKHRoaXMucGx1Z2luKTtcbiAgICAgICAgdGhpcy5pc1ZlcnRpY2FsID0gZmFsc2U7XG4gICAgICAgIHRoaXMudG9vbGJhckhlaWdodCA9IHRoaXMuZ2V0Q1NTVmFyaWFibGUoJy0tY2FyZC1uYXZpZ2F0b3ItdG9vbGJhci1oZWlnaHQnLCA1MCk7XG4gICAgICAgIHRoaXMuY2FyZEdhcCA9IHRoaXMuZ2V0Q1NTVmFyaWFibGUoJy0tY2FyZC1uYXZpZ2F0b3ItZ2FwJywgMTApO1xuICAgICAgICB0aGlzLmNvbnRhaW5lclBhZGRpbmcgPSB0aGlzLmdldENTU1ZhcmlhYmxlKCctLWNhcmQtbmF2aWdhdG9yLWNvbnRhaW5lci1wYWRkaW5nJywgMTApO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0Q1NTVmFyaWFibGUodmFyaWFibGVOYW1lOiBzdHJpbmcsIGRlZmF1bHRWYWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgY29uc3QgdmFsdWVTdHIgPSBnZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudClcbiAgICAgICAgICAgIC5nZXRQcm9wZXJ0eVZhbHVlKHZhcmlhYmxlTmFtZSlcbiAgICAgICAgICAgIC50cmltKCk7XG4gICAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZVN0cikgfHwgZGVmYXVsdFZhbHVlO1xuICAgIH1cblxuICAgIGFzeW5jIGluaXRpYWxpemUoY29udGFpbmVyRWw6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwgPSBjb250YWluZXJFbDtcbiAgICAgICAgYXdhaXQgdGhpcy53YWl0Rm9yTGVhZkNyZWF0aW9uKCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudHMoKTtcbiAgICAgICAgdGhpcy51cGRhdGVDb250YWluZXJTdHlsZSgpO1xuICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICB9XG5cblx0cHJpdmF0ZSBhc3luYyB3YWl0Rm9yTGVhZkNyZWF0aW9uKCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuXHRcdFx0Y29uc3QgY2hlY2tMZWFmID0gKCkgPT4ge1xuXHRcdFx0XHRpZiAodGhpcy5jb250YWluZXJFbCAmJiB0aGlzLmNvbnRhaW5lckVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoID4gMCAmJiB0aGlzLmNvbnRhaW5lckVsLmNsaWVudEhlaWdodCA+IDApIHtcblx0XHRcdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNoZWNrTGVhZik7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRjaGVja0xlYWYoKTtcblx0XHR9KTtcblx0fVxuXG4gICAgcHJpdmF0ZSByZWdpc3RlckV2ZW50cygpIHtcbiAgICAgICAgdGhpcy5wbHVnaW4ucmVnaXN0ZXJFdmVudChcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2Uub24oJ2FjdGl2ZS1sZWFmLWNoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi50cmlnZ2VyUmVmcmVzaCgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5wbHVnaW4ucmVnaXN0ZXJFdmVudChcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLmFwcC52YXVsdC5vbignbW9kaWZ5JywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnRyaWdnZXJSZWZyZXNoKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cblxuXHRzZXRPcmllbnRhdGlvbihpc1ZlcnRpY2FsOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuaXNWZXJ0aWNhbCA9IGlzVmVydGljYWw7XG4gICAgICAgIHRoaXMudXBkYXRlQ29udGFpbmVyU3R5bGUoKTtcblx0XHR0aGlzLnJlZnJlc2goKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZUNvbnRhaW5lclN0eWxlKCkge1xuICAgICAgICBpZiAodGhpcy5jb250YWluZXJFbCkge1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbC5jbGFzc0xpc3QuYWRkKCdjYXJkLW5hdmlnYXRvci1jb250YWluZXInKTtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwuY2xhc3NMaXN0LnRvZ2dsZSgndmVydGljYWwnLCB0aGlzLmlzVmVydGljYWwpO1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbC5jbGFzc0xpc3QudG9nZ2xlKCdob3Jpem9udGFsJywgIXRoaXMuaXNWZXJ0aWNhbCk7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmNsYXNzTGlzdC50b2dnbGUoJ2ZpeGVkLWhlaWdodCcsIHRoaXMucGx1Z2luLnNldHRpbmdzLmZpeGVkQ2FyZEhlaWdodCk7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmNsYXNzTGlzdC50b2dnbGUoJ2ZsZXhpYmxlLWhlaWdodCcsICF0aGlzLnBsdWdpbi5zZXR0aW5ncy5maXhlZENhcmRIZWlnaHQpO1xuXG4gICAgICAgICAgICAvLyBDU1MgdmFyaWFibGVzXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lckVsLnN0eWxlLnNldFByb3BlcnR5KCctLWNhcmRzLXBlci12aWV3JywgdGhpcy5wbHVnaW4uc2V0dGluZ3MuY2FyZHNQZXJWaWV3LnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1jYXJkLW5hdmlnYXRvci1nYXAnLCBgJHt0aGlzLmNhcmRHYXB9cHhgKTtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwuc3R5bGUuc2V0UHJvcGVydHkoJy0tY2FyZC1uYXZpZ2F0b3ItdG9vbGJhci1oZWlnaHQnLCBgJHt0aGlzLnRvb2xiYXJIZWlnaHR9cHhgKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwuc3R5bGUuZmxleERpcmVjdGlvbiA9ICdjb2x1bW4nO1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwuc3R5bGUub3ZlcmZsb3dZID0gJ2F1dG8nO1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwuc3R5bGUub3ZlcmZsb3dYID0gJ2hpZGRlbic7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbC5zdHlsZS5oZWlnaHQgPSBgY2FsYygxMDAlIC0gJHt0aGlzLnRvb2xiYXJIZWlnaHR9cHgpYDtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lckVsLnN0eWxlLm1hcmdpblRvcCA9IGAke3RoaXMudG9vbGJhckhlaWdodH1weGA7XG5cdFx0XHRcdHRoaXMuY29udGFpbmVyRWwuc3R5bGUuZ2FwID0gYCR7dGhpcy5jYXJkR2FwfXB4YDtcblx0XHRcdFx0dGhpcy5jb250YWluZXJFbC5zdHlsZS5tYXJnaW5SaWdodCA9IGAtMTBweGA7XG5cdFx0XHRcdHRoaXMuY29udGFpbmVyRWwuc3R5bGUucGFkZGluZ1JpZ2h0ID0gYCR7dGhpcy5jb250YWluZXJQYWRkaW5nfXB4YDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbC5zdHlsZS5mbGV4RGlyZWN0aW9uID0gJ3Jvdyc7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbC5zdHlsZS5vdmVyZmxvd1ggPSAnYXV0byc7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbC5zdHlsZS5vdmVyZmxvd1kgPSAnaGlkZGVuJztcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lckVsLnN0eWxlLmhlaWdodCA9ICcxMDAlJztcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lckVsLnN0eWxlLm1hcmdpblRvcCA9ICcwJztcblx0XHRcdFx0dGhpcy5jb250YWluZXJFbC5zdHlsZS5nYXAgPSBgJHt0aGlzLmNhcmRHYXB9cHhgO1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwuc3R5bGUucGFkZGluZ1RvcCA9IGAke3RoaXMuY29udGFpbmVyUGFkZGluZ31weGA7XG5cdFx0XHRcdHRoaXMuY29udGFpbmVyRWwuc3R5bGUucGFkZGluZ0JvdHRvbSA9IGAke3RoaXMuY29udGFpbmVyUGFkZGluZ31weGA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyByZWZyZXNoKCkge1xuICAgICAgICBsZXQgZm9sZGVyOiBURm9sZGVyIHwgbnVsbCA9IG51bGw7XG5cbiAgICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLnVzZVNlbGVjdGVkRm9sZGVyICYmIHRoaXMucGx1Z2luLnNldHRpbmdzLnNlbGVjdGVkRm9sZGVyKSB7XG4gICAgICAgICAgICBmb2xkZXIgPSB0aGlzLnBsdWdpbi5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHRoaXMucGx1Z2luLnNldHRpbmdzLnNlbGVjdGVkRm9sZGVyKSBhcyBURm9sZGVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgYWN0aXZlRmlsZSA9IHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuICAgICAgICAgICAgZm9sZGVyID0gYWN0aXZlRmlsZT8ucGFyZW50IHx8IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWZvbGRlciB8fCAhdGhpcy5jb250YWluZXJFbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZmlsZXMgPSBmb2xkZXIuY2hpbGRyZW4uZmlsdGVyKChmaWxlKTogZmlsZSBpcyBURmlsZSA9PiBmaWxlIGluc3RhbmNlb2YgVEZpbGUpO1xuICAgICAgICBjb25zdCBzb3J0ZWRGaWxlcyA9IHNvcnRGaWxlcyhmaWxlcywgdGhpcy5wbHVnaW4uc2V0dGluZ3Muc29ydENyaXRlcmlvbiwgdGhpcy5wbHVnaW4uc2V0dGluZ3Muc29ydE9yZGVyKTtcbiAgICAgICAgY29uc3QgY2FyZHNEYXRhID0gYXdhaXQgUHJvbWlzZS5hbGwoc29ydGVkRmlsZXMubWFwKGZpbGUgPT4gdGhpcy5jYXJkTWFrZXIuY3JlYXRlQ2FyZChmaWxlKSkpO1xuXG4gICAgICAgIHRoaXMucmVuZGVyQ2FyZHMoY2FyZHNEYXRhKTtcbiAgICB9XG5cblx0cHJpdmF0ZSByZW5kZXJDYXJkcyhjYXJkc0RhdGE6IENhcmRbXSkge1xuXHRcdGNvbnN0IGNvbnRhaW5lckVsID0gdGhpcy5jb250YWluZXJFbDtcblx0XHRpZiAoIWNvbnRhaW5lckVsKSByZXR1cm47XG5cdFxuXHRcdC8vIFN0b3JlIHRoZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvblxuXHRcdGNvbnN0IGN1cnJlbnRTY3JvbGxUb3AgPSBjb250YWluZXJFbC5zY3JvbGxUb3A7XG5cdFx0Y29uc3QgY3VycmVudFNjcm9sbExlZnQgPSBjb250YWluZXJFbC5zY3JvbGxMZWZ0O1xuXHRcblx0XHQvLyBGaW5kIHRoZSBhY3RpdmUgY2FyZCdzIGluZGV4IGJlZm9yZSBjbGVhcmluZ1xuXHRcdGNvbnN0IGFjdGl2ZUNhcmRJbmRleCA9IEFycmF5LmZyb20oY29udGFpbmVyRWwuY2hpbGRyZW4pLmZpbmRJbmRleChcblx0XHRcdGNoaWxkID0+IGNoaWxkLmNsYXNzTGlzdC5jb250YWlucygnY2FyZC1uYXZpZ2F0b3ItYWN0aXZlJylcblx0XHQpO1xuXHRcblx0XHRjb250YWluZXJFbC5pbm5lckhUTUwgPSAnJztcblx0XG5cdFx0Y29uc3QgY29udGFpbmVySGVpZ2h0ID0gY29udGFpbmVyRWwuY2xpZW50SGVpZ2h0O1xuXHRcdGNvbnN0IGF2YWlsYWJsZUhlaWdodCA9IGNvbnRhaW5lckhlaWdodCAtIHRoaXMudG9vbGJhckhlaWdodDtcblx0XG5cdFx0Y2FyZHNEYXRhLmZvckVhY2goKGNhcmREYXRhLCBpbmRleCkgPT4ge1xuXHRcdFx0Y29uc3QgY2FyZCA9IHRoaXMuY2FyZE1ha2VyLmNyZWF0ZUNhcmRFbGVtZW50KGNhcmREYXRhKTtcblx0XHRcdGNhcmQuc3R5bGUuZmxleFNocmluayA9ICcwJztcblx0XG5cdFx0XHRpZiAodGhpcy5pc1ZlcnRpY2FsKSB7XG5cdFx0XHRcdGNhcmQuc3R5bGUud2lkdGggPSAnMTAwJSc7XG5cdFx0XHRcdGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5maXhlZENhcmRIZWlnaHQpIHtcblx0XHRcdFx0XHRjYXJkLnN0eWxlLmhlaWdodCA9IGAke2F2YWlsYWJsZUhlaWdodCAvIHRoaXMucGx1Z2luLnNldHRpbmdzLmNhcmRzUGVyVmlld31weGA7XG5cdFx0XHRcdFx0Y2FyZC5zdHlsZS5vdmVyZmxvdyA9ICdhdXRvJztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjYXJkLnN0eWxlLmhlaWdodCA9ICdhdXRvJztcblx0XHRcdFx0XHRjYXJkLnN0eWxlLm1pbkhlaWdodCA9IGAke2F2YWlsYWJsZUhlaWdodCAvIHRoaXMucGx1Z2luLnNldHRpbmdzLmNhcmRzUGVyVmlldyAvIDJ9cHhgO1xuXHRcdFx0XHRcdGNhcmQuc3R5bGUubWF4SGVpZ2h0ID0gYCR7YXZhaWxhYmxlSGVpZ2h0IC8gMn1weGA7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNhcmQuc3R5bGUud2lkdGggPSBgJHsxMDAgLyB0aGlzLnBsdWdpbi5zZXR0aW5ncy5jYXJkc1BlclZpZXd9JWA7XG5cdFx0XHRcdGNhcmQuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmIChjYXJkRGF0YS5maWxlID09PSB0aGlzLnBsdWdpbi5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKSkge1xuXHRcdFx0XHRjYXJkLmNsYXNzTGlzdC5hZGQoJ2NhcmQtbmF2aWdhdG9yLWFjdGl2ZScpO1xuXHRcdFx0fVxuXHRcblx0XHRcdGNvbnRhaW5lckVsLmFwcGVuZENoaWxkKGNhcmQpO1xuXHRcdH0pO1xuXHRcblx0XHQvLyBSZXN0b3JlIHRoZSBzY3JvbGwgcG9zaXRpb25cblx0XHRjb250YWluZXJFbC5zY3JvbGxUb3AgPSBjdXJyZW50U2Nyb2xsVG9wO1xuXHRcdGNvbnRhaW5lckVsLnNjcm9sbExlZnQgPSBjdXJyZW50U2Nyb2xsTGVmdDtcblx0XG5cdFx0Ly8gSWYgdGhlIGFjdGl2ZSBjYXJkIGhhcyBtb3ZlZCwgc2Nyb2xsIHRvIGl0XG5cdFx0Y29uc3QgbmV3QWN0aXZlQ2FyZEluZGV4ID0gQXJyYXkuZnJvbShjb250YWluZXJFbC5jaGlsZHJlbikuZmluZEluZGV4KFxuXHRcdFx0Y2hpbGQgPT4gY2hpbGQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjYXJkLW5hdmlnYXRvci1hY3RpdmUnKVxuXHRcdCk7XG5cdFxuXHRcdGlmIChhY3RpdmVDYXJkSW5kZXggIT09IG5ld0FjdGl2ZUNhcmRJbmRleCAmJiBuZXdBY3RpdmVDYXJkSW5kZXggIT09IC0xKSB7XG5cdFx0XHR0aGlzLnNjcm9sbFRvQWN0aXZlQ2FyZChmYWxzZSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRwcml2YXRlIHNjcm9sbFRvQWN0aXZlQ2FyZChhbmltYXRlID0gdHJ1ZSkge1xuXHRcdGlmICghdGhpcy5jb250YWluZXJFbCkgcmV0dXJuO1xuXHRcdGNvbnN0IGFjdGl2ZUNhcmQgPSB0aGlzLmNvbnRhaW5lckVsLnF1ZXJ5U2VsZWN0b3IoJy5jYXJkLW5hdmlnYXRvci1hY3RpdmUnKSBhcyBIVE1MRWxlbWVudCB8IG51bGw7XG5cdFx0aWYgKCFhY3RpdmVDYXJkKSByZXR1cm47XG5cdFxuXHRcdGNvbnN0IGNvbnRhaW5lclJlY3QgPSB0aGlzLmNvbnRhaW5lckVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdGNvbnN0IGFjdGl2ZUNhcmRSZWN0ID0gYWN0aXZlQ2FyZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XG5cdFx0bGV0IG9mZnNldCA9IDA7XG5cdFx0bGV0IHNjcm9sbFByb3BlcnR5OiAnc2Nyb2xsVG9wJyB8ICdzY3JvbGxMZWZ0Jztcblx0XG5cdFx0aWYgKHRoaXMuaXNWZXJ0aWNhbCkge1xuXHRcdFx0Y29uc3QgY29udGFpbmVyQ2VudGVyID0gY29udGFpbmVyUmVjdC50b3AgKyBjb250YWluZXJSZWN0LmhlaWdodCAvIDI7XG5cdFx0XHRjb25zdCBjYXJkQ2VudGVyID0gYWN0aXZlQ2FyZFJlY3QudG9wICsgYWN0aXZlQ2FyZFJlY3QuaGVpZ2h0IC8gMjtcblx0XHRcdG9mZnNldCA9IGNhcmRDZW50ZXIgLSBjb250YWluZXJDZW50ZXI7XG5cdFx0XHRzY3JvbGxQcm9wZXJ0eSA9ICdzY3JvbGxUb3AnO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCBjb250YWluZXJDZW50ZXIgPSBjb250YWluZXJSZWN0LmxlZnQgKyBjb250YWluZXJSZWN0LndpZHRoIC8gMjtcblx0XHRcdGNvbnN0IGNhcmRDZW50ZXIgPSBhY3RpdmVDYXJkUmVjdC5sZWZ0ICsgYWN0aXZlQ2FyZFJlY3Qud2lkdGggLyAyO1xuXHRcdFx0b2Zmc2V0ID0gY2FyZENlbnRlciAtIGNvbnRhaW5lckNlbnRlcjtcblx0XHRcdHNjcm9sbFByb3BlcnR5ID0gJ3Njcm9sbExlZnQnO1xuXHRcdH1cblx0XG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIGNhcmQgaXMgYWxyZWFkeSBpbiB2aWV3XG5cdFx0Y29uc3QgdGhyZXNob2xkID0gNTA7IC8vIHB4XG5cdFx0aWYgKE1hdGguYWJzKG9mZnNldCkgPCB0aHJlc2hvbGQpIHJldHVybjtcblx0XG5cdFx0Ly8gQ2FsY3VsYXRlIHRoZSBuZXcgc2Nyb2xsIHBvc2l0aW9uXG5cdFx0Y29uc3QgbmV3U2Nyb2xsUG9zaXRpb24gPSB0aGlzLmNvbnRhaW5lckVsW3Njcm9sbFByb3BlcnR5XSArIG9mZnNldDtcblx0XG5cdFx0aWYgKGFuaW1hdGUpIHtcblx0XHRcdC8vIEFuaW1hdGUgdGhlIHNjcm9sbFxuXHRcdFx0Y29uc3Qgc3RhcnQgPSB0aGlzLmNvbnRhaW5lckVsW3Njcm9sbFByb3BlcnR5XTtcblx0XHRcdGNvbnN0IGNoYW5nZSA9IG5ld1Njcm9sbFBvc2l0aW9uIC0gc3RhcnQ7XG5cdFx0XHRjb25zdCBkdXJhdGlvbiA9IDMwMDsgLy8gbXNcblx0XHRcdGxldCBzdGFydFRpbWU6IG51bWJlciB8IG51bGwgPSBudWxsO1xuXHRcblx0XHRcdGNvbnN0IGFuaW1hdGVTY3JvbGwgPSAoY3VycmVudFRpbWU6IG51bWJlcikgPT4ge1xuXHRcdFx0XHRpZiAoc3RhcnRUaW1lID09PSBudWxsKSBzdGFydFRpbWUgPSBjdXJyZW50VGltZTtcblx0XHRcdFx0Y29uc3QgdGltZUVsYXBzZWQgPSBjdXJyZW50VGltZSAtIHN0YXJ0VGltZTtcblx0XHRcdFx0Y29uc3QgcHJvZ3Jlc3MgPSBNYXRoLm1pbih0aW1lRWxhcHNlZCAvIGR1cmF0aW9uLCAxKTtcblx0XHRcdFx0Y29uc3QgZWFzZVByb2dyZXNzID0gMC41IC0gTWF0aC5jb3MocHJvZ3Jlc3MgKiBNYXRoLlBJKSAvIDI7IC8vIGVhc2VJbk91dFNpbmVcblx0XG5cdFx0XHRcdGlmICh0aGlzLmNvbnRhaW5lckVsKSB7XG5cdFx0XHRcdFx0dGhpcy5jb250YWluZXJFbFtzY3JvbGxQcm9wZXJ0eV0gPSBzdGFydCArIGNoYW5nZSAqIGVhc2VQcm9ncmVzcztcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0aWYgKHRpbWVFbGFwc2VkIDwgZHVyYXRpb24gJiYgdGhpcy5jb250YWluZXJFbCkge1xuXHRcdFx0XHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlU2Nyb2xsKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XG5cdFx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZVNjcm9sbCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIEluc3RhbnQgc2Nyb2xsIHdpdGhvdXQgYW5pbWF0aW9uXG5cdFx0XHR0aGlzLmNvbnRhaW5lckVsW3Njcm9sbFByb3BlcnR5XSA9IG5ld1Njcm9sbFBvc2l0aW9uO1xuXHRcdH1cblx0fVxuXHRcblx0cHVibGljIGNlbnRlckFjdGl2ZUNhcmQoKSB7XG5cdFx0dGhpcy5zY3JvbGxUb0FjdGl2ZUNhcmQodHJ1ZSk7XG5cdH1cblxuICAgIHNjcm9sbFVwKGNvdW50ID0gMSkge1xuICAgICAgICBpZiAoIXRoaXMuY29udGFpbmVyRWwpIHJldHVybjtcbiAgICAgICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCkge1xuICAgICAgICAgICAgY29uc3Qgc2Nyb2xsQW1vdW50ID0gdGhpcy5nZXRDYXJkSGVpZ2h0KCkgKiBjb3VudDtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwuc2Nyb2xsQnkoeyB0b3A6IC1zY3JvbGxBbW91bnQsIGJlaGF2aW9yOiAnc21vb3RoJyB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFx1QUMwMFx1Qjg1QyBcdUJBQThcdUI0RENcdUM1RDBcdUMxMUNcdUIyOTQgXHVDNjdDXHVDQUJEXHVDNzNDXHVCODVDIFx1QzJBNFx1RDA2Q1x1Qjg2NFxuICAgICAgICAgICAgY29uc3Qgc2Nyb2xsQW1vdW50ID0gdGhpcy5nZXRDYXJkV2lkdGgoKSAqIGNvdW50O1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbC5zY3JvbGxCeSh7IGxlZnQ6IC1zY3JvbGxBbW91bnQsIGJlaGF2aW9yOiAnc21vb3RoJyB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNjcm9sbERvd24oY291bnQgPSAxKSB7XG4gICAgICAgIGlmICghdGhpcy5jb250YWluZXJFbCkgcmV0dXJuO1xuICAgICAgICBpZiAodGhpcy5pc1ZlcnRpY2FsKSB7XG4gICAgICAgICAgICBjb25zdCBzY3JvbGxBbW91bnQgPSB0aGlzLmdldENhcmRIZWlnaHQoKSAqIGNvdW50O1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbC5zY3JvbGxCeSh7IHRvcDogc2Nyb2xsQW1vdW50LCBiZWhhdmlvcjogJ3Ntb290aCcgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBcdUFDMDBcdUI4NUMgXHVCQUE4XHVCNERDXHVDNUQwXHVDMTFDXHVCMjk0IFx1QzYyNFx1Qjk3OFx1Q0FCRFx1QzczQ1x1Qjg1QyBcdUMyQTRcdUQwNkNcdUI4NjRcbiAgICAgICAgICAgIGNvbnN0IHNjcm9sbEFtb3VudCA9IHRoaXMuZ2V0Q2FyZFdpZHRoKCkgKiBjb3VudDtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwuc2Nyb2xsQnkoeyBsZWZ0OiBzY3JvbGxBbW91bnQsIGJlaGF2aW9yOiAnc21vb3RoJyB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNjcm9sbExlZnQoY291bnQgPSAxKSB7XG4gICAgICAgIGlmICghdGhpcy5jb250YWluZXJFbCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBzY3JvbGxBbW91bnQgPSB0aGlzLmdldENhcmRXaWR0aCgpICogY291bnQ7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuc2Nyb2xsQnkoeyBsZWZ0OiAtc2Nyb2xsQW1vdW50LCBiZWhhdmlvcjogJ3Ntb290aCcgfSk7XG4gICAgfVxuXG4gICAgc2Nyb2xsUmlnaHQoY291bnQgPSAxKSB7XG4gICAgICAgIGlmICghdGhpcy5jb250YWluZXJFbCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBzY3JvbGxBbW91bnQgPSB0aGlzLmdldENhcmRXaWR0aCgpICogY291bnQ7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuc2Nyb2xsQnkoeyBsZWZ0OiBzY3JvbGxBbW91bnQsIGJlaGF2aW9yOiAnc21vb3RoJyB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldENhcmRIZWlnaHQoKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbnRhaW5lckVsKSByZXR1cm4gMDtcbiAgICAgICAgY29uc3QgZmlyc3RDYXJkID0gdGhpcy5jb250YWluZXJFbC5xdWVyeVNlbGVjdG9yKCcuY2FyZC1uYXZpZ2F0b3ItY2FyZCcpO1xuICAgICAgICByZXR1cm4gZmlyc3RDYXJkID8gZmlyc3RDYXJkLmNsaWVudEhlaWdodCA6IDA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRDYXJkV2lkdGgoKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbnRhaW5lckVsKSByZXR1cm4gMDtcbiAgICAgICAgY29uc3QgZmlyc3RDYXJkID0gdGhpcy5jb250YWluZXJFbC5xdWVyeVNlbGVjdG9yKCcuY2FyZC1uYXZpZ2F0b3ItY2FyZCcpO1xuICAgICAgICByZXR1cm4gZmlyc3RDYXJkID8gZmlyc3RDYXJkLmNsaWVudFdpZHRoIDogMDtcbiAgICB9XG5cbiAgICBzY3JvbGxUb0NlbnRlcigpIHtcbiAgICAgICAgdGhpcy5zY3JvbGxUb0FjdGl2ZUNhcmQoKTtcbiAgICB9XG5cblx0cHVibGljIGRpc3BsYXlDYXJkcyhmaWx0ZXJlZEZpbGVzOiBURmlsZVtdKSB7XG5cdH1cblxuICAgIHB1YmxpYyBhc3luYyBzZWFyY2hDYXJkcyhzZWFyY2hUZXJtOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgYWN0aXZlRmlsZSA9IHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuICAgICAgICBpZiAoIWFjdGl2ZUZpbGUpIHJldHVybjtcblxuICAgICAgICBjb25zdCBmb2xkZXIgPSBhY3RpdmVGaWxlLnBhcmVudDtcbiAgICAgICAgaWYgKCFmb2xkZXIpIHJldHVybjtcblxuICAgICAgICBjb25zdCBmaWxlcyA9IGZvbGRlci5jaGlsZHJlbi5maWx0ZXIoKGZpbGUpOiBmaWxlIGlzIFRGaWxlID0+IGZpbGUgaW5zdGFuY2VvZiBURmlsZSk7XG4gICAgICAgIGNvbnN0IGZpbHRlcmVkRmlsZXMgPSBhd2FpdCB0aGlzLmZpbHRlckZpbGVzQnlDb250ZW50KGZpbGVzLCBzZWFyY2hUZXJtKTtcblxuICAgICAgICBjb25zdCBjYXJkcyA9IGF3YWl0IFByb21pc2UuYWxsKGZpbHRlcmVkRmlsZXMubWFwKGZpbGUgPT4gdGhpcy5jYXJkTWFrZXIuY3JlYXRlQ2FyZChmaWxlKSkpO1xuICAgICAgICB0aGlzLnJlbmRlckNhcmRzKGNhcmRzKTtcbiAgICB9XG5cbiAgICBhc3luYyBkaXNwbGF5Q2FyZHNGb3JGb2xkZXIoZm9sZGVyOiBURm9sZGVyKSB7XG4gICAgICAgIGNvbnN0IGZpbGVzID0gZm9sZGVyLmNoaWxkcmVuLmZpbHRlcigoZmlsZSk6IGZpbGUgaXMgVEZpbGUgPT4gZmlsZSBpbnN0YW5jZW9mIFRGaWxlKTtcbiAgICAgICAgY29uc3QgY2FyZHMgPSBhd2FpdCBQcm9taXNlLmFsbChmaWxlcy5tYXAoZmlsZSA9PiB0aGlzLmNhcmRNYWtlci5jcmVhdGVDYXJkKGZpbGUpKSk7XG4gICAgICAgIHRoaXMucmVuZGVyQ2FyZHMoY2FyZHMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgZmlsdGVyRmlsZXNCeUNvbnRlbnQoZmlsZXM6IFRGaWxlW10sIHNlYXJjaFRlcm06IHN0cmluZyk6IFByb21pc2U8VEZpbGVbXT4ge1xuICAgICAgICBjb25zdCBsb3dlcmNhc2VTZWFyY2hUZXJtID0gc2VhcmNoVGVybS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBjb25zdCBmaWx0ZXJlZEZpbGVzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xuICAgICAgICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IHRoaXMucGx1Z2luLmFwcC52YXVsdC5jYWNoZWRSZWFkKGZpbGUpO1xuICAgICAgICAgICAgaWYgKGZpbGUuYmFzZW5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhsb3dlcmNhc2VTZWFyY2hUZXJtKSB8fFxuICAgICAgICAgICAgICAgIGNvbnRlbnQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhsb3dlcmNhc2VTZWFyY2hUZXJtKSkge1xuICAgICAgICAgICAgICAgIGZpbHRlcmVkRmlsZXMucHVzaChmaWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsdGVyZWRGaWxlcztcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgc29ydENhcmRzKGNyaXRlcmlvbjogU29ydENyaXRlcmlvbiwgb3JkZXI6ICdhc2MnIHwgJ2Rlc2MnKSB7XG4gICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnNvcnRDcml0ZXJpb24gPSBjcml0ZXJpb247XG4gICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnNvcnRPcmRlciA9IG9yZGVyO1xuICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgdGhpcy5wbHVnaW4udHJpZ2dlclJlZnJlc2goKTtcbiAgICB9XG5cbiAgICBvbkNsb3NlKCkge31cbn1cbiIsICIvLyBzcmMvdWkvY2FyZENvbnRhaW5lci9jYXJkTWFrZXIudHNcblxuaW1wb3J0IHsgTWVudSwgVEZpbGUsIE1hcmtkb3duUmVuZGVyZXIgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgQ2FyZE5hdmlnYXRvclBsdWdpbiBmcm9tICcuLi8uLi9tYWluJztcbmltcG9ydCB7IENhcmQgfSBmcm9tICcuLi8uLi9jb21tb24vdHlwZXMnO1xuaW1wb3J0IHsgc29ydEZpbGVzLCBzZXBhcmF0ZUZyb250bWF0dGVyQW5kQ29udGVudCB9IGZyb20gJy4uLy4uL2NvbW1vbi91dGlscyc7XG5cbmV4cG9ydCBjbGFzcyBDYXJkTWFrZXIge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcGx1Z2luOiBDYXJkTmF2aWdhdG9yUGx1Z2luKSB7fVxuXG5cdGFzeW5jIGdldENhcmRzRm9yQWN0aXZlRmlsZShhY3RpdmVGaWxlOiBURmlsZSk6IFByb21pc2U8Q2FyZFtdPiB7XG5cdFx0Y29uc3QgZm9sZGVyID0gYWN0aXZlRmlsZS5wYXJlbnQ7XG5cdFx0aWYgKCFmb2xkZXIpIHtcblx0XHRcdHJldHVybiBbXTtcblx0XHR9XG5cdFx0Y29uc3QgZmlsZXMgPSBmb2xkZXIuY2hpbGRyZW4uZmlsdGVyKChmaWxlKTogZmlsZSBpcyBURmlsZSA9PiBmaWxlIGluc3RhbmNlb2YgVEZpbGUpO1xuXHRcdGNvbnN0IHNvcnRlZEZpbGVzID0gc29ydEZpbGVzKFxuXHRcdFx0ZmlsZXMsIFxuXHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3Muc29ydENyaXRlcmlvbiwgXG5cdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5zb3J0T3JkZXJcblx0XHQpO1xuXHRcdHJldHVybiBhd2FpdCBQcm9taXNlLmFsbChzb3J0ZWRGaWxlcy5tYXAoZmlsZSA9PiB0aGlzLmNyZWF0ZUNhcmQoZmlsZSkpKTtcblx0fVxuXG4gICAgcHVibGljIGFzeW5jIGNyZWF0ZUNhcmQoZmlsZTogVEZpbGUpOiBQcm9taXNlPENhcmQ+IHtcbiAgICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IHRoaXMucGx1Z2luLmFwcC52YXVsdC5jYWNoZWRSZWFkKGZpbGUpO1xuICAgICAgICBjb25zdCB7IGNsZWFuQ29udGVudCB9ID0gc2VwYXJhdGVGcm9udG1hdHRlckFuZENvbnRlbnQoY29udGVudCk7XG4gICAgICAgIGNvbnN0IGNvbnRlbnRXaXRob3V0SGVhZGVyID0gdGhpcy5yZW1vdmVGaXJzdEhlYWRlcihjbGVhbkNvbnRlbnQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgIGZpbGVOYW1lOiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93RmlsZU5hbWUgPyBmaWxlLmJhc2VuYW1lIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZmlyc3RIZWFkZXI6IHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dGaXJzdEhlYWRlciA/IHRoaXMuZmluZEZpcnN0SGVhZGVyKGNsZWFuQ29udGVudCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjb250ZW50OiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93Q29udGVudCA/IHRoaXMudHJ1bmNhdGVDb250ZW50KGNvbnRlbnRXaXRob3V0SGVhZGVyKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbW92ZUZpcnN0SGVhZGVyKGNvbnRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IGhlYWRlclJlZ2V4ID0gL14jK1xccysoLispJC9tO1xuICAgICAgICByZXR1cm4gY29udGVudC5yZXBsYWNlKGhlYWRlclJlZ2V4LCAnJykudHJpbSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZmluZEZpcnN0SGVhZGVyKGNvbnRlbnQ6IHN0cmluZyk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGNvbnN0IGhlYWRlclJlZ2V4ID0gL14jK1xccysoLispJC9tO1xuICAgICAgICBjb25zdCBtYXRjaCA9IGNvbnRlbnQubWF0Y2goaGVhZGVyUmVnZXgpO1xuICAgICAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXS50cmltKCkgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB0cnVuY2F0ZUNvbnRlbnQoY29udGVudDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgbWF4TGVuZ3RoID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuY29udGVudExlbmd0aCAqIDEwMDtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQubGVuZ3RoIDw9IG1heExlbmd0aCA/IGNvbnRlbnQgOiBjb250ZW50LnNsaWNlKDAsIG1heExlbmd0aCkgKyAnLi4uJztcbiAgICB9XG5cbiAgICBjcmVhdGVDYXJkRWxlbWVudChjYXJkOiBDYXJkKTogSFRNTEVsZW1lbnQge1xuICAgICAgICBjb25zdCBjYXJkRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjYXJkRWxlbWVudC5jbGFzc05hbWUgPSAnY2FyZC1uYXZpZ2F0b3ItY2FyZCc7XG5cbiAgICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dGaWxlTmFtZSAmJiBjYXJkLmZpbGVOYW1lKSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlTmFtZUVsID0gY2FyZEVsZW1lbnQuY3JlYXRlRWwoJ2gzJywgeyB0ZXh0OiBjYXJkLmZpbGVOYW1lIH0pO1xuICAgICAgICAgICAgZmlsZU5hbWVFbC5jbGFzc05hbWUgPSAnY2FyZC1uYXZpZ2F0b3ItZmlsZW5hbWUnO1xuICAgICAgICAgICAgZmlsZU5hbWVFbC5zdHlsZS5mb250U2l6ZSA9IGAke3RoaXMucGx1Z2luLnNldHRpbmdzLmZpbGVOYW1lU2l6ZX1weGA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd0ZpcnN0SGVhZGVyICYmIGNhcmQuZmlyc3RIZWFkZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlckVsID0gY2FyZEVsZW1lbnQuY3JlYXRlRWwoJ2g0JywgeyB0ZXh0OiBjYXJkLmZpcnN0SGVhZGVyIH0pO1xuICAgICAgICAgICAgaGVhZGVyRWwuY2xhc3NOYW1lID0gJ2NhcmQtbmF2aWdhdG9yLWZpcnN0LWhlYWRlcic7XG4gICAgICAgICAgICBoZWFkZXJFbC5zdHlsZS5mb250U2l6ZSA9IGAke3RoaXMucGx1Z2luLnNldHRpbmdzLmZpcnN0SGVhZGVyU2l6ZX1weGA7XG4gICAgICAgIH1cblxuXHRcdGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93Q29udGVudCAmJiBjYXJkLmNvbnRlbnQpIHtcblx0XHRcdGNvbnN0IGNvbnRlbnRFbCA9IGNhcmRFbGVtZW50LmNyZWF0ZUVsKCdkaXYnKTtcblx0XHRcdGNvbnRlbnRFbC5jbGFzc05hbWUgPSAnY2FyZC1uYXZpZ2F0b3ItY29udGVudCc7XG5cdFx0XHRjb250ZW50RWwuc3R5bGUuZm9udFNpemUgPSBgJHt0aGlzLnBsdWdpbi5zZXR0aW5ncy5jb250ZW50U2l6ZX1weGA7XG5cdFx0XG5cdFx0XHRpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MucmVuZGVyQ29udGVudEFzSHRtbCkge1xuXHRcdFx0XHRNYXJrZG93blJlbmRlcmVyLnJlbmRlcihcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5hcHAsXG5cdFx0XHRcdFx0Y2FyZC5jb250ZW50LFxuXHRcdFx0XHRcdGNvbnRlbnRFbCxcblx0XHRcdFx0XHRjYXJkLmZpbGUucGF0aCxcblx0XHRcdFx0XHR0aGlzLnBsdWdpblxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29udGVudEVsLnRleHRDb250ZW50ID0gY2FyZC5jb250ZW50O1xuXHRcdFx0XHRjb250ZW50RWwuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcblx0XHRcdFx0Y29udGVudEVsLnN0eWxlLnRleHRPdmVyZmxvdyA9ICdlbGxpcHNpcyc7XG5cdFx0XHRcdGNvbnRlbnRFbC5zdHlsZS5kaXNwbGF5ID0gJy13ZWJraXQtYm94Jztcblx0XHRcdH1cblx0XHR9XG5cbiAgICAgICAgaWYgKHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpID09PSBjYXJkLmZpbGUpIHtcbiAgICAgICAgICAgIGNhcmRFbGVtZW50LmFkZENsYXNzKCdjYXJkLW5hdmlnYXRvci1hY3RpdmUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFx1Q0U3NFx1QjREQyBcdUMwRERcdUMxMzEgXHVENkM0IFx1QjREQ1x1Qjc5OFx1QURGOCBcdUM1NjQgXHVCNERDXHVCODZEIFx1QkMwRiBcdUIyRTRcdUI5NzggXHVDNzc4XHVEMTMwXHVCNzk5XHVDMTU4IFx1QzEyNFx1QzgxNVxuICAgICAgICB0aGlzLmFkZENhcmRJbnRlcmFjdGlvbnMoY2FyZEVsZW1lbnQsIGNhcmQpO1xuXG4gICAgICAgIHJldHVybiBjYXJkRWxlbWVudDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZENhcmRJbnRlcmFjdGlvbnMoY2FyZEVsZW1lbnQ6IEhUTUxFbGVtZW50LCBjYXJkOiBDYXJkKSB7XG4gICAgICAgIGNhcmRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5vcGVuRmlsZShjYXJkLmZpbGUpKTtcbiAgICAgICAgdGhpcy5zZXR1cERyYWdBbmREcm9wKGNhcmRFbGVtZW50LCBjYXJkKTtcbiAgICAgICAgdGhpcy5zZXR1cENvbnRleHRNZW51KGNhcmRFbGVtZW50LCBjYXJkLmZpbGUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0dXBEcmFnQW5kRHJvcChjYXJkRWxlbWVudDogSFRNTEVsZW1lbnQsIGNhcmQ6IENhcmQpIHtcbiAgICAgICAgY2FyZEVsZW1lbnQuc2V0QXR0cmlidXRlKCdkcmFnZ2FibGUnLCAndHJ1ZScpO1xuICAgICAgICBjYXJkRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC5kYXRhVHJhbnNmZXIpIHtcbiAgICAgICAgICAgICAgICBsZXQgZHJhZ0NvbnRlbnQgPSAnJztcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5kcmFnRHJvcENvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gXHVDRTc0XHVCNERDXHVDNUQwIFx1RDQ1Q1x1QzJEQ1x1QjQxOFx1QjI5NCBcdUQ1NkRcdUJBQTlcdUM1RDAgXHVCNTMwXHVCNzdDIFx1QjREQ1x1Qjc5OFx1QURGOCBcdUM1NjQgXHVCNERDXHVCODZEIFx1QzJEQyBcdUMwQkRcdUM3ODVcdUQ1NjAgXHVCMEI0XHVDNkE5IFx1QUNCMFx1QzgxNVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd0ZpbGVOYW1lICYmIGNhcmQuZmlsZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdDb250ZW50ICs9IGAjIyAke2NhcmQuZmlsZU5hbWV9XFxuXFxuYDsgLy8gXHVEMzBDXHVDNzdDXHVCQTg1IFx1QzU1RVx1QzVEMCBcdUQ1RTRcdUIzNTQgXHVDRDk0XHVBQzAwXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd0ZpcnN0SGVhZGVyICYmIGNhcmQuZmlyc3RIZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdDb250ZW50ICs9IGAjICR7Y2FyZC5maXJzdEhlYWRlcn1cXG5cXG5gOyAvLyBcdUNDQUIgXHVCQzg4XHVDOUY4IFx1RDVFNFx1QjM1NCBcdUM1NUVcdUM1RDAgXHVENUU0XHVCMzU0IFx1Q0Q5NFx1QUMwMFxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dDb250ZW50ICYmIGNhcmQuY29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ0NvbnRlbnQgKz0gYCR7Y2FyZC5jb250ZW50fVxcblxcbmA7IC8vIFx1QkNGOFx1QkIzOCBcdUIwQjRcdUM2QTkgXHVDRDk0XHVBQzAwXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZHJhZ0NvbnRlbnQgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBcdUI5Q0NcdUM1N0QgXHVENDVDXHVDMkRDIFx1QzEyNFx1QzgxNVx1Qzc3NCBcdUI0MThcdUM1QjRcdUM3ODhcdUM5QzAgXHVDNTRBXHVDNzNDXHVCQTc0IFx1QUUzMFx1QkNGOCBcdUQzMENcdUM3N0MgXHVCOUMxXHVEMDZDIFx1QzBCRFx1Qzc4NVxuICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ0NvbnRlbnQgPSBgW1ske2NhcmQuZmlsZS5uYW1lfV1dYDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFwiRHJhZyBhbmQgRHJvcCBDb250ZW50XCIgXHVDNjM1XHVDMTU4XHVDNzc0IFx1QkU0NFx1RDY1Q1x1QzEzMVx1RDY1NFx1QjQxQyBcdUFDQkRcdUM2QjAgXHVEMzBDXHVDNzdDXHVCQTg1IFx1QjlDMVx1RDA2Q1x1Qjk3QyBcdUMwQkRcdUM3ODVcbiAgICAgICAgICAgICAgICAgICAgZHJhZ0NvbnRlbnQgPSBgW1ske2NhcmQuZmlsZS5uYW1lfV1dYDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBldmVudC5kYXRhVHJhbnNmZXIuc2V0RGF0YSgndGV4dC9wbGFpbicsIGRyYWdDb250ZW50LnRyaW0oKSk7XG5cdFx0XHRcdGV2ZW50LmRhdGFUcmFuc2Zlci5zZXREcmFnSW1hZ2UoY2FyZEVsZW1lbnQsIDAsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldHVwQ29udGV4dE1lbnUoY2FyZEVsZW1lbnQ6IEhUTUxFbGVtZW50LCBmaWxlOiBURmlsZSkge1xuICAgICAgICBjYXJkRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIChlKSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBjb25zdCBtZW51ID0gbmV3IE1lbnUoKTtcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UudHJpZ2dlcignZmlsZS1tZW51JywgbWVudSwgZmlsZSwgJ21vcmUtb3B0aW9ucycpO1xuICAgICAgICAgICAgbWVudS5zaG93QXRQb3NpdGlvbih7IHg6IGUuY2xpZW50WCwgeTogZS5jbGllbnRZIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9wZW5GaWxlKGZpbGU6IFRGaWxlKSB7XG4gICAgICAgIHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UuZ2V0TGVhZigpLm9wZW5GaWxlKGZpbGUpO1xuICAgIH1cbn1cbiIsICIvLyBzcmMvY29tbW9uL3V0aWxzLnRzXG5cbmltcG9ydCB7IFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgU29ydENyaXRlcmlvbiB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gc2VwYXJhdGVGcm9udG1hdHRlckFuZENvbnRlbnQoY29udGVudDogc3RyaW5nKTogeyBmcm9udG1hdHRlcjogc3RyaW5nIHwgbnVsbCwgY2xlYW5Db250ZW50OiBzdHJpbmcgfSB7XG4gICAgY29uc3QgZnJvbnRtYXR0ZXJSZWdleCA9IC9eLS0tXFxzKlxcbihbXFxzXFxTXSo/KVxcbi0tLVxccypcXG4vO1xuICAgIGNvbnN0IG1hdGNoID0gY29udGVudC5tYXRjaChmcm9udG1hdHRlclJlZ2V4KTtcbiAgICByZXR1cm4gbWF0Y2hcbiAgICAgICAgPyB7IGZyb250bWF0dGVyOiBtYXRjaFsxXSwgY2xlYW5Db250ZW50OiBjb250ZW50LnNsaWNlKG1hdGNoWzBdLmxlbmd0aCkudHJpbSgpIH1cbiAgICAgICAgOiB7IGZyb250bWF0dGVyOiBudWxsLCBjbGVhbkNvbnRlbnQ6IGNvbnRlbnQudHJpbSgpIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzb3J0RmlsZXMoZmlsZXM6IFRGaWxlW10sIGNyaXRlcmlvbjogU29ydENyaXRlcmlvbiwgb3JkZXI6ICdhc2MnIHwgJ2Rlc2MnKTogVEZpbGVbXSB7XG4gICAgcmV0dXJuIGZpbGVzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgbGV0IGNvbXBhcmlzb24gPSAwO1xuICAgICAgICBzd2l0Y2ggKGNyaXRlcmlvbikge1xuICAgICAgICAgICAgY2FzZSAnZmlsZU5hbWUnOlxuICAgICAgICAgICAgICAgIGNvbXBhcmlzb24gPSBhLmJhc2VuYW1lLmxvY2FsZUNvbXBhcmUoYi5iYXNlbmFtZSwgdW5kZWZpbmVkLCB7IG51bWVyaWM6IHRydWUsIHNlbnNpdGl2aXR5OiAnYmFzZScgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdsYXN0TW9kaWZpZWQnOlxuICAgICAgICAgICAgICAgIGNvbXBhcmlzb24gPSBhLnN0YXQubXRpbWUgLSBiLnN0YXQubXRpbWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjcmVhdGVkJzpcbiAgICAgICAgICAgICAgICBjb21wYXJpc29uID0gYS5zdGF0LmN0aW1lIC0gYi5zdGF0LmN0aW1lO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcmRlciA9PT0gJ2FzYycgPyBjb21wYXJpc29uIDogLWNvbXBhcmlzb247XG4gICAgfSk7XG59XG4iLCAiLy8gc3JjL3VpL3NldHRpbmdzVGFiLnRzXG5cbmltcG9ydCB7IEFwcCwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZyB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCBDYXJkTmF2aWdhdG9yUGx1Z2luIGZyb20gJy4uL21haW4nO1xuaW1wb3J0IHsgRm9sZGVyU3VnZ2VzdE1vZGFsIH0gZnJvbSAnLi90b29sYmFyL3Rvb2xiYXJBY3Rpb25zJztcbmltcG9ydCB7IFNvcnRDcml0ZXJpb24sIENhcmROYXZpZ2F0b3JTZXR0aW5ncyB9IGZyb20gJy4uL2NvbW1vbi90eXBlcyc7XG5pbXBvcnQgeyB0IH0gZnJvbSAnaTE4bmV4dCc7XG5cbmV4cG9ydCBjbGFzcyBTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHByaXZhdGUgcGx1Z2luOiBDYXJkTmF2aWdhdG9yUGx1Z2luKSB7XG4gICAgICAgIHN1cGVyKGFwcCwgcGx1Z2luKTtcbiAgICB9XG5cbiAgICBkaXNwbGF5KCk6IHZvaWQge1xuICAgICAgICBjb25zdCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzO1xuICAgICAgICBjb250YWluZXJFbC5lbXB0eSgpO1xuXG4gICAgICAgIGNvbnN0IGNyZWF0ZVNldHRpbmcgPSAobmFtZTogc3RyaW5nLCBkZXNjOiBzdHJpbmcsIHNldHRpbmdLZXk6IGtleW9mIENhcmROYXZpZ2F0b3JTZXR0aW5ncykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgICAgIC5zZXROYW1lKHQobmFtZSkpXG4gICAgICAgICAgICAgICAgLnNldERlc2ModChkZXNjKSk7XG4gICAgICAgIH07XG5cblx0XHRjb25zdCB1cGRhdGVTZXR0aW5nID0gYXN5bmMgPEsgZXh0ZW5kcyBrZXlvZiBDYXJkTmF2aWdhdG9yU2V0dGluZ3M+KFxuICAgICAgICAgICAgc2V0dGluZ0tleTogSyxcbiAgICAgICAgICAgIHZhbHVlOiBDYXJkTmF2aWdhdG9yU2V0dGluZ3NbS11cbiAgICAgICAgKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5nc1tzZXR0aW5nS2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbi50cmlnZ2VyUmVmcmVzaCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNyZWF0ZVNldHRpbmcodCgnQ2FyZHMgcGVyIHZpZXcnKSwgdCgnTnVtYmVyIG9mIGNhcmRzIHRvIGRpc3BsYXkgYXQgb25jZScpLCB0KCdjYXJkc1BlclZpZXcnKSlcbiAgICAgICAgICAgIC5hZGRTbGlkZXIoc2xpZGVyID0+IHNsaWRlclxuICAgICAgICAgICAgICAgIC5zZXRMaW1pdHMoMSwgMTAsIDEpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmNhcmRzUGVyVmlldylcbiAgICAgICAgICAgICAgICAuc2V0RHluYW1pY1Rvb2x0aXAoKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdXBkYXRlU2V0dGluZygnY2FyZHNQZXJWaWV3JywgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICBjcmVhdGVTZXR0aW5nKHQoJ0ZvbGRlciBTZWxlY3Rpb24nKSwgdCgnQ2hvb3NlIHdoZXRoZXIgdG8gdXNlIHRoZSBhY3RpdmUgZmlsZVxcJ3MgZm9sZGVyIG9yIGEgc2VsZWN0ZWQgZm9sZGVyJyksIHQoJ3VzZVNlbGVjdGVkRm9sZGVyJykpXG4gICAgICAgICAgICAuYWRkRHJvcGRvd24oZHJvcGRvd24gPT4gZHJvcGRvd25cbiAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKHQoJ2FjdGl2ZScpLCB0KCdBY3RpdmUgRmlsZVxcJ3MgRm9sZGVyJykpXG4gICAgICAgICAgICAgICAgLmFkZE9wdGlvbih0KCdzZWxlY3RlZCcpLCB0KCdTZWxlY3RlZCBGb2xkZXInKSlcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MudXNlU2VsZWN0ZWRGb2xkZXIgPyB0KCdzZWxlY3RlZCcpIDogdCgnYWN0aXZlJykpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB1cGRhdGVTZXR0aW5nKCd1c2VTZWxlY3RlZEZvbGRlcicsIHZhbHVlID09PSB0KCdzZWxlY3RlZCcpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy51c2VTZWxlY3RlZEZvbGRlcikge1xuICAgICAgICAgICAgY3JlYXRlU2V0dGluZyh0KCdTZWxlY3QgRm9sZGVyJyksIHQoJ0Nob29zZSBhIGZvbGRlciBmb3IgQ2FyZCBOYXZpZ2F0b3InKSwgdCgnc2VsZWN0ZWRGb2xkZXInKSlcbiAgICAgICAgICAgICAgICAuYWRkQnV0dG9uKGJ1dHRvbiA9PiBidXR0b25cbiAgICAgICAgICAgICAgICAgICAgLnNldEJ1dHRvblRleHQodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2VsZWN0ZWRGb2xkZXIgfHwgdCgnQ2hvb3NlIGZvbGRlcicpKVxuICAgICAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgRm9sZGVyU3VnZ2VzdE1vZGFsKHRoaXMucGx1Z2luLCBhc3luYyAoZm9sZGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdXBkYXRlU2V0dGluZygnc2VsZWN0ZWRGb2xkZXInLCBmb2xkZXIucGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KS5vcGVuKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNyZWF0ZVNldHRpbmcodCgnRGVmYXVsdCBzb3J0IG1ldGhvZCcpLCB0KCdDaG9vc2UgdGhlIGRlZmF1bHQgc29ydGluZyBtZXRob2QgZm9yIGNhcmRzJyksIHQoJ3NvcnRDcml0ZXJpb24nKSlcbiAgICAgICAgICAgIC5hZGREcm9wZG93bihkcm9wZG93biA9PiB7XG4gICAgICAgICAgICAgICAgZHJvcGRvd25cbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbih0KCdmaWxlTmFtZV9hc2MnKSwgdCgnRmlsZSBuYW1lIChBIHRvIFopJykpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRPcHRpb24odCgnZmlsZU5hbWVfZGVzYycpLCB0KCdGaWxlIG5hbWUgKFogdG8gQSknKSlcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbih0KCdsYXN0TW9kaWZpZWRfZGVzYycpLCB0KCdMYXN0IG1vZGlmaWVkIChuZXdlc3QgZmlyc3QpJykpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRPcHRpb24odCgnbGFzdE1vZGlmaWVkX2FzYycpLCB0KCdMYXN0IG1vZGlmaWVkIChvbGRlc3QgZmlyc3QpJykpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRPcHRpb24odCgnY3JlYXRlZF9kZXNjJyksIHQoJ0NyZWF0ZWQgKG5ld2VzdCBmaXJzdCknKSlcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbih0KCdjcmVhdGVkX2FzYycpLCB0KCdDcmVhdGVkIChvbGRlc3QgZmlyc3QpJykpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZShgJHt0aGlzLnBsdWdpbi5zZXR0aW5ncy5zb3J0Q3JpdGVyaW9ufV8ke3RoaXMucGx1Z2luLnNldHRpbmdzLnNvcnRPcmRlcn1gKVxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBbY3JpdGVyaW9uLCBvcmRlcl0gPSB2YWx1ZS5zcGxpdCgnXycpIGFzIFtTb3J0Q3JpdGVyaW9uLCAnYXNjJyB8ICdkZXNjJ107XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB1cGRhdGVTZXR0aW5nKCdzb3J0Q3JpdGVyaW9uJywgY3JpdGVyaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHVwZGF0ZVNldHRpbmcoJ3NvcnRPcmRlcicsIG9yZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBjcmVhdGVTZXR0aW5nKHQoJ0ZpeGVkIENhcmQgSGVpZ2h0JyksIHQoJ0lmIGVuYWJsZWQsIGFsbCBjYXJkcyB3aWxsIGhhdmUgdGhlIHNhbWUgaGVpZ2h0LiBJZiBkaXNhYmxlZCwgY2FyZCBoZWlnaHQgd2lsbCBhZGp1c3QgdG8gY29udGVudC4nKSwgdCgnZml4ZWRDYXJkSGVpZ2h0JykpXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZml4ZWRDYXJkSGVpZ2h0KVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdXBkYXRlU2V0dGluZygnZml4ZWRDYXJkSGVpZ2h0JywgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICBjcmVhdGVTZXR0aW5nKHQoJ1JlbmRlciBDb250ZW50IGFzIEhUTUwnKSwgdCgnSWYgZW5hYmxlZCwgY2FyZCBjb250ZW50IHdpbGwgYmUgcmVuZGVyZWQgYXMgSFRNTCcpLCB0KCdyZW5kZXJDb250ZW50QXNIdG1sJykpXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucmVuZGVyQ29udGVudEFzSHRtbClcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHVwZGF0ZVNldHRpbmcoJ3JlbmRlckNvbnRlbnRBc0h0bWwnLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIGNyZWF0ZVNldHRpbmcodCgnQ2VudGVyIEFjdGl2ZSBDYXJkIG9uIE9wZW4nKSwgdCgnQXV0b21hdGljYWxseSBjZW50ZXIgdGhlIGFjdGl2ZSBjYXJkIHdoZW4gb3BlbmluZyB0aGUgQ2FyZCBOYXZpZ2F0b3InKSwgdCgnY2VudGVyQWN0aXZlQ2FyZE9uT3BlbicpKVxuXHRcdC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxuXHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmNlbnRlckFjdGl2ZUNhcmRPbk9wZW4pXG5cdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmNlbnRlckFjdGl2ZUNhcmRPbk9wZW4gPSB2YWx1ZTtcblx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHR9KSk7XG5cbiAgICAgICAgY3JlYXRlU2V0dGluZyh0KCdEcmFnIGFuZCBEcm9wIENvbnRlbnQnKSwgdCgnV2hlbiBlbmFibGVkLCBkcmFnZ2luZyBhIGNhcmQgd2lsbCBpbnNlcnQgdGhlIG5vdGUgY29udGVudCBpbnN0ZWFkIG9mIGEgbGluay4nKSwgdCgnZHJhZ0Ryb3BDb250ZW50JykpXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZHJhZ0Ryb3BDb250ZW50KVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdXBkYXRlU2V0dGluZygnZHJhZ0Ryb3BDb250ZW50JywgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDMnLCB7IHRleHQ6IHQoJ0Rpc3BsYXkgaXRlbXMgU2V0dGluZ3MnKSB9KTtcblxuICAgICAgICBjb25zdCBkaXNwbGF5U2V0dGluZ3MgPSBbXG4gICAgICAgICAgICB7IG5hbWU6IHQoJ1Nob3cgRmlsZSBOYW1lJyksIGtleTogJ3Nob3dGaWxlTmFtZScgfSxcbiAgICAgICAgICAgIHsgbmFtZTogdCgnU2hvdyBGaXJzdCBIZWFkZXInKSwga2V5OiAnc2hvd0ZpcnN0SGVhZGVyJyB9LFxuICAgICAgICAgICAgeyBuYW1lOiB0KCdTaG93IENvbnRlbnQnKSwga2V5OiAnc2hvd0NvbnRlbnQnIH0sXG4gICAgICAgIF0gYXMgY29uc3Q7XG5cbiAgICAgICAgZGlzcGxheVNldHRpbmdzLmZvckVhY2goKHsgbmFtZSwga2V5IH0pID0+IHtcbiAgICAgICAgICAgIGNyZWF0ZVNldHRpbmcobmFtZSwgdChgVG9nZ2xlIHRvIGRpc3BsYXkgb3IgaGlkZSB0aGUgJHtuYW1lLnRvTG93ZXJDYXNlKCl9IG9uIGNhcmRzYCksIGtleSlcbiAgICAgICAgICAgICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzW2tleV0pXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHVwZGF0ZVNldHRpbmcoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgZm9udFNpemVTZXR0aW5ncyA9IFtcbiAgICAgICAgICAgIHsgbmFtZTogdCgnRmlsZSBOYW1lIFNpemUnKSwga2V5OiAnZmlsZU5hbWVTaXplJywgbWluOiAxNSwgbWF4OiAyNSB9LFxuICAgICAgICAgICAgeyBuYW1lOiB0KCdGaXJzdCBIZWFkZXIgU2l6ZScpLCBrZXk6ICdmaXJzdEhlYWRlclNpemUnLCBtaW46IDE1LCBtYXg6IDI1IH0sXG4gICAgICAgICAgICB7IG5hbWU6IHQoJ0NvbnRlbnQgU2l6ZScpLCBrZXk6ICdjb250ZW50U2l6ZScsIG1pbjogMTAsIG1heDogMjAgfSxcbiAgICAgICAgXSBhcyBjb25zdDtcblxuICAgICAgICBmb250U2l6ZVNldHRpbmdzLmZvckVhY2goKHsgbmFtZSwga2V5LCBtaW4sIG1heCB9KSA9PiB7XG4gICAgICAgICAgICBjcmVhdGVTZXR0aW5nKG5hbWUsIHQoYFNldCB0aGUgZm9udCBzaXplIGZvciB0aGUgJHtuYW1lLnRvTG93ZXJDYXNlKCl9YCksIGtleSlcbiAgICAgICAgICAgICAgICAuYWRkU2xpZGVyKHNsaWRlciA9PiBzbGlkZXJcbiAgICAgICAgICAgICAgICAgICAgLnNldExpbWl0cyhtaW4sIG1heCwgMSlcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzW2tleV0pXG4gICAgICAgICAgICAgICAgICAgIC5zZXREeW5hbWljVG9vbHRpcCgpXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHVwZGF0ZVNldHRpbmcoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY3JlYXRlU2V0dGluZyh0KCdDb250ZW50IExlbmd0aCcpLCB0KCdNYXhpbXVtIGNvbnRlbnQgbGVuZ3RoIGRpc3BsYXllZCBvbiBlYWNoIGNhcmQnKSwgdCgnY29udGVudExlbmd0aCcpKVxuICAgICAgICAgICAgLmFkZFNsaWRlcihzbGlkZXIgPT4gc2xpZGVyXG4gICAgICAgICAgICAgICAgLnNldExpbWl0cygxLCAxMCwgMSlcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuY29udGVudExlbmd0aClcbiAgICAgICAgICAgICAgICAuc2V0RHluYW1pY1Rvb2x0aXAoKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdXBkYXRlU2V0dGluZygnY29udGVudExlbmd0aCcsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgfVxufVxuIiwgIi8vIHNyYy9jb21tb24vc2V0dGluZ3MudHNcblxuaW1wb3J0IHsgQ2FyZE5hdmlnYXRvclNldHRpbmdzLCBTb3J0Q3JpdGVyaW9uIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1NFVFRJTkdTOiBDYXJkTmF2aWdhdG9yU2V0dGluZ3MgPSB7XG4gICAgY2FyZHNQZXJWaWV3OiA2LFxuXHR1c2VTZWxlY3RlZEZvbGRlcjogZmFsc2UsXG4gICAgc2VsZWN0ZWRGb2xkZXI6IG51bGwsXG5cdHNvcnRDcml0ZXJpb246ICdmaWxlTmFtZScgYXMgU29ydENyaXRlcmlvbixcbiAgICBzb3J0T3JkZXI6ICdhc2MnIGFzICdhc2MnIHwgJ2Rlc2MnLFxuXHRmaXhlZENhcmRIZWlnaHQ6IHRydWUsXG5cdHJlbmRlckNvbnRlbnRBc0h0bWw6IGZhbHNlLFxuXHRjZW50ZXJBY3RpdmVDYXJkT25PcGVuOiB0cnVlLFxuXHRjZW50ZXJDYXJkTWV0aG9kOiAnc2Nyb2xsJyxcblx0YW5pbWF0aW9uRHVyYXRpb246IDMwMCxcblx0Y2VudGVyQWN0aXZlQ2FyZEhvdGtleTogeyBtb2RpZmllcnM6IFtcIkN0cmxcIiwgXCJNb2RcIl0sIGtleTogXCJIb21lXCIgfSxcblx0YWN0aXZlQ2FyZEJvcmRlckNvbG9yOiAndmFyKC0tYWN0aXZlLWJvcmRlci1jb2xvciknLFxuICAgIGFjdGl2ZUNhcmRCYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS1hY3RpdmUtYmFja2dyb3VuZC1jb2xvciknLFxuXHRkcmFnRHJvcENvbnRlbnQ6IGZhbHNlLFxuICAgIHNob3dGaWxlTmFtZTogdHJ1ZSxcbiAgICBmaWxlTmFtZVNpemU6IDIwLFxuICAgIHNob3dGaXJzdEhlYWRlcjogdHJ1ZSxcbiAgICBmaXJzdEhlYWRlclNpemU6IDE4LFxuICAgIHNob3dDb250ZW50OiB0cnVlLFxuICAgIGNvbnRlbnRTaXplOiAxNSxcbiAgICBjb250ZW50TGVuZ3RoOiA1LFxufVxuIiwgIntcblx0XCJDYXJkcyBwZXIgdmlld1wiOiBcIkNhcmRzIHBlciB2aWV3XCIsXG5cdFwiTnVtYmVyIG9mIGNhcmRzIHRvIGRpc3BsYXkgYXQgb25jZVwiOiBcIk51bWJlciBvZiBjYXJkcyB0byBkaXNwbGF5IGF0IG9uY2VcIixcblx0XCJGb2xkZXIgU2VsZWN0aW9uXCI6IFwiRm9sZGVyIFNlbGVjdGlvblwiLFxuXHRcIkNob29zZSB3aGV0aGVyIHRvIHVzZSB0aGUgYWN0aXZlIGZpbGUncyBmb2xkZXIgb3IgYSBzZWxlY3RlZCBmb2xkZXJcIjogXCJDaG9vc2Ugd2hldGhlciB0byB1c2UgdGhlIGFjdGl2ZSBmaWxlJ3MgZm9sZGVyIG9yIGEgc2VsZWN0ZWQgZm9sZGVyXCIsXG5cdFwiQWN0aXZlIEZpbGUncyBGb2xkZXJcIjogXCJBY3RpdmUgRmlsZSdzIEZvbGRlclwiLFxuXHRcIlNlbGVjdGVkIEZvbGRlclwiOiBcIlNlbGVjdGVkIEZvbGRlclwiLFxuXHRcIlNlbGVjdCBGb2xkZXJcIjogXCJTZWxlY3QgRm9sZGVyXCIsXG5cdFwiQ2hvb3NlIGEgZm9sZGVyIGZvciBDYXJkIE5hdmlnYXRvclwiOiBcIkNob29zZSBhIGZvbGRlciBmb3IgQ2FyZCBOYXZpZ2F0b3JcIixcblx0XCJDaG9vc2UgZm9sZGVyXCI6IFwiQ2hvb3NlIGZvbGRlclwiLFxuXHRcIkRlZmF1bHQgc29ydCBtZXRob2RcIjogXCJEZWZhdWx0IHNvcnQgbWV0aG9kXCIsXG5cdFwiQ2hvb3NlIHRoZSBkZWZhdWx0IHNvcnRpbmcgbWV0aG9kIGZvciBjYXJkc1wiOiBcIkNob29zZSB0aGUgZGVmYXVsdCBzb3J0aW5nIG1ldGhvZCBmb3IgY2FyZHNcIixcblx0XCJGaWxlIG5hbWUgKEEgdG8gWilcIjogXCJGaWxlIG5hbWUgKEEgdG8gWilcIixcblx0XCJGaWxlIG5hbWUgKFogdG8gQSlcIjogXCJGaWxlIG5hbWUgKFogdG8gQSlcIixcblx0XCJMYXN0IG1vZGlmaWVkIChuZXdlc3QgZmlyc3QpXCI6IFwiTGFzdCBtb2RpZmllZCAobmV3ZXN0IGZpcnN0KVwiLFxuXHRcIkxhc3QgbW9kaWZpZWQgKG9sZGVzdCBmaXJzdClcIjogXCJMYXN0IG1vZGlmaWVkIChvbGRlc3QgZmlyc3QpXCIsXG5cdFwiQ3JlYXRlZCAobmV3ZXN0IGZpcnN0KVwiOiBcIkNyZWF0ZWQgKG5ld2VzdCBmaXJzdClcIixcblx0XCJDcmVhdGVkIChvbGRlc3QgZmlyc3QpXCI6IFwiQ3JlYXRlZCAob2xkZXN0IGZpcnN0KVwiLFxuXHRcIkZpeGVkIENhcmQgSGVpZ2h0XCI6IFwiRml4ZWQgQ2FyZCBIZWlnaHRcIixcblx0XCJJZiBlbmFibGVkLCBhbGwgY2FyZHMgd2lsbCBoYXZlIHRoZSBzYW1lIGhlaWdodC4gSWYgZGlzYWJsZWQsIGNhcmQgaGVpZ2h0IHdpbGwgYWRqdXN0IHRvIGNvbnRlbnQuXCI6IFwiSWYgZW5hYmxlZCwgYWxsIGNhcmRzIHdpbGwgaGF2ZSB0aGUgc2FtZSBoZWlnaHQuIElmIGRpc2FibGVkLCBjYXJkIGhlaWdodCB3aWxsIGFkanVzdCB0byBjb250ZW50LlwiLFxuXHRcIlJlbmRlciBDb250ZW50IGFzIEhUTUxcIjogXCJSZW5kZXIgQ29udGVudCBhcyBIVE1MXCIsXG5cdFwiSWYgZW5hYmxlZCwgY2FyZCBjb250ZW50IHdpbGwgYmUgcmVuZGVyZWQgYXMgSFRNTFwiOiBcIklmIGVuYWJsZWQsIGNhcmQgY29udGVudCB3aWxsIGJlIHJlbmRlcmVkIGFzIEhUTUxcIixcblx0XCJDZW50ZXIgQWN0aXZlIENhcmQgb24gT3BlblwiOiBcIkNlbnRlciBBY3RpdmUgQ2FyZCBvbiBPcGVuXCIsXG5cdFwiQXV0b21hdGljYWxseSBjZW50ZXIgdGhlIGFjdGl2ZSBjYXJkIHdoZW4gb3BlbmluZyB0aGUgQ2FyZCBOYXZpZ2F0b3JcIjogXCJBdXRvbWF0aWNhbGx5IGNlbnRlciB0aGUgYWN0aXZlIGNhcmQgd2hlbiBvcGVuaW5nIHRoZSBDYXJkIE5hdmlnYXRvclwiLFxuXHRcIkRyYWcgYW5kIERyb3AgQ29udGVudFwiOiBcIkRyYWcgYW5kIERyb3AgQ29udGVudFwiLFxuXHRcIldoZW4gZW5hYmxlZCwgZHJhZ2dpbmcgYSBjYXJkIHdpbGwgaW5zZXJ0IHRoZSBub3RlIGNvbnRlbnQgaW5zdGVhZCBvZiBhIGxpbmsuXCI6IFwiV2hlbiBlbmFibGVkLCBkcmFnZ2luZyBhIGNhcmQgd2lsbCBpbnNlcnQgdGhlIG5vdGUgY29udGVudCBpbnN0ZWFkIG9mIGEgbGluay5cIixcblx0XCJEaXNwbGF5IGl0ZW1zIFNldHRpbmdzXCI6IFwiRGlzcGxheSBpdGVtcyBTZXR0aW5nc1wiLFxuXHRcIlNob3cgRmlsZSBOYW1lXCI6IFwiU2hvdyBGaWxlIE5hbWVcIixcblx0XCJTaG93IEZpcnN0IEhlYWRlclwiOiBcIlNob3cgRmlyc3QgSGVhZGVyXCIsXG5cdFwiU2hvdyBDb250ZW50XCI6IFwiU2hvdyBDb250ZW50XCIsXG5cdFwiVG9nZ2xlIHRvIGRpc3BsYXkgb3IgaGlkZSB0aGUgZmlsZSBuYW1lIG9uIGNhcmRzXCI6IFwiVG9nZ2xlIHRvIGRpc3BsYXkgb3IgaGlkZSB0aGUgZmlsZSBuYW1lIG9uIGNhcmRzXCIsXG5cdFwiVG9nZ2xlIHRvIGRpc3BsYXkgb3IgaGlkZSB0aGUgZmlyc3QgaGVhZGVyIG9uIGNhcmRzXCI6IFwiVG9nZ2xlIHRvIGRpc3BsYXkgb3IgaGlkZSB0aGUgZmlyc3QgaGVhZGVyIG9uIGNhcmRzXCIsXG5cdFwiVG9nZ2xlIHRvIGRpc3BsYXkgb3IgaGlkZSB0aGUgY29udGVudCBvbiBjYXJkc1wiOiBcIlRvZ2dsZSB0byBkaXNwbGF5IG9yIGhpZGUgdGhlIGNvbnRlbnQgb24gY2FyZHNcIixcblx0XCJGaWxlIE5hbWUgU2l6ZVwiOiBcIkZpbGUgTmFtZSBTaXplXCIsXG5cdFwiRmlyc3QgSGVhZGVyIFNpemVcIjogXCJGaXJzdCBIZWFkZXIgU2l6ZVwiLFxuXHRcIkNvbnRlbnQgU2l6ZVwiOiBcIkNvbnRlbnQgU2l6ZVwiLFxuXHRcIlNldCB0aGUgZm9udCBzaXplIGZvciB0aGUgZmlsZSBuYW1lXCI6IFwiU2V0IHRoZSBmb250IHNpemUgZm9yIHRoZSBmaWxlIG5hbWVcIixcblx0XCJTZXQgdGhlIGZvbnQgc2l6ZSBmb3IgdGhlIGZpcnN0IGhlYWRlclwiOiBcIlNldCB0aGUgZm9udCBzaXplIGZvciB0aGUgZmlyc3QgaGVhZGVyXCIsXG5cdFwiU2V0IHRoZSBmb250IHNpemUgZm9yIHRoZSBjb250ZW50XCI6IFwiU2V0IHRoZSBmb250IHNpemUgZm9yIHRoZSBjb250ZW50XCIsXG5cdFwiQ29udGVudCBMZW5ndGhcIjogXCJDb250ZW50IExlbmd0aFwiLFxuXHRcIk1heGltdW0gY29udGVudCBsZW5ndGggZGlzcGxheWVkIG9uIGVhY2ggY2FyZFwiOiBcIk1heGltdW0gY29udGVudCBsZW5ndGggZGlzcGxheWVkIG9uIGVhY2ggY2FyZFwiXG59XG4iLCAie1xuICAgIFwiQ2FyZHMgcGVyIHZpZXdcIjogXCJcdUQ2NTRcdUJBNzRcdUIyRjkgXHVDRTc0XHVCNERDIFx1QzIxOFwiLFxuICAgIFwiTnVtYmVyIG9mIGNhcmRzIHRvIGRpc3BsYXkgYXQgb25jZVwiOiBcIlx1RDU1QyBcdUJDODhcdUM1RDAgXHVENDVDXHVDMkRDXHVENTYwIFx1Q0U3NFx1QjREQyBcdUMyMThcIixcbiAgICBcIkZvbGRlciBTZWxlY3Rpb25cIjogXCJcdUQzRjRcdUIzNTQgXHVDMTIwXHVEMEREXCIsXG4gICAgXCJDaG9vc2Ugd2hldGhlciB0byB1c2UgdGhlIGFjdGl2ZSBmaWxlJ3MgZm9sZGVyIG9yIGEgc2VsZWN0ZWQgZm9sZGVyXCI6IFwiXHVENjVDXHVDMTMxIFx1RDMwQ1x1Qzc3Q1x1Qzc1OCBcdUQzRjRcdUIzNTQgXHVCNjEwXHVCMjk0IFx1QzEyMFx1RDBERFx1RDU1QyBcdUQzRjRcdUIzNTQgXHVDOTExIFx1QzBBQ1x1QzZBOVx1RDU2MCBcdUQzRjRcdUIzNTQgXHVDMTIwXHVEMEREXCIsXG4gICAgXCJBY3RpdmUgRmlsZSdzIEZvbGRlclwiOiBcIlx1RDY1Q1x1QzEzMSBcdUQzMENcdUM3N0NcdUM3NTggXHVEM0Y0XHVCMzU0XCIsXG4gICAgXCJTZWxlY3RlZCBGb2xkZXJcIjogXCJcdUMxMjBcdUQwRERcdUQ1NUMgXHVEM0Y0XHVCMzU0XCIsXG4gICAgXCJTZWxlY3QgRm9sZGVyXCI6IFwiXHVEM0Y0XHVCMzU0IFx1QzEyMFx1RDBERFwiLFxuICAgIFwiQ2hvb3NlIGEgZm9sZGVyIGZvciBDYXJkIE5hdmlnYXRvclwiOiBcIkNhcmQgTmF2aWdhdG9yXHVDNkE5IFx1RDNGNFx1QjM1NCBcdUMxMjBcdUQwRERcIixcbiAgICBcIkNob29zZSBmb2xkZXJcIjogXCJcdUQzRjRcdUIzNTQgXHVDMTIwXHVEMEREXCIsXG4gICAgXCJEZWZhdWx0IHNvcnQgbWV0aG9kXCI6IFwiXHVBRTMwXHVCQ0Y4IFx1QzgxNVx1QjgyQyBcdUJDMjlcdUMyRERcIixcbiAgICBcIkNob29zZSB0aGUgZGVmYXVsdCBzb3J0aW5nIG1ldGhvZCBmb3IgY2FyZHNcIjogXCJcdUNFNzRcdUI0RENcdUM3NTggXHVBRTMwXHVCQ0Y4IFx1QzgxNVx1QjgyQyBcdUJDMjlcdUMyREQgXHVDMTIwXHVEMEREXCIsXG4gICAgXCJGaWxlIG5hbWUgKEEgdG8gWilcIjogXCJcdUQzMENcdUM3N0NcdUJBODUgKFx1QUMwMFx1QjA5OFx1QjJFNFx1QzIxQylcIixcbiAgICBcIkZpbGUgbmFtZSAoWiB0byBBKVwiOiBcIlx1RDMwQ1x1Qzc3Q1x1QkE4NSAoXHVDNUVEXHVBQzAwXHVCMDk4XHVCMkU0XHVDMjFDKVwiLFxuICAgIFwiTGFzdCBtb2RpZmllZCAobmV3ZXN0IGZpcnN0KVwiOiBcIlx1Q0Q1Q1x1Qzg4NSBcdUMyMThcdUM4MTVcdUM3N0MgKFx1Q0Q1Q1x1QzJFMFx1QzIxQylcIixcbiAgICBcIkxhc3QgbW9kaWZpZWQgKG9sZGVzdCBmaXJzdClcIjogXCJcdUNENUNcdUM4ODUgXHVDMjE4XHVDODE1XHVDNzdDIChcdUM2MjRcdUI3OThcdUI0MUMgXHVDMjFDKVwiLFxuICAgIFwiQ3JlYXRlZCAobmV3ZXN0IGZpcnN0KVwiOiBcIlx1QzBERFx1QzEzMVx1Qzc3QyAoXHVDRDVDXHVDMkUwXHVDMjFDKVwiLFxuICAgIFwiQ3JlYXRlZCAob2xkZXN0IGZpcnN0KVwiOiBcIlx1QzBERFx1QzEzMVx1Qzc3QyAoXHVDNjI0XHVCNzk4XHVCNDFDIFx1QzIxQylcIixcbiAgICBcIkZpeGVkIENhcmQgSGVpZ2h0XCI6IFwiXHVBQ0UwXHVDODE1IFx1Q0U3NFx1QjREQyBcdUIxOTJcdUM3NzRcIixcbiAgICBcIklmIGVuYWJsZWQsIGFsbCBjYXJkcyB3aWxsIGhhdmUgdGhlIHNhbWUgaGVpZ2h0LiBJZiBkaXNhYmxlZCwgY2FyZCBoZWlnaHQgd2lsbCBhZGp1c3QgdG8gY29udGVudC5cIjogXCJcdUQ2NUNcdUMxMzFcdUQ2NTRcdUQ1NThcdUJBNzQgXHVCQUE4XHVCNEUwIFx1Q0U3NFx1QjREQ1x1Qzc1OCBcdUIxOTJcdUM3NzRcdUFDMDAgXHVCM0Q5XHVDNzdDXHVENTY5XHVCMkM4XHVCMkU0LiBcdUJFNDRcdUQ2NUNcdUMxMzFcdUQ2NTRcdUQ1NThcdUJBNzQgXHVDRTc0XHVCNERDIFx1QjE5Mlx1Qzc3NFx1QUMwMCBcdUIwQjRcdUM2QTlcdUM1RDAgXHVCOURFXHVBQzhDIFx1Qzg3MFx1QzgxNVx1QjQyOVx1QjJDOFx1QjJFNC5cIixcbiAgICBcIlJlbmRlciBDb250ZW50IGFzIEhUTUxcIjogXCJcdUIwQjRcdUM2QTlcdUM3NDQgSFRNTFx1Qjg1QyBcdUI4MENcdUIzNTRcdUI5QzFcIixcbiAgICBcIklmIGVuYWJsZWQsIGNhcmQgY29udGVudCB3aWxsIGJlIHJlbmRlcmVkIGFzIEhUTUxcIjogXCJcdUQ2NUNcdUMxMzFcdUQ2NTRcdUQ1NThcdUJBNzQgXHVDRTc0XHVCNERDIFx1QjBCNFx1QzZBOVx1Qzc3NCBIVE1MXHVCODVDIFx1QjgwQ1x1QjM1NFx1QjlDMVx1QjQyOVx1QjJDOFx1QjJFNFwiLFxuICAgIFwiQ2VudGVyIEFjdGl2ZSBDYXJkIG9uIE9wZW5cIjogXCJcdUM1RjQgXHVCNTRDIFx1RDY1Q1x1QzEzMSBcdUNFNzRcdUI0REMgXHVDOTExXHVDNTU5IFx1QzgxNVx1QjgyQ1wiLFxuICAgIFwiQXV0b21hdGljYWxseSBjZW50ZXIgdGhlIGFjdGl2ZSBjYXJkIHdoZW4gb3BlbmluZyB0aGUgQ2FyZCBOYXZpZ2F0b3JcIjogXCJDYXJkIE5hdmlnYXRvclx1Qjk3QyBcdUM1RjQgXHVCNTRDIFx1RDY1Q1x1QzEzMSBcdUNFNzRcdUI0RENcdUI5N0MgXHVDNzkwXHVCM0Q5XHVDNzNDXHVCODVDIFx1QzkxMVx1QzU1OVx1QzVEMCBcdUM3MDRcdUNFNThcdUMyRENcdUQwQjVcdUIyQzhcdUIyRTRcIixcbiAgICBcIkRyYWcgYW5kIERyb3AgQ29udGVudFwiOiBcIlx1QjBCNFx1QzZBOSBcdUI0RENcdUI3OThcdUFERjggXHVDNTY0IFx1QjREQ1x1Qjg2RFwiLFxuICAgIFwiV2hlbiBlbmFibGVkLCBkcmFnZ2luZyBhIGNhcmQgd2lsbCBpbnNlcnQgdGhlIG5vdGUgY29udGVudCBpbnN0ZWFkIG9mIGEgbGluay5cIjogXCJcdUQ2NUNcdUMxMzFcdUQ2NTRcdUQ1NThcdUJBNzQgXHVDRTc0XHVCNERDXHVCOTdDIFx1QjREQ1x1Qjc5OFx1QURGOFx1RDU2MCBcdUI1NEMgXHVCOUMxXHVEMDZDIFx1QjMwMFx1QzJFMCBcdUIxNzhcdUQyQjggXHVCMEI0XHVDNkE5XHVDNzc0IFx1QzBCRFx1Qzc4NVx1QjQyOVx1QjJDOFx1QjJFNC5cIixcbiAgICBcIkRpc3BsYXkgaXRlbXMgU2V0dGluZ3NcIjogXCJcdUQ0NUNcdUMyREMgXHVENTZEXHVCQUE5IFx1QzEyNFx1QzgxNVwiLFxuICAgIFwiU2hvdyBGaWxlIE5hbWVcIjogXCJcdUQzMENcdUM3N0NcdUJBODUgXHVENDVDXHVDMkRDXCIsXG4gICAgXCJTaG93IEZpcnN0IEhlYWRlclwiOiBcIlx1Q0NBQiBcdUJDODhcdUM5RjggXHVENUU0XHVCMzU0IFx1RDQ1Q1x1QzJEQ1wiLFxuICAgIFwiU2hvdyBDb250ZW50XCI6IFwiXHVCMEI0XHVDNkE5IFx1RDQ1Q1x1QzJEQ1wiLFxuICAgIFwiVG9nZ2xlIHRvIGRpc3BsYXkgb3IgaGlkZSB0aGUgZmlsZSBuYW1lIG9uIGNhcmRzXCI6IFwiXHVDRTc0XHVCNERDXHVDNUQwIFx1RDMwQ1x1Qzc3Q1x1QkE4NVx1Qzc0NCBcdUQ0NUNcdUMyRENcdUQ1NThcdUFDNzBcdUIwOTggXHVDMjI4XHVBRTMwXHVCMjk0IFx1RDFBMFx1QUUwMFwiLFxuICAgIFwiVG9nZ2xlIHRvIGRpc3BsYXkgb3IgaGlkZSB0aGUgZmlyc3QgaGVhZGVyIG9uIGNhcmRzXCI6IFwiXHVDRTc0XHVCNERDXHVDNUQwIFx1Q0NBQiBcdUJDODhcdUM5RjggXHVENUU0XHVCMzU0XHVCOTdDIFx1RDQ1Q1x1QzJEQ1x1RDU1OFx1QUM3MFx1QjA5OCBcdUMyMjhcdUFFMzBcdUIyOTQgXHVEMUEwXHVBRTAwXCIsXG4gICAgXCJUb2dnbGUgdG8gZGlzcGxheSBvciBoaWRlIHRoZSBjb250ZW50IG9uIGNhcmRzXCI6IFwiXHVDRTc0XHVCNERDXHVDNUQwIFx1QjBCNFx1QzZBOVx1Qzc0NCBcdUQ0NUNcdUMyRENcdUQ1NThcdUFDNzBcdUIwOTggXHVDMjI4XHVBRTMwXHVCMjk0IFx1RDFBMFx1QUUwMFwiLFxuICAgIFwiRmlsZSBOYW1lIFNpemVcIjogXCJcdUQzMENcdUM3N0NcdUJBODUgXHVEMDZDXHVBRTMwXCIsXG4gICAgXCJGaXJzdCBIZWFkZXIgU2l6ZVwiOiBcIlx1Q0NBQiBcdUJDODhcdUM5RjggXHVENUU0XHVCMzU0IFx1RDA2Q1x1QUUzMFwiLFxuICAgIFwiQ29udGVudCBTaXplXCI6IFwiXHVCMEI0XHVDNkE5IFx1RDA2Q1x1QUUzMFwiLFxuICAgIFwiU2V0IHRoZSBmb250IHNpemUgZm9yIHRoZSBmaWxlIG5hbWVcIjogXCJcdUQzMENcdUM3N0NcdUJBODVcdUM3NTggXHVBRTAwXHVBRjM0IFx1RDA2Q1x1QUUzMCBcdUMxMjRcdUM4MTVcIixcbiAgICBcIlNldCB0aGUgZm9udCBzaXplIGZvciB0aGUgZmlyc3QgaGVhZGVyXCI6IFwiXHVDQ0FCIFx1QkM4OFx1QzlGOCBcdUQ1RTRcdUIzNTRcdUM3NTggXHVBRTAwXHVBRjM0IFx1RDA2Q1x1QUUzMCBcdUMxMjRcdUM4MTVcIixcbiAgICBcIlNldCB0aGUgZm9udCBzaXplIGZvciB0aGUgY29udGVudFwiOiBcIlx1QjBCNFx1QzZBOVx1Qzc1OCBcdUFFMDBcdUFGMzQgXHVEMDZDXHVBRTMwIFx1QzEyNFx1QzgxNVwiLFxuICAgIFwiQ29udGVudCBMZW5ndGhcIjogXCJcdUIwQjRcdUM2QTkgXHVBRTM4XHVDNzc0XCIsXG4gICAgXCJNYXhpbXVtIGNvbnRlbnQgbGVuZ3RoIGRpc3BsYXllZCBvbiBlYWNoIGNhcmRcIjogXCJcdUFDMDEgXHVDRTc0XHVCNERDXHVDNUQwIFx1RDQ1Q1x1QzJEQ1x1QjQxOFx1QjI5NCBcdUNENUNcdUIzMDAgXHVCMEI0XHVDNkE5IFx1QUUzOFx1Qzc3NFwiXG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQSxJQUFBQSxt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QUFDTixHQUFHO0FBQUEsRUFDRCxNQUFNLENBQUMsSUFBSTtBQUFBLEVBQ1gsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUU7QUFBQSxFQUNoQixJQUFJO0FBQ04sR0FBRztBQUFBLEVBQ0QsTUFBTSxDQUFDLElBQUk7QUFBQSxFQUNYLElBQUksQ0FBQyxHQUFHLENBQUM7QUFBQSxFQUNULElBQUk7QUFDTixHQUFHO0FBQUEsRUFDRCxNQUFNLENBQUMsSUFBSTtBQUFBLEVBQ1gsSUFBSSxDQUFDLEdBQUcsQ0FBQztBQUFBLEVBQ1QsSUFBSTtBQUNOLEdBQUc7QUFBQSxFQUNELE1BQU0sQ0FBQyxJQUFJO0FBQUEsRUFDWCxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUFBLEVBQ2YsSUFBSTtBQUNOLEdBQUc7QUFBQSxFQUNELE1BQU0sQ0FBQyxJQUFJO0FBQUEsRUFDWCxJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUU7QUFBQSxFQUNiLElBQUk7QUFDTixHQUFHO0FBQUEsRUFDRCxNQUFNLENBQUMsSUFBSTtBQUFBLEVBQ1gsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQUEsRUFDWixJQUFJO0FBQ04sR0FBRztBQUFBLEVBQ0QsTUFBTSxDQUFDLElBQUk7QUFBQSxFQUNYLElBQUksQ0FBQyxHQUFHLENBQUM7QUFBQSxFQUNULElBQUk7QUFDTixHQUFHO0FBQUEsRUFDRCxNQUFNLENBQUMsS0FBSztBQUFBLEVBQ1osSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQUEsRUFDWixJQUFJO0FBQ04sR0FBRztBQUFBLEVBQ0QsTUFBTSxDQUFDLElBQUk7QUFBQSxFQUNYLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxFQUFFO0FBQUEsRUFDakIsSUFBSTtBQUNOLEdBQUc7QUFBQSxFQUNELE1BQU0sQ0FBQyxJQUFJO0FBQUEsRUFDWCxJQUFJLENBQUMsR0FBRyxDQUFDO0FBQUEsRUFDVCxJQUFJO0FBQ04sR0FBRztBQUFBLEVBQ0QsTUFBTSxDQUFDLElBQUk7QUFBQSxFQUNYLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRTtBQUFBLEVBQ2IsSUFBSTtBQUNOLEdBQUc7QUFBQSxFQUNELE1BQU0sQ0FBQyxJQUFJO0FBQUEsRUFDWCxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUFBLEVBQ2YsSUFBSTtBQUNOLEdBQUc7QUFBQSxFQUNELE1BQU0sQ0FBQyxNQUFNLElBQUk7QUFBQSxFQUNqQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksRUFBRTtBQUFBLEVBQ2pCLElBQUk7QUFDTixDQUFDO0FBQ0QsSUFBSSxxQkFBcUI7QUFBQSxFQUN2QixHQUFHLE9BQUssT0FBTyxJQUFJLENBQUM7QUFBQSxFQUNwQixHQUFHLE9BQUssT0FBTyxLQUFLLENBQUM7QUFBQSxFQUNyQixHQUFHLE9BQUs7QUFBQSxFQUNSLEdBQUcsT0FBSyxPQUFPLElBQUksTUFBTSxLQUFLLElBQUksT0FBTyxLQUFLLElBQUksSUFBSSxNQUFNLEtBQUssSUFBSSxNQUFNLE1BQU0sSUFBSSxNQUFNLE1BQU0sSUFBSSxPQUFPLE1BQU0sSUFBSSxDQUFDO0FBQUEsRUFDdkgsR0FBRyxPQUFLLE9BQU8sS0FBSyxJQUFJLElBQUksS0FBSyxJQUFJLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxPQUFPLEtBQUssSUFBSSxPQUFPLEtBQUssSUFBSSxJQUFJLE9BQU8sS0FBSyxJQUFJLENBQUM7QUFBQSxFQUMvRyxHQUFHLE9BQUssT0FBTyxLQUFLLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxJQUFJLElBQUksQ0FBQztBQUFBLEVBQ3BELEdBQUcsT0FBSyxPQUFPLEtBQUssSUFBSSxJQUFJLElBQUksTUFBTSxLQUFLLElBQUksTUFBTSxNQUFNLElBQUksTUFBTSxNQUFNLElBQUksT0FBTyxNQUFNLElBQUksQ0FBQztBQUFBLEVBQ2pHLEdBQUcsT0FBSyxPQUFPLEtBQUssSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLEtBQUssS0FBSyxLQUFLLEtBQUssSUFBSSxDQUFDO0FBQUEsRUFDbEUsR0FBRyxPQUFLLE9BQU8sS0FBSyxDQUFDO0FBQUEsRUFDckIsSUFBSSxPQUFLLE9BQU8sS0FBSyxJQUFJLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLElBQUksQ0FBQztBQUFBLEVBQ3BFLElBQUksT0FBSyxPQUFPLEtBQUssS0FBSyxLQUFLLEtBQUssSUFBSSxLQUFLLEtBQUssS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLENBQUM7QUFBQSxFQUN2RixJQUFJLE9BQUssT0FBTyxJQUFJLE1BQU0sS0FBSyxJQUFJLE9BQU8sRUFBRTtBQUFBLEVBQzVDLElBQUksT0FBSyxPQUFPLE1BQU0sQ0FBQztBQUFBLEVBQ3ZCLElBQUksT0FBSyxPQUFPLEtBQUssSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUM7QUFBQSxFQUN4RCxJQUFJLE9BQUssT0FBTyxJQUFJLE1BQU0sS0FBSyxJQUFJLE9BQU8sS0FBSyxJQUFJLElBQUksTUFBTSxNQUFNLElBQUksTUFBTSxNQUFNLElBQUksT0FBTyxNQUFNLElBQUksQ0FBQztBQUFBLEVBQ3pHLElBQUksT0FBSyxPQUFPLElBQUksTUFBTSxLQUFLLElBQUksT0FBTyxLQUFLLElBQUksTUFBTSxJQUFJLElBQUksQ0FBQztBQUFBLEVBQ2xFLElBQUksT0FBSyxPQUFPLEtBQUssS0FBSyxJQUFJLE1BQU0sS0FBSyxJQUFJLE9BQU8sS0FBSyxJQUFJLENBQUM7QUFBQSxFQUM5RCxJQUFJLE9BQUssT0FBTyxLQUFLLElBQUksSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDO0FBQUEsRUFDM0MsSUFBSSxPQUFLLE9BQU8sS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLElBQUksTUFBTSxLQUFLLElBQUksTUFBTSxLQUFLLElBQUksSUFBSSxNQUFNLE1BQU0sSUFBSSxNQUFNLEtBQUssSUFBSSxDQUFDO0FBQUEsRUFDN0csSUFBSSxPQUFLLE9BQU8sS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLElBQUksTUFBTSxLQUFLLElBQUks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SyxJQUFJLFVBQVUsZ0JBQWdCLHdCQUF3QixFQUFFLENBQUMsTUFBOUQsbUJBQWlFO0FBQzlFLFFBQUksTUFBTTtBQUNOLFdBQUssY0FBYyxVQUFVLFdBQVcsS0FBSztBQUFBLElBQ2pEO0FBQUEsRUFDSjtBQUFBLEVBRUEsTUFBTSxlQUFlO0FBQ2pCLFVBQU0sRUFBRSxVQUFVLElBQUksS0FBSztBQUMzQixRQUFJLE9BQU8sVUFBVSxnQkFBZ0Isd0JBQXdCLEVBQUUsQ0FBQztBQUVoRSxRQUFJLENBQUMsTUFBTTtBQUNQLFlBQU0sWUFBWSxVQUFVLGFBQWEsS0FBSztBQUM5QyxVQUFJLFdBQVc7QUFDWCxjQUFNLFVBQVUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLFFBQVEsS0FBSyxDQUFDO0FBQzdFLGVBQU8sVUFBVSxnQkFBZ0Isd0JBQXdCLEVBQUUsQ0FBQztBQUFBLE1BQ2hFO0FBQUEsSUFDSjtBQUVBLFFBQUksTUFBTTtBQUNOLGdCQUFVLFdBQVcsSUFBSTtBQUFBLElBQzdCO0FBQUEsRUFDSjtBQUFBLEVBRUEsaUJBQWlCO0FBQ2IsU0FBSyxpQkFBaUI7QUFBQSxFQUMxQjtBQUNKOyIsCiAgIm5hbWVzIjogWyJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJ0IiwgIm1vZHVsZSIsICJjb3B5IiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIl0KfQo=

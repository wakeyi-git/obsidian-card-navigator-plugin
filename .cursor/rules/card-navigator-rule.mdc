---
description: Card Navigator Plugin Design & Folder Structure
globs: 
alwaysApply: false
---
## Cursor Rules for Card Navigator

### 1. Overview
Card Navigator is an Obsidian plugin supporting both folder-based and tag-based note classification. It provides customizable card views, search, sorting and presets.

### 2. Obsidian Integration Principles
#### 2.1 Maximizing Obsidian API Usage
- Extend core classes: `Plugin`, `PluginSettingTab`, `ItemView`
- Utilize APIs: `Workspace`, `MetadataCache`, `Vault`
- Use UI components: `Notice`, `Modal`, `Menu`
- Optimize event handling for performance

#### 2.2 Maintaining UI/UX Consistency
- Follow Obsidian’s design patterns
- Use Obsidian’s CSS variables for light/dark mode support
- Integrate with Obsidian’s i18n system

#### 2.3 Performance Optimization
- **Rendering Optimization:** Implement virtual scrolling (`react-window`) for smooth card rendering
- **Event Optimization:** Minimize redundant event listener registrations
- **Data Caching:** Reduce unnecessary API calls and file access

### 3. Context Expansion and Reduction in Card Sets
Card Navigator’s folder/tag cardset, search, and sorting functions can be understood in terms of expanding and reducing the context of card sets. These features help users dynamically adjust the scope of their information based on their navigation needs.

#### Folder CardSset & Tag CardSset: Structural vs. Semantic Context Expansion

Folder and tag CardSsets define the primary context of a card set, determining the boundaries of the displayed notes.

##### Folder CardSset: Structural Context (Hierarchy-Based Expansion)

Folder cardset relies on a physical hierarchy to organize notes, meaning context expansion and reduction follow the folder structure.
	•	Context Expansion: Enabling the “include subfolders” option broadens the context, incorporating notes from deeper folder structures.
	•	Context Reduction: Selecting a specific subfolder without including subfolders narrows the context, restricting the card set to a smaller, more focused selection.

##### Tag CardSset: Semantic Context (Meaning-Based Expansion)

Tag cardset groups notes based on semantic meaning rather than physical structure.
	•	Context Expansion: Selecting multiple tags includes all notes associated with those tags, expanding the contextual scope.
	•	Context Reduction: Using AND logic for multiple tags limits the card set to notes containing all selected tags, narrowing the context to a more specific subset.

✅ Folder cardset follows physical boundaries, while tag cardset follows semantic boundaries for context expansion and reduction.

#### Search: Instantaneous Context Expansion and Reduction

The search function dynamically reconstructs card sets based on keywords, momentarily expanding or reducing the context.
	•	Context Expansion:
	•	Searching for a keyword across all notes extends beyond folder or tag constraints, allowing broader exploration.
	•	Example: Searching for “education” retrieves all related notes, regardless of their folder or tag placement.
	•	Context Reduction:
	•	Applying search filters (e.g., searching within a specific folder or tag) refines the scope of the card set.
	•	Using regex patterns further limits results to a highly specific subset of notes.

✅ Search allows users to override existing folder/tag contexts and dynamically adjust the card set scope.

#### Sorting: Context Reorganization Without Changing Scope

Sorting does not alter the card set’s boundaries but reorganizes meaning within the context by adjusting how cards are presented.
	•	Implicit Expansion & Reduction:
	•	Changing the sorting criteria shifts the focus within the card set.
	•	Example: Sorting by “last modified date” highlights recently updated notes, shifting emphasis toward temporal recency.
	•	Sorting alphabetically weakens semantic clustering, reducing contextual relevance between notes.
	•	Fine-Tuning Context:
	•	Adjusting ascending/descending order modifies the priority of displayed information.
	•	Example: Sorting by “creation date (ascending)” supports retrospective analysis, whereas “creation date (descending)” emphasizes recent ideas.

✅ Sorting does not redefine the context but restructures meaning and priority within the existing card set.

#### Overall Flow: Organic Context Expansion and Reduction

Folder cardset, tag cardset, search, and sorting interact dynamically based on the user’s navigation process.

##### Context Expansion Flow:
	1.	Broaden folder/tag range → Include subfolders / Select multiple tags
	2.	Use search to add relevant notes → Expand meaning-based exploration
	3.	Adjust sorting for semantic grouping → Highlight newer, older, or prioritized notes

#### Context Reduction Flow:
	1.	Limit folder/tag range → Select a specific folder/tag
	2.	Apply refined search filters → Restrict by metadata (e.g., date, properties)
	3.	Use sorting for finer adjustments → Change emphasis within the card set

#### Conclusion

Card Navigator’s core functions serve as tools for context expansion and reduction, allowing users to tailor their note exploration experience.
	•	Folder/Tag CardSset: Establishes the primary context based on structure (folder) or meaning (tag).
	•	Search: Overrides existing contexts for dynamic and flexible exploration.
	•	Sorting: Adjusts emphasis within a given context without altering its scope.

By combining these functions, users can organize, explore, and restructure their knowledge base in ways that align with their cognitive processes, making the card navigation experience more intuitive and meaningful.

### 4. Plugin Features
#### 4.1 General
- Display ribbon menu
- Activate view in the side panel

#### 4.2 Cards
- **Customization:**
  - Header, body, footer customization (e.g., filename, first header, body, tags, date, properties)
- **Rendering Options:**
  - Plain text
  - Markdown rendering (HTML conversion, images, code blocks, callouts, formulas)
- **Style Customization:**
  - General, active, and focused card styles (background, font size, borders)
  - Header, body, and footer styles

#### 4.3 CardSset
- **Folder CardSset:**
  - Show notes in the active folder or a specified folder (with subfolder inclusion option)
- **Tag CardSset:**
  - Show notes containing active file tags or specified tags
- **Search CardSset:**
  - Automatically activate upon entering a search query

#### 4.4 Search
- **Real-time Filtering:** Immediate results while typing
- **Search Options:** Path, filename, tags, line, section, properties, date (creation/update)
- **Regex Support:** Advanced search capabilities
- **Highlighting:** Matching keywords within cards
- **Search History Tracking**
- **Keyboard Support:**
  - Shortcut for search bar focus
  - Navigate search suggestions via keyboard
  - Clear search query shortcut

#### 4.5 Sorting
- Sort by filename, creation date, update date, custom front matter value
- Ascending/descending order toggle

#### 4.6 Layout
- **Grid Mode:** Fixed height, supports horizontal/vertical modes
- **Masonry Mode:** Auto height adjustment (within threshold), vertical only
- **Threshold Settings:** Adjustable width/height
- **Scroll Direction:** Vertical or horizontal based on mode

#### 4.7 Navigation
- **Scroll & Keyboard Navigation:**
  - Center active file card
  - Highlight active file card border
  - Smooth scroll and instant display toggle
  - Global shortcut for card navigator focus
  - Arrow key navigation for card focus
  - Enter key to open a focused card

#### 4.8 Card Interactions
- **Left Click:** Open note in editor
- **Right Click:** Context menu (copy link, copy content)
- **Drag & Drop:**
  - Drag to editor to insert link/content
  - Drag between cards to create links
- **Double Click:** Edit note directly from navigator
- **Multi-Select (Shift/Ctrl + Click, Ctrl + A):** Batch actions

#### 4.9 Presets
- Save/load user-defined settings
- Create, delete, apply presets
- Auto-apply presets based on folder/tag mappings
- Priority settings for folder/tag-based presets

#### 4.10 Toolbar
- **Search Input Field**
- **Toggle Icons:**
  - **Filter Toggle:** Show pop-up for filters
  - **Sort Toggle:** Show sorting options (filename, update date, creation date, custom value)
  - **CardSset Toggle:** Folder/tag icons switch accordingly
  - **Settings Toggle:** Quick access to frequently used settings (mode change, preset management, rendering options)

### 5. Settings
#### 5.1 CardSsets
- Toggle between folder and tag CardSsets

#### 5.2 Cards
- **Content Selection:** Customize header, body, footer elements
- **Rendering Mode:** Plain text or HTML (supports images, code blocks, callouts, formulas)
- **Style Customization:**
  - Set background, font size, and border properties per card type (general, active, focused)
  - Customize header, body, and footer styles

#### 5.3 Search
- Configure filters for folder/tag modes
- Set front matter filtering options

#### 5.4 Sorting
- Define sorting criteria and order

#### 5.5 Layout
- Adjust card width/height thresholds

#### 5.6 Presets
- **Create Preset:** Save current settings
- **Preset List:** Manage presets (clone, edit, delete, export)
- **Preset Mapping:**
  - Assign presets to folders/tags
  - Adjust priority order

### 6. Card Navigator Plugin Architecture Overview
The Card Navigator plugin has been refactored into a more modular and maintainable architecture. This architecture follows the principles of separation of concerns and dependency injection, consisting of the following key layers:

#### 6.1 Domain Layer
The domain layer contains business logic and core models. This layer has no external dependencies and focuses solely on pure business logic.
- Key Components:
  - Models: Core data structures such as ICard, ICardList, IPreset
  - Interfaces: Definitions like ICardManager, ICardInteractionHandler
  - Events: Event-related elements like EventType, DomainEventBus
- Subdirectories:
  - card/: Card-related models and interfaces
  - cardlist/: Card list models and interfaces
  - cardset/: Card set models and interfaces
  - preset/: Preset models and interfaces
  - events/: Event types and event bus
  - interaction/: User interaction interfaces
  - search/: Search-related models and interfaces
  - obsidian/: Obsidian API abstraction interfaces

#### 6.2 Service Layer
The service layer acts as an intermediary between the domain and UI layers, handling application logic. This layer manipulates domain objects and provides functionality needed by the UI layer.
- Key Components:
  - CardService: Handles card-related business logic
  - SearchService: Provides search functionality
  - PresetService: Manages preset functionality
  - CardInteractionService: Processes card interactions
  - ObsidianAdapter: Manages interactions with the Obsidian API
- Characteristics:
  - Creates and manipulates domain objects
  - Communicates with the UI layer through event-based communication
  - Enhances testability through dependency injection

#### 6.3 UI Component Layer
The UI component layer is responsible for the user interface. This layer accesses domain objects through the service layer and handles user input.
- Key Components:
  - CardNavigatorView: Main view component
  - SearchView: Search UI component
  - CardView: Individual card UI component
  - CardListView: Card list UI component
- Characteristics:
  - Depends on the service layer
  - Receives domain events through event listeners
  - Converts user input into events for the service layer

#### 6.4 Event-Based Communication
This architecture uses event-based communication to reduce coupling between components and increase flexibility.
- Key Components:
  - DomainEventBus: Provides event publishing and subscription mechanism
  - EventType: Defines various event types
  - EventDataMap: Maps event types to their respective data types
- Event Flow Example:
  - User clicks a card → UI component publishes CARD_SELECT_REQUESTED event
  - CardService receives event → processes card selection → publishes CARD_SELECTED event
  - UI component receives CARD_SELECTED event → updates UI

#### 6.5 Dependency Injection
This architecture uses the dependency injection pattern to reduce coupling between components and enhance testability.
- Key Characteristics:
  - Dependency injection through constructors
  - Loose coupling through interfaces
  - Dependency graph constructed in the main plugin class

### 7. Technology Stack
	•	Language: TypeScript
	•	UI Library: React
	•	Virtual Scrolling: react-window (for efficient rendering of a large number of cards)
	•	Internationalization: i18next
	•	Build Tool: esbuild

### 8. Architectural Characteristics
	•	Clean Architecture: The project follows a layered architecture, ensuring clear separation of concerns between domain, application, infrastructure, and UI layers.
	•	Dependency Injection: Uses dependency injection patterns to enable loose coupling, improving testability and maintainability.
	•	Event-Driven Communication: Implements an event manager to facilitate communication between components, reducing module coupling.
	•	Caching Mechanisms: Implements caching to optimize performance by minimizing redundant computations.
	•	Responsive UI: Utilizes React to provide a dynamic and responsive card-based interface.
	•	Settings Management: Separates user settings management into dedicated classes and UI components.

This document establishes clear rules for implementing the Card Navigator plugin while maintaining Obsidian's principles, performance, and UI/UX consistency.


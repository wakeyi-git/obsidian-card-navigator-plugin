## Cursor Rules for Card Navigator

### 1. Overview
Card Navigator is an Obsidian plugin supporting both folder-based and tag-based note classification. It provides customizable card views, search, sorting and presets.

### 2. Obsidian Integration Principles
#### 2.1 Maximizing Obsidian API Usage
- Extend core classes: `Plugin`, `PluginSettingTab`, `ItemView`
- Utilize APIs: `Workspace`, `MetadataCache`, `Vault`
- Use UI components: `Notice`, `Modal`, `Menu`
- Optimize event handling for performance

#### 2.2 Maintaining UI/UX Consistency
- Follow Obsidian's design patterns
- Use Obsidian's CSS variables for light/dark mode support
- Integrate with Obsidian's i18n system

#### 2.3 Performance Optimization
- **Rendering Optimization:** Implement virtual scrolling (`react-window`) for smooth card rendering
- **Event Optimization:** Minimize redundant event listener registrations
- **Data Caching:** Reduce unnecessary API calls and file access

### 3. Context Expansion and Reduction in Card Sets
Card Navigator's folder/tag cardset, search, and sorting functions can be understood in terms of expanding and reducing the context of card sets. These features help users dynamically adjust the scope of their information based on their navigation needs.

#### Folder CardSset & Tag CardSset: Structural vs. Semantic Context Expansion

Folder and tag CardSsets define the primary context of a card set, determining the boundaries of the displayed notes.

##### Folder CardSset: Structural Context (Hierarchy-Based Expansion)

Folder cardset relies on a physical hierarchy to organize notes, meaning context expansion and reduction follow the folder structure.
	•	Context Expansion: Enabling the "include subfolders" option broadens the context, incorporating notes from deeper folder structures.
	•	Context Reduction: Selecting a specific subfolder without including subfolders narrows the context, restricting the card set to a smaller, more focused selection.

##### Tag CardSset: Semantic Context (Meaning-Based Expansion)

Tag cardset groups notes based on semantic meaning rather than physical structure.
	•	Context Expansion: Selecting multiple tags includes all notes associated with those tags, expanding the contextual scope.
	•	Context Reduction: Using AND logic for multiple tags limits the card set to notes containing all selected tags, narrowing the context to a more specific subset.

✅ Folder cardset follows physical boundaries, while tag cardset follows semantic boundaries for context expansion and reduction.

#### Search: Instantaneous Context Expansion and Reduction

The search function dynamically reconstructs card sets based on keywords, momentarily expanding or reducing the context.
	•	Context Expansion:
	•	Searching for a keyword across all notes extends beyond folder or tag constraints, allowing broader exploration.
	•	Example: Searching for "education" retrieves all related notes, regardless of their folder or tag placement.
	•	Context Reduction:
	•	Applying search filters (e.g., searching within a specific folder or tag) refines the scope of the card set.
	•	Using regex patterns further limits results to a highly specific subset of notes.

✅ Search allows users to override existing folder/tag contexts and dynamically adjust the card set scope.

#### Sorting: Context Reorganization Without Changing Scope

Sorting does not alter the card set's boundaries but reorganizes meaning within the context by adjusting how cards are presented.
	•	Implicit Expansion & Reduction:
	•	Changing the sorting criteria shifts the focus within the card set.
	•	Example: Sorting by "last modified date" highlights recently updated notes, shifting emphasis toward temporal recency.
	•	Sorting alphabetically weakens semantic clustering, reducing contextual relevance between notes.
	•	Fine-Tuning Context:
	•	Adjusting ascending/descending order modifies the priority of displayed information.
	•	Example: Sorting by "creation date (ascending)" supports retrospective analysis, whereas "creation date (descending)" emphasizes recent ideas.

✅ Sorting does not redefine the context but restructures meaning and priority within the existing card set.

#### Overall Flow: Organic Context Expansion and Reduction

Folder cardset, tag cardset, search, and sorting interact dynamically based on the user's navigation process.

##### Context Expansion Flow:
	1.	Broaden folder/tag range → Include subfolders / Select multiple tags
	2.	Use search to add relevant notes → Expand meaning-based exploration
	3.	Adjust sorting for semantic grouping → Highlight newer, older, or prioritized notes

#### Context Reduction Flow:
	1.	Limit folder/tag range → Select a specific folder/tag
	2.	Apply refined search filters → Restrict by metadata (e.g., date, properties)
	3.	Use sorting for finer adjustments → Change emphasis within the card set

#### Conclusion

Card Navigator's core functions serve as tools for context expansion and reduction, allowing users to tailor their note exploration experience.
	•	Folder/Tag CardSset: Establishes the primary context based on structure (folder) or meaning (tag).
	•	Search: Overrides existing contexts for dynamic and flexible exploration.
	•	Sorting: Adjusts emphasis within a given context without altering its scope.

By combining these functions, users can organize, explore, and restructure their knowledge base in ways that align with their cognitive processes, making the card navigation experience more intuitive and meaningful.

### 4. Plugin Features
#### 4.1 General
- Display ribbon menu
- Activate view in the side panel

#### 4.2 Cards
- **Customization:**
  - Header, body, footer customization (e.g., filename, first header, body, tags, date, properties)
- **Rendering Options:**
  - Plain text
  - Markdown rendering (HTML conversion, images, code blocks, callouts, formulas)
- **Style Customization:**
  - General, active, and focused card styles (background, font size, borders)
  - Header, body, and footer styles

#### 4.3 CardSset
- **Folder CardSset:**
  - Show notes in the active folder or a specified folder (with subfolder inclusion option)
- **Tag CardSset:**
  - Show notes containing active file tags or specified tags
- **Search CardSset:**
  - Automatically activate upon entering a search query

#### 4.4 Search
- **Real-time Filtering:** Immediate results while typing
- **Search Options:** Path, filename, tags, line, section, properties, date (creation/update)
- **Regex Support:** Advanced search capabilities
- **Highlighting:** Matching keywords within cards
- **Search History Tracking**
- **Keyboard Support:**
  - Shortcut for search bar focus
  - Navigate search suggestions via keyboard
  - Clear search query shortcut

#### 4.5 Sorting
- Sort by filename, creation date, update date, custom front matter value
- Ascending/descending order toggle

#### 4.6 Layout
- **Grid Mode:** Fixed height, supports horizontal/vertical modes
- **Masonry Mode:** Auto height adjustment (within threshold), vertical only
- **Threshold Settings:** Adjustable width/height
- **Scroll Direction:** Vertical or horizontal based on mode

#### 4.7 Navigation
- **Scroll & Keyboard Navigation:**
  - Center active file card
  - Highlight active file card border
  - Smooth scroll and instant display toggle
  - Global shortcut for card navigator focus
  - Arrow key navigation for card focus
  - Enter key to open a focused card

#### 4.8 Card Interactions
- **Left Click:** Open note in editor
- **Right Click:** Context menu (copy link, copy content)
- **Drag & Drop:**
  - Drag to editor to insert link/content
  - Drag between cards to create links
- **Double Click:** Edit note directly from navigator
- **Multi-Select (Shift/Ctrl + Click, Ctrl + A):** Batch actions

#### 4.9 Presets
- Save/load user-defined settings
- Create, delete, apply presets
- Auto-apply presets based on folder/tag mappings
- Priority settings for folder/tag-based presets

#### 4.10 Toolbar
- **Search Input Field**
- **Toggle Icons:**
  - **Filter Toggle:** Show pop-up for filters
  - **Sort Toggle:** Show sorting options (filename, update date, creation date, custom value)
  - **CardSset Toggle:** Folder/tag icons switch accordingly
  - **Settings Toggle:** Quick access to frequently used settings (mode change, preset management, rendering options)

### 5. Settings
#### 5.1 CardSsets
- Toggle between folder and tag CardSsets

#### 5.2 Cards
- **Content Selection:** Customize header, body, footer elements
- **Rendering Mode:** Plain text or HTML (supports images, code blocks, callouts, formulas)
- **Style Customization:**
  - Set background, font size, and border properties per card type (general, active, focused)
  - Customize header, body, and footer styles

#### 5.3 Search
- Configure filters for folder/tag modes
- Set front matter filtering options

#### 5.4 Sorting
- Define sorting criteria and order

#### 5.5 Layout
- Adjust card width/height thresholds

#### 5.6 Presets
- **Create Preset:** Save current settings
- **Preset List:** Manage presets (clone, edit, delete, export)
- **Preset Mapping:**
  - Assign presets to folders/tags
  - Adjust priority order

### 6. Card Navigator Plugin Architecture Overview
The Card Navigator plugin has been refactored into a more modular and maintainable architecture. This architecture follows the principles of separation of concerns and dependency injection, consisting of the following key layers:

#### 6.1 Domain Layer
The domain layer contains business logic and core models. This layer has no external dependencies and focuses solely on pure business logic.
- Key Components:
  - Models: Core data structures such as ICard, ICardList, IPreset
  - Interfaces: Definitions like ICardManager, ICardInteractionHandler
  - Events: Event-related elements like EventType, DomainEventBus
- Subdirectories:
  - card/: Card-related models and interfaces
  - cardlist/: Card list models and interfaces
  - cardset/: Card set models and interfaces
  - preset/: Preset models and interfaces
  - events/: Event types and event bus
  - interaction/: User interaction interfaces
  - search/: Search-related models and interfaces
  - obsidian/: Obsidian API abstraction interfaces

#### 6.2 Service Layer
The service layer acts as an intermediary between the domain and UI layers, handling application logic. This layer manipulates domain objects and provides functionality needed by the UI layer.
- Key Components:
  - CardService: Handles card-related business logic
  - SearchService: Provides search functionality
  - PresetService: Manages preset functionality
  - CardInteractionService: Processes card interactions
  - ObsidianAdapter: Manages interactions with the Obsidian API
- Characteristics:
  - Creates and manipulates domain objects
  - Communicates with the UI layer through event-based communication
  - Enhances testability through dependency injection

#### 6.3 UI Component Layer
The UI component layer is responsible for the user interface. This layer accesses domain objects through the service layer and handles user input.
- Key Components:
  - CardNavigatorView: Main view component
  - SearchView: Search UI component
  - CardView: Individual card UI component
  - CardListView: Card list UI component
- Characteristics:
  - Depends on the service layer
  - Receives domain events through event listeners
  - Converts user input into events for the service layer

#### 6.4 Event-Based Communication
This architecture uses event-based communication to reduce coupling between components and increase flexibility.
- Key Components:
  - DomainEventBus: Provides event publishing and subscription mechanism
  - EventType: Defines various event types
  - EventDataMap: Maps event types to their respective data types
- Event Flow Example:
  - User clicks a card → UI component publishes CARD_SELECT_REQUESTED event
  - CardService receives event → processes card selection → publishes CARD_SELECTED event
  - UI component receives CARD_SELECTED event → updates UI

#### 6.5 Dependency Injection
This architecture uses the dependency injection pattern to reduce coupling between components and enhance testability.
- Key Characteristics:
  - Dependency injection through constructors
  - Loose coupling through interfaces
  - Dependency graph constructed in the main plugin class

### 7. Technology Stack
	•	Language: TypeScript
	•	UI Library: React
	•	Virtual Scrolling: react-window (for efficient rendering of a large number of cards)
	•	Internationalization: i18next
	•	Build Tool: esbuild

### 8. Architectural Characteristics
	•	Clean Architecture: The project follows a layered architecture, ensuring clear separation of concerns between domain, application, infrastructure, and UI layers.
	•	Dependency Injection: Uses dependency injection patterns to enable loose coupling, improving testability and maintainability.
	•	Event-Driven Communication: Implements an event manager to facilitate communication between components, reducing module coupling.
	•	Caching Mechanisms: Implements caching to optimize performance by minimizing redundant computations.
	•	Responsive UI: Utilizes React to provide a dynamic and responsive card-based interface.
	•	Settings Management: Separates user settings management into dedicated classes and UI components.

### 9. 파일 구조 및 일관성 유지 가이드
이 섹션은 여러 세션에 걸쳐 개발할 때 일관성을 유지하기 위한 가이드라인을 제공합니다.

#### 9.1 폴더 구조 및 파일 배치
카드 네비게이터 플러그인은 다음과 같은 폴더 구조를 따릅니다:

```
src/
├── main.ts                     # 플러그인 진입점
├── core/                       # 핵심 유틸리티 및 공통 기능
│   └── events/                 # 이벤트 관련 클래스
├── domain/                     # 도메인 모델 및 인터페이스
│   ├── card/                   # 카드 관련 모델
│   ├── cardset/                # 카드셋 관련 모델
│   ├── events/                 # 이벤트 타입 정의
│   ├── interaction/            # 상호작용 관련 모델
│   ├── navigation/             # 내비게이션 관련 모델
│   ├── search/                 # 검색 관련 모델
│   ├── settings/               # 설정 관련 모델
│   └── toolbar/                # 툴바 관련 모델
├── application/                # 애플리케이션 서비스
│   ├── card/                   # 카드 관련 서비스
│   ├── cardset/                # 카드셋 관련 서비스
│   ├── interaction/            # 상호작용 관련 서비스
│   ├── layout/                 # 레이아웃 관련 서비스
│   ├── navigation/             # 내비게이션 관련 서비스
│   ├── preset/                 # 프리셋 관련 서비스
│   ├── search/                 # 검색 관련 서비스
│   ├── settings/               # 설정 관련 서비스
│   ├── sorting/                # 정렬 관련 서비스
│   └── toolbar/                # 툴바 관련 서비스
├── infrastructure/             # 외부 시스템 연동
│   ├── obsidian/               # 옵시디언 API 연동
│   │   ├── adapters/           # 옵시디언 어댑터
│   │   └── services/           # 옵시디언 관련 서비스
│   └── storage/                # 저장소 관련 기능
└── ui/                         # 사용자 인터페이스
    ├── components/             # UI 컴포넌트
    │   ├── card/               # 카드 관련 컴포넌트
    │   ├── cardset/            # 카드셋 관련 컴포넌트
    │   ├── layout/             # 레이아웃 관련 컴포넌트
    │   ├── navigation/         # 내비게이션 관련 컴포넌트
    │   ├── popup/              # 팝업 관련 컴포넌트
    │   ├── search/             # 검색 관련 컴포넌트
    │   ├── settings/           # 설정 관련 컴포넌트
    │   └── toolbar/            # 툴바 관련 컴포넌트
    └── views/                  # 뷰 컴포넌트
        ├── cardNavigator/      # 카드 네비게이터 뷰
        └── settings/           # 설정 뷰
```

#### 9.2 파일 명명 규칙
- **클래스 파일**: PascalCase 사용 (예: `CardService.ts`, `SearchComponent.ts`)
- **인터페이스 파일**: 인터페이스만 포함하는 경우 PascalCase 사용 (예: `CardInterfaces.ts`)
- **유틸리티 파일**: camelCase 사용 (예: `domUtils.ts`, `stringHelpers.ts`)
- **상수 파일**: PascalCase 사용 (예: `EventTypes.ts`, `DefaultSettings.ts`)

#### 9.3 스타일 관리 방식
카드 네비게이터 플러그인은 다음과 같은 스타일 관리 방식을 사용합니다:

##### 9.3.1 CSS 파일을 통한 스타일 정의
- **기본 스타일**: `styles.css`에 정의
- **컴포넌트별 스타일**: 각 컴포넌트 폴더에 CSS 파일로 정의 (예: `card.css`, `layout.css`)
- **CSS 변수 활용**: 테마 및 사용자 설정에 따른 스타일 변경을 위해 CSS 변수 사용

##### 9.3.2 자바스크립트를 통한 스타일 적용
- **동적 스타일**: `CardStyleService`를 통해 사용자 설정에 따른 스타일 관리
- **상태별 스타일**: 활성, 포커스 등 상태에 따른 스타일 변경은 자바스크립트로 처리
- **CSS 변수 설정**: `element.style.setProperty()`를 사용하여 CSS 변수 설정

##### 9.3.3 스타일 관리 원칙
1. **정적 스타일은 CSS 파일에 정의**
   - 레이아웃 구조, 기본 컴포넌트 스타일, 반응형 디자인, 애니메이션 등
2. **동적 스타일은 자바스크립트로 적용**
   - 사용자 설정에 따른 스타일, 상태 변화에 따른 스타일, 런타임에 계산되는 스타일 등
3. **CSS 변수 활용**
   - 테마 및 사용자 설정에 따른 스타일 변경을 위해 CSS 변수 사용
   - 자바스크립트에서 CSS 변수 설정을 통해 스타일 변경

#### 9.4 컴포넌트 구조 및 생명주기
모든 UI 컴포넌트는 다음과 같은 구조와 생명주기를 따릅니다:

1. **생성자**: 의존성 주입 및 초기화
2. **render**: 컴포넌트 렌더링
3. **update**: 컴포넌트 업데이트
4. **remove/cleanup**: 컴포넌트 제거 및 정리

```typescript
export class SomeComponent {
  // 의존성 주입
  constructor(private someService: ISomeService) {
    // 초기화
  }
  
  // 렌더링
  render(container: HTMLElement): void {
    // 컴포넌트 렌더링
  }
  
  // 업데이트
  update(): void {
    // 컴포넌트 업데이트
  }
  
  // 제거 및 정리
  remove(): void {
    // 컴포넌트 제거 및 정리
  }
}
```

#### 9.5 서비스 구조 및 생명주기
모든 서비스는 다음과 같은 구조와 생명주기를 따릅니다:

1. **생성자**: 의존성 주입 및 초기화
2. **초기화 메서드**: 서비스 초기화 (필요한 경우)
3. **비즈니스 로직 메서드**: 서비스의 주요 기능 제공
4. **정리 메서드**: 서비스 정리 및 리소스 해제

```typescript
export class SomeService implements ISomeService {
  // 의존성 주입
  constructor(
    private settingsService: ISettingsService,
    private eventBus: DomainEventBus
  ) {
    // 초기화
    this.initialize();
  }
  
  // 초기화
  private initialize(): void {
    // 서비스 초기화
    this.registerEventListeners();
  }
  
  // 이벤트 리스너 등록
  private registerEventListeners(): void {
    // 이벤트 리스너 등록
  }
  
  // 비즈니스 로직
  public someBusinessLogic(): void {
    // 비즈니스 로직 구현
  }
  
  // 정리
  public cleanup(): void {
    // 서비스 정리 및 리소스 해제
  }
}
```

#### 9.6 이벤트 기반 통신
컴포넌트 간 통신은 이벤트 기반으로 이루어집니다:

1. **이벤트 정의**: `EventType` 열거형에 이벤트 타입 정의
2. **이벤트 발행**: `eventBus.emit(EventType.SOME_EVENT, data)`
3. **이벤트 구독**: `eventBus.on(EventType.SOME_EVENT, handler)`

```typescript
// 이벤트 정의
export enum EventType {
  SOME_EVENT = 'some-event'
}

// 이벤트 발행
this.eventBus.emit(EventType.SOME_EVENT, { someData: 'value' });

// 이벤트 구독
this.eventBus.on(EventType.SOME_EVENT, (data) => {
  // 이벤트 처리
});
```

#### 9.7 의존성 주입
의존성 주입은 생성자를 통해 이루어집니다:

```typescript
export class SomeService {
  constructor(
    private dependencyA: IDependencyA,
    private dependencyB: IDependencyB
  ) {
    // 초기화
  }
}
```

#### 9.8 설정 관리
설정은 `SettingsService`를 통해 관리됩니다:

1. **설정 가져오기**: `settingsService.getSettings()`
2. **설정 업데이트**: `settingsService.updateSettings(newSettings)`
3. **설정 저장**: `settingsService.saveSettings()`

```typescript
// 설정 가져오기
const settings = this.settingsService.getSettings();

// 설정 업데이트
await this.settingsService.updateSettings({ someOption: 'value' });

// 설정 저장
await this.settingsService.saveSettings();
```

이 문서는 카드 네비게이터 플러그인의 구현 규칙을 확립하여 옵시디언의 원칙, 성능 및 UI/UX 일관성을 유지하는 데 도움이 됩니다. 

### 10. 카드 내비게이터 주요 개념 및 흐름
이 섹션은 카드 내비게이터의 핵심 개념과 사용자 흐름을 설명합니다. 이 내용은 개발 과정에서 일관된 이해와 구현을 위한 기준이 됩니다.

#### 10.1 핵심 개념 정의
- **카드 셋(CardSet)**: 뷰에 표시할 카드들의 집합으로, 순서를 고려하지 않은 상태입니다.
- **카드 목록(CardList)**: 카드 셋에 정렬 기준과 순서를 적용하여 순서대로 나열한 목록입니다.
- **활성 파일(Active File)**: 옵시디언 편집창에 현재 열려있는 노트 파일입니다.
- **활성 카드(Active Card)**: 활성 파일에 해당하는 카드입니다.
- **활성 폴더(Active Folder)**: 활성 파일이 속한 폴더입니다.
- **포커스드 카드(Focused Card)**: 사용자 상호작용을 위해 현재 선택된 카드입니다.

#### 10.2 사용자 흐름 개요
카드 내비게이터의 기본 사용 흐름은 다음과 같습니다:
```
모드 선택으로 카드셋 생성 → 정렬 적용 → 레이아웃으로 렌더링 → 사용자 상호작용
```

#### 10.3 카드 셋 생성 프로세스
카드 셋은 다음 세 가지 모드 중 하나를 통해 생성됩니다:

##### 10.3.1 폴더 모드
폴더를 기준으로 카드 셋을 생성합니다.
- **활성 폴더 기준**: 활성 폴더의 노트로 카드 셋 생성. 다른 폴더의 파일을 열면 활성 폴더가 변경되어 카드 셋도 자동 변경됩니다.
- **지정 폴더 기준**: 사용자가 지정한 특정 폴더의 노트로 카드 셋 생성.
- **하위 폴더 포함 옵션**: 활성화 시 선택된 폴더의 모든 하위 폴더 내 노트도 포함합니다.

##### 10.3.2 태그 모드
태그를 기준으로 카드 셋을 생성합니다.
- **활성 태그 기준**: 활성 파일의 태그 중 하나라도 포함하는 모든 노트를 카드 셋으로 생성.
- **지정 태그 기준**: 사용자가 지정한 특정 태그를 포함하는 모든 노트로 카드 셋 생성.
- **AND/OR 로직**: 여러 태그 선택 시 모든 태그를 포함(AND)하거나 하나라도 포함(OR)하는 노트를 선택할 수 있습니다.

##### 10.3.3 검색 모드
검색어 입력 필드에 커서가 위치하면 자동으로 전환되며, 검색 범위와 컨텍스트로 필터링하여 새로운 카드 셋을 생성합니다.
- **검색 범위**:
  - 볼트 전체: 모든 노트를 대상으로 검색
  - 현재 카드 셋: 검색 모드 전환 직전의 카드 셋 내에서만 검색
- **검색 옵션**: 파일명, 내용, 태그, 경로, 속성 및 속성값, 생성일, 수정일 등을 기준으로 검색 가능

#### 10.4 정렬 프로세스
생성된 카드 셋에 순서를 부여하여 카드 목록을 생성합니다.
- **정렬 기준**: 파일 이름, 업데이트 날짜, 생성일, 프론트매터 속성 등
- **정렬 순서**: 오름차순(A→Z, 과거→현재) 또는 내림차순(Z→A, 현재→과거)

#### 10.5 레이아웃 렌더링
카드 목록을 화면에 시각적으로 배치하는 방법을 정의합니다.

##### 10.5.1 레이아웃 유형
- **그리드 레이아웃**: 모든 카드가 동일한 높이를 가지며 격자 형태로 배치
- **메이슨리 레이아웃**: 카드 내용에 따라 높이가 다르며 벽돌 쌓기 형태로 배치

##### 10.5.2 레이아웃 계산
- **자동 크기 조정**: 뷰포트 크기, 임계 너비, 임계 높이에 따라 카드 크기와 열/행 수 자동 결정
- **스크롤 방향**:
  - 그리드 레이아웃: 뷰포트 비율에 따라 가로 또는 세로 스크롤 자동 결정
  - 메이슨리 레이아웃: 항상 세로 방향 스크롤

#### 10.6 사용자 상호작용
사용자가 카드 내비게이터와 상호작용하는 방법을 정의합니다.

##### 10.6.1 내비게이션
- **스크롤 내비게이션**: 마우스 휠이나 스크롤바를 통한 카드 탐색
- **키보드 내비게이션**: 화살표 키를 이용한 포커스드 카드 이동
- **활성 카드 중앙 정렬**: 활성 파일의 카드를 자동으로 뷰의 중앙에 배치

##### 10.6.2 카드 상호작용
- **왼쪽 클릭**: 해당 노트를 편집기에서 열기
- **오른쪽 클릭**: 컨텍스트 메뉴 표시 (링크 복사, 내용 복사 등)
- **더블 클릭**: 내비게이터에서 직접 노트 편집
- **드래그 앤 드롭**: 
  - 편집기로 드래그: 링크나 내용 삽입
  - 카드 간 드래그: 카드 간 링크 생성
- **다중 선택**: Shift/Ctrl + 클릭 또는 Ctrl + A로 여러 카드 선택하여 일괄 작업

#### 10.7 설정 관리
사용자가 카드 내비게이터의 동작과 외관을 커스터마이즈하는 방법을 정의합니다.

##### 10.7.1 설정 접근 방식
- **설정 탭**: 옵시디언의 설정 메뉴를 통한 전체 설정 접근
- **설정 모달**: 툴바를 통한 빠른 설정 접근
- **프리셋**: 자주 사용하는 설정 조합을 저장하고 적용

##### 10.7.2 프리셋 관리
- **프리셋 생성 및 저장**: 현재 설정을 프리셋으로 저장
- **프리셋 매핑**: 특정 폴더나 태그에 프리셋 자동 적용
- **프리셋 우선순위**: 여러 프리셋이 적용 가능할 때의 우선순위 설정

#### 10.8 툴바
카드 내비게이터의 주요 기능과 설정에 빠르게 접근할 수 있는 인터페이스입니다.
- **검색 입력 필드**: 검색 모드 활성화 및 검색어 입력
- **필터 토글**: 검색 필터 옵션 표시
- **정렬 토글**: 정렬 옵션 표시
- **카드셋 토글**: 폴더/태그 모드 전환
- **설정 토글**: 자주 사용하는 설정 빠르게 접근

#### 10.9 데이터 흐름 및 상태 관리
카드 내비게이터 내부의 데이터 흐름과 상태 관리 방식을 정의합니다.

##### 10.9.1 이벤트 기반 상태 변경
- **모드 변경 이벤트**: 폴더/태그/검색 모드 전환 시 발생
- **카드셋 변경 이벤트**: 카드셋 내용이 변경될 때 발생
- **정렬 변경 이벤트**: 정렬 기준이나 순서가 변경될 때 발생
- **레이아웃 변경 이벤트**: 레이아웃 유형이나 설정이 변경될 때 발생
- **카드 상태 변경 이벤트**: 활성/포커스 상태 변경 시 발생

##### 10.9.2 상태 동기화
- **옵시디언 상태 동기화**: 활성 파일, 활성 폴더 변경 시 카드 내비게이터 상태 업데이트
- **설정 상태 동기화**: 설정 변경 시 UI 및 동작 업데이트
- **프리셋 상태 동기화**: 프리셋 적용 시 여러 설정 동시 업데이트

이 문서는 카드 내비게이터의 주요 개념과 흐름을 명확히 정의하여 개발 과정에서 일관된 이해와 구현을 돕습니다. 
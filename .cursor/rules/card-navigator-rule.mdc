---
description: Card Navigator Plugin Design & Folder Structure
globs: 
alwaysApply: false
---
Card Navigator is an Obsidian plugin that supports both folder-based and tag-based note classification methods.
It is optimized to allow users to customize card views, apply filters, sorting, searching, and presets freely.

🔗 Obsidian Integration Principles
	1.	Maximize the Use of Obsidian API
	•	Extend and inherit key classes like Plugin, PluginSettingTab, ItemView
	•	Utilize APIs such as Workspace, MetadataCache, and Vault for file and metadata access
	•	Use UI components like Notice, Modal, and Menu
	•	Leverage the event system for optimal performance
	2.	Maintain UI/UX Consistency
	•	Follow Obsidian’s design patterns and styles
	•	Utilize Obsidian’s built-in CSS variables for seamless light/dark mode support
	•	Integrate with Obsidian’s internationalization (i18n) system
	3.	Performance Optimization
	•	Rendering Optimization: Use virtual scrolling (react-window) for smooth rendering of hundreds of cards
	•	Event Optimization: Prevent unnecessary event listener registrations to minimize memory leaks
	•	Data Caching: Reduce redundant API calls and file accesses

🛠️ Key Features Overview

1️⃣ Mode Selection (Folder Mode vs Tag Mode)
	•	Folder Mode: Organize card sets based on folders, using tags as filtering options
	•	Tag Mode: Organize card sets based on tags, using folders as filtering options
	•	Priority System
	•	Folder Mode → If a priority tag is set, the tag preset takes precedence
	•	Tag Mode → If a priority folder is set, the folder preset takes precedence
	•	Instant mode switching via the toolbar

2️⃣ Card UI & Interactions
	•	Virtual Scrolling (react-window) → Performance optimization
	•	Customizable Styles (background color, font size, border, etc.)
	•	Auto Color Assignment Based on Tags (highlighting important tags)
	•	Inline Editing (edit directly within the card)

3️⃣ Sorting & Filtering
	•	Sorting Criteria:
	•	Filename, creation date, modification date, custom front matter values
	•	Filtering
	•	Folder Mode → Uses tag filtering
	•	Tag Mode → Uses folder filtering

4️⃣ Preset Management
	•	Configure folder/tag presets and apply them automatically
	•	Set priority between folder and tag presets
	•	Import/export presets

5️⃣ Search Functionality
	•	Real-time search (filters results instantly as you type)
	•	Autocomplete with search suggestions (recent search history)
	•	Supports regex search

6️⃣ Settings UI
	•	Choose default mode (folder/tag)
	•	Configure priority tags and folders manually
	•	Customize all card styles and display elements

📂 Optimized Folder Structure

card-navigator/
│── src/  
│   ├── domain/                # 🧩 Domain Layer (Core Business Logic)  
│   │   ├── mode/              # ✅ Folder Mode & Tag Mode Configuration  
│   │   ├── card/              # ✅ Card Model & Data Processing  
│   │   ├── layout/            # ✅ Card Layout Logic  
│   │   ├── sorting/           # ✅ Sorting Logic (Filename, Date, etc.)  
│   │   ├── search/            # ✅ Search Functionality  
│   │   ├── preset/            # ✅ Preset Management  
│   ├── application/           # 🚀 Application Layer (Business Logic)  
│   ├── infrastructure/        # 🏗️ Infrastructure Layer (File System, API Integration)  
│   ├── ui/                    # 🎨 UI Layer  
│   │   ├── toolbar/           # ✅ 툴바 (검색 & 버튼 그룹)  
│   │   ├── cards-container/   # ✅ 카드 UI  
│   │   ├── layout/            # ✅ 레이아웃 UI  
│   │   ├── presets/           # ✅ 프리셋 UI  
│   │   ├── settings/          # ✅ 설정 UI  
│   ├── main.ts                # 🏁 Plugin Entry Point  
│   ├── manifest.json          # 📝 Plugin Metadata  
│── assets/                     # 🎨 Icons, Localization Files  
│── tests/                      # ✅ Test Code  
│── docs/                       # 📖 Documentation  

📌 Detailed Folder Descriptions

📂 domain/ (Domain Layer - Core Logic)
	•	mode/
        •	Mode.ts → Folder Mode vs Tag Mode Configuration
        •	FolderMode.ts → Folder-based card set & filtering
        •	TagMode.ts → Tag-based card set & filtering
	•	card/
        •	Card.ts → Card Model
        •	CardFactory.ts → Card creation logic
        •	CardStyle.ts → Card style management
        •	CardContent.ts → Card content data processing
        •	CardActions.ts → Card interactions (click, drag, etc.)
	•	layout/
        •	Layout.ts → Layout Configuration
        •	MasonryLayout.ts → Masonry-style layout
        •	GridLayout.ts → Grid-style layout
	•	sorting/
        •	Sort.ts → Sorting Model
        •	SortManager.ts → Sorting Management
	•	search/
        •	Search.ts → Search Model
        •	SearchManager.ts → Search Management
        •	RegexSearch.ts → Regex-based search
	•	preset/
        •	Preset.ts → Preset Model
        •	PresetManager.ts → Preset Management
        •	applyPreset.ts → Priority Application Logic

📂 application/ (Application Layer - Business Logic)
	•	ModeService.ts → Mode switching management
	•	PresetService.ts → Preset service
	•	SortService.ts → Sorting service
	•	SearchService.ts → Search service

📂 infrastructure/ (Infrastructure Layer - API & File System)
	•	ObsidianAdapter.ts → Obsidian API Integration
	•	Storage.ts → Configuration storage and loading
	•	Cache.ts → Data caching

📂 ui/ (UI Layer - User Interface)
	•	toolbar/ → Toolbar (Search & Button Group)
	•	cards-container/ → Card UI
	•	layout/ → Layout UI
	•	presets/ → Preset UI
	•	settings/ → Settings UI

Now, strictly follow these rules and proceed with the development of Card Navigator! 🚀
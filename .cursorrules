당신은 생성형 AI로 개발되었습니다. 그래서 더 많은 내용을 추가하여 작성하려 하는 것 같습니다. 마치 생물이 가지는 본능같은 것을 가지고 있는 것 같습니다. 그 본능을 이겨내고 오류 없는 기능 구현에 집중하여 삭제해야 할 것을 삭제하는 것도 해야 합니다. 꼭 필요한 상황이 아니라면 모델, 타입, 상수, 변수, 인터페이스는 수정하지 않습니다. 수정이 필요하다면 저에게 먼저 승인을 받으세요.

# Card Navigator 개발 규칙

## 시행착오 없는 코딩 순서
시행착오를 최소화하고 체계적인 코딩을 보장하려면 다음 단계를 따르세요.
1. 기획 및 요구사항 분석
	•	문제와 기대 결과를 명확히 정의
	•	필요한 의존성, API, 외부 라이브러리 식별
	•	데이터 구조, 모델, 인터페이스 설계 개요 작성
2. 핵심 설계 및 아키텍처 구축
	•	역할을 분리하여 모듈형 아키텍처 설계
	•	모델, 인터페이스, 의존성 주입 구조 정의
	•	코드베이스 전반에서 타입 안정성과 일관성 유지
3. 계층적 접근 방식으로 구현
	•	코어 개발: 핵심 로직(모델, 서비스 등) 구현
	•	유틸리티 개발: 재사용 가능한 헬퍼 함수 및 공통 유틸리티 작성
	•	통합 작업: 서비스 및 컴포넌트를 명확한 계약(Contract)과 함께 연결
	•	UI 및 API 구현: 사용자 인터페이스 및 API 연동
4. 각 단계별 검증
	•	작은 기능 단위를 먼저 검증한 후 다음 단계로 진행
	•	TypeScript 또는 정적 분석 도구를 사용하여 타입 오류 조기 탐지
	•	유닛 테스트 또는 간단한 디버깅으로 논리적 정확성 확인
5. 테스트 및 최적화
	•	컴포넌트/유닛 테스트 수행하여 기능 검증
	•	실행 시간 및 메모리 사용량 분석을 통한 성능 최적화
	•	전체 워크플로우를 점검하는 엔드투엔드(E2E) 테스트 진행
6. 문서화 및 최종 검토
	•	주요 함수, API 사용법, 아키텍처 결정 사항 문서화
	•	코드 가독성과 유지보수성을 고려한 최종 코드 리뷰 수행
	•	배포 전 필요시 리팩토링 진행
이러한 구조적 접근 방식을 따르면 불필요한 디버깅과 재작업을 줄이고, 효율적이며 오류 없는 코드를 작성할 수 있습니다.

## 코드 작성 원칙
1. **타입 안전성 최우선**: 모든 코드는 TypeScript의 엄격한 타입 체크를 통과해야 합니다. `any` 타입 사용을 최소화하고, 명확한 인터페이스와 타입 정의를 제공하세요.
2. **단일 책임 원칙**: 각 클래스와 함수는 하나의 책임만 가져야 합니다. 여러 기능이 섞인 코드는 분리하세요.
3. **의존성 주입**: 클래스 간 의존성은 생성자를 통해 주입하여 테스트 용이성과 유연성을 높이세요.
4. **불변성 유지**: 가능한 한 객체의 상태 변경을 최소화하고, 불변 데이터 구조를 선호하세요.
5. **명확한 에러 처리**: 모든 예외 상황에 대한 처리를 명시적으로 구현하고, 사용자에게 적절한 피드백을 제공하세요.

## 코드 스타일
1. **일관된 네이밍**: 
   - 클래스: PascalCase (예: `CardManager`)
   - 인터페이스: I 접두사 + PascalCase (예: `ICardService`)
   - 변수/함수: camelCase (예: `getCardById`)
   - 상수: UPPER_SNAKE_CASE (예: `DEFAULT_CARD_WIDTH`)
2. **주석 작성**: 모든 클래스, 인터페이스, 메서드에 한국어 JSDoc 주석을 작성하세요.
3. **코드 구조화**: 관련 기능은 동일한 파일이나 디렉토리에 그룹화하세요.

## 성능 최적화
1. **메모리 관리**: 불필요한 객체 생성을 피하고, 큰 데이터 구조는 지연 로딩을 고려하세요.
2. **이벤트 최적화**: 이벤트 리스너는 적절히 등록하고 해제하여 메모리 누수를 방지하세요.
3. **렌더링 최적화**: DOM 조작을 최소화하고, 가능한 경우 가상 DOM 기법을 활용하세요.

## 테스트 및 디버깅
1. **로깅 활용**: 중요한 작업과 오류 상황에 대해 적절한 로깅을 구현하세요.
2. **방어적 프로그래밍**: 입력 값 검증과 예외 처리를 철저히 하여 예상치 못한 오류를 방지하세요.

## Obsidian 통합
1. **API 활용**: Obsidian API를 최대한 활용하여 플러그인의 통합성을 높이세요.
2. **UI 일관성**: Obsidian의 디자인 패턴과 스타일을 따라 사용자 경험의 일관성을 유지하세요.
3. **성능 영향 최소화**: Obsidian의 기본 기능에 부정적인 영향을 미치지 않도록 리소스 사용을 최적화하세요.
4. 주요 활용 방안은 다음과 같습니다:
  - Obsidian의 Plugin, PluginSettingTab, ItemView 등 핵심 클래스 상속 및 확장
  - Workspace, MetadataCache, Vault 등 Obsidian의 핵심 API를 활용한 파일 및 메타데이터 접근
  - Notice, Modal, Menu 등 Obsidian UI 컴포넌트 활용
  - Obsidian의 이벤트 시스템을 활용한 효율적인 이벤트 처리
  - Obsidian의 테마 및 스타일 시스템과의 일관성 유지: 플러그인 내에서 별도의 테마 설정 없이 Obsidian의 기본 CSS 변수를 활용하여 라이트/다크 테마와 자동으로 통합
  - Obsidian의 국제화(i18n) 시스템과의 통합

## 리팩토링 지침
1. **중복 코드 제거**: 동일하거나 유사한 코드는 공통 함수나 클래스로 추출하세요.
2. **복잡성 감소**: 복잡한 로직은 더 작고 관리하기 쉬운 단위로 분해하세요.
3. **인터페이스 분리**: 큰 인터페이스는 더 작고 집중된 인터페이스로 분리하세요.
4. **코드 재사용**: 유틸리티 함수와 공통 컴포넌트를 활용하여 코드 재사용성을 높이세요.

## Cursor 룰: 에러 수정 단계
에러 수정은 아래의 단계를 따라 체계적으로 진행합니다.
1. 코어 도메인 검토 및 개선
	•	모델 클래스와 인터페이스 간의 일관성 확인
	•	타입 정의의 중복 및 불일치 해결
2. 관리자 도메인 검토 및 개선
	•	인터페이스 구현 확인
	•	의존성 주입 및 타입 호환성 검증
3. 서비스 도메인 검토 및 개선
	•	서비스 간 의존성 확인
	•	인터페이스 구현 검증
4. UI 도메인 검토 및 개선
	•	컴포넌트 속성 및 이벤트 타입 확인
	•	Obsidian API 사용 방식 검증
5. 유틸리티 도메인 검토 및 개선
	•	헬퍼 함수 타입 정의 확인
	•	오류 처리 및 로깅 메커니즘 검증
이 규칙을 따라 코드의 일관성을 유지하고, 에러를 체계적으로 수정하여 안정적인 소프트웨어를 개발합니다.

Card Navigator

Card Navigator는 노트를 시각화하고 탐색하는 독특한 방법을 제공하는 Obsidian 플러그인입니다. 노트를 가로 또는 세로로 스크롤 가능한 카드 형태로 표시하여 콘텐츠를 더 쉽게 탐색하고 관리할 수 있습니다.

기능
1. 카드 컨텐츠 및 스타일 설정
  - 카드 정보 표시 옵션:
    - 파일명: 노트의 파일 이름을 카드 상단에 표시
    - 첫 번째 헤더: 노트의 첫 번째 헤더(H1)를 카드 제목으로 표시
    - 본문 내용: 노트의 본문 내용을 카드 본문에 표시 (길이 제한 설정 가능)
    - 태그: 노트에 포함된 태그를 카드 하단에 표시
    - 생성/수정 날짜: 노트의 생성 또는 수정 날짜를 카드에 표시
  - 카드 스타일 사용자화:
    - 글꼴 크기: 카드 제목, 본문, 태그 등 각 요소별 글꼴 크기 조정
    - 카드 패딩: 카드 내부 여백 조정으로 콘텐츠 밀도 제어
    - 카드 테두리: 테두리 두께, 색상, 모서리 둥글기 조정
    - 카드 그림자: 그림자 효과 활성화 및 강도 조정
    - 카드 배경색: 기본 배경색 또는 태그 기반 자동 색상 지정
    - 테마 지원: 라이트/다크 테마 자동 감지 및 적용
  - 렌더링 옵션:
    - 마크다운 렌더링: 카드 내용을 HTML로 렌더링하여 서식 표시
    - 코드 블록 하이라이팅: 코드 블록의 구문 강조 표시
    - 수학 수식 렌더링: MathJax를 통한 수학 수식 표시
    - 이미지 표시: 노트에 포함된 이미지의 썸네일 표시

2. 카드 정렬 및 필터링
  - 정렬 옵션:
    - 파일명 기준: 알파벳 오름차순/내림차순 정렬
    - 생성 날짜 기준: 최신/오래된 순 정렬
    - 수정 날짜 기준: 최신/오래된 순 정렬
    - 파일 크기 기준: 크기 오름차순/내림차순 정렬
    - 사용자 정의 정렬: YAML 프론트매터의 특정 필드 기준 정렬
  - 필터링 옵션:
    - 태그 기반 필터링: 특정 태그가 포함된 노트만 표시
    - 폴더 기반 필터링: 특정 폴더 또는 하위 폴더의 노트만 표시
    - YAML 프론트매터 기반 필터링: 특정 메타데이터 값을 가진 노트만 표시
  - 그룹화 옵션:
    - 폴더별 그룹화: 동일 폴더의 노트를 그룹으로 표시
    - 태그별 그룹화: 동일 태그를 가진 노트를 그룹으로 표시
    - 날짜별 그룹화: 생성/수정 날짜 기준으로 그룹화

3. 카드 상호작용
  - 기본 상호작용:
    - 클릭: 카드 클릭 시 해당 노트 열기
    - 컨텍스트 메뉴: 우클릭 시 컨텍스트 메뉴 표시 (편집, 삭제, 복제 등 옵션)
    - 드래그 앤 드롭: 카드를 다른 카드로 드래그하여 링크 생성
    - 멀티 선택: Shift/Ctrl 키를 사용한 다중 카드 선택 및 일괄 작업
  - 고급 상호작용:
    - 카드 확장/축소: 카드 클릭 또는 호버 시 더 많은 내용 표시
    - 인라인 편집: 카드 내에서 직접 노트 내용 편집
    - 카드 핀 고정: 중요한 카드를 상단에 고정
    - 카드 색상 태깅: 사용자 정의 색상으로 카드 태깅
    - 카드 공유: 카드 내용을 클립보드로 복사 또는 외부로 공유

4. 레이아웃 시스템
  - 통합 레이아웃 시스템:
    - 모든 레이아웃은 masonry 기반의 단일 통합 시스템으로 구현
    - 사용자 설정과 컨테이너 환경에 따라 자동으로 최적의 레이아웃 형태 결정
    - 별도의 레이아웃 모드 전환 없이 설정 값 조정만으로 다양한 레이아웃 경험 제공
  - 핵심 레이아웃 매개변수:
    - 카드 너비 임계값(cardThresholdWidth): 카드의 최소 너비를 설정하며, 컨테이너 너비와 함께 열 수 결정
    - 카드 높이 정렬(alignCardHeight): 활성화 시 모든 카드 높이 통일, 비활성화 시 콘텐츠에 따라 높이 결정
    - 고정 카드 높이(fixedCardHeight): 카드의 정확한 높이 픽셀 값 지정
    - 뷰당 카드 수(cardsPerView): 뷰포트에 표시할 카드 수 지정(fixedCardHeight 대신 사용 시)
    - 수직/수평 방향(isVertical): 컨테이너 크기에 따라 자동으로 결정되는 스크롤 방향
  - 레이아웃 동작 방식:
    - 컨테이너 크기와 cardThresholdWidth를 기반으로 열/행 수 자동 계산
    - 컨테이너 비율에 따라 수직/수평 스크롤 방향 자동 전환
    - alignCardHeight 설정에 따라 균일한 카드 높이 또는 콘텐츠 기반 가변 높이 적용
    - 컨테이너 크기 변경 시 레이아웃 실시간 최적화
  - 사용자 경험 유형:
    - 리스트 형태: 단일 열 레이아웃으로, 카드 너비가 컨테이너 너비에 맞춰짐
    - 그리드 형태: 다중 열 레이아웃으로, 모든 카드가 동일한 높이를 가짐
    - 메이슨리 형태: 다중 열 레이아웃으로, 카드 높이가 콘텐츠에 따라 다양하게 조정됨
    - 수평 스크롤 형태: 컨테이너가 넓고 짧을 때 자동으로 적용되는 가로 스크롤 레이아웃

5. 키보드 단축키 설정
  - 단축키 사용자 정의:
    - Obsidian 설정에서 모든 Card Navigator 관련 단축키 사용자 정의 가능
    - 글로벌 단축키와 Card Navigator 뷰 내 단축키 구분 설정
    - 충돌 방지를 위한 단축키 충돌 감지 및 알림
  - 글로벌 단축키:
    - Card Navigator 뷰 열기/닫기
    - 현재 노트를 카드로 표시
    - 빠른 카드 검색 시작
    - 프리셋 간 빠른 전환
  - 뷰 내 단축키:
    - 카드 탐색: 화살표 키, Home/End, Page Up/Down
    - 카드 선택: Enter, Space, Shift+화살표(다중 선택)
    - 카드 작업: 편집(E), 삭제(Delete), 복제(D), 링크 복사(C)
    - 검색: 검색 시작(Ctrl/Cmd+F), 검색 필터 전환(Tab)
    - 정렬: 정렬 기준 변경(S), 정렬 방향 전환(R)
  - 접근성 기능:
    - 스크린 리더 호환성을 위한 ARIA 속성 지원
    - 키보드만으로 모든 기능 접근 가능
    - 단축키 도움말 오버레이(Shift+?)

다음은 태그별 프리셋 기능이 추가된 설명입니다.

6. 프리셋
Card Navigator는 이제 다양한 프리셋을 지원하여 설정을 저장하고 빠르게 전환할 수 있습니다. 이 기능은 노트를 보고 상호작용하는 방식을 더욱 유연하게 만들어 워크플로우를 개선합니다.
  -	사용자 정의 프리셋 생성: 현재 Card Navigator 설정을 이름이 지정된 프리셋으로 저장하여 나중에 사용할 수 있습니다.
  -	전역 프리셋: 모든 노트에 기본 적용되는 프리셋을 설정할 수 있습니다(폴더별 또는 태그별 프리셋으로 재정의되지 않는 한).
  -	폴더별 프리셋: 특정 폴더에 다른 프리셋을 할당하여 폴더 구조에 따라 맞춤형 뷰를 제공합니다.
  -	태그별 프리셋: 특정 태그가 포함된 노트에 프리셋을 적용하여 태그 기반 워크플로우를 지원합니다.
  -	프리셋 자동 적용: 폴더 간 이동 시, 또는 태그가 포함된 노트를 열 때 적절한 프리셋을 자동으로 적용합니다.
  -	프리셋 가져오기/내보내기: 프리셋을 파일로 가져오거나 내보내어 설정을 백업하거나 공유할 수 있습니다.
  -	프리셋 관리: 설정 패널에서 기존 프리셋을 편집, 복제 또는 삭제할 수 있습니다.

프리셋 사용 방법
  -	프리셋 생성:
    1.	Card Navigator 설정으로 이동
    2.	원하는 설정을 구성
    3.	프리셋 관리 섹션에서 + 버튼 클릭
    4.	프리셋 이름을 지정하고 선택적으로 설명 추가
  -	프리셋 적용:
    1.	전역 프리셋: 기본값으로 사용할 프리셋을 선택하여 모든 노트에 적용
    2.	폴더별 프리셋: 특정 폴더에 프리셋을 할당하여 폴더 이동 시 자동 적용
    3.	태그별 프리셋: 특정 태그를 포함한 노트에 프리셋을 할당하여 태그 기반 필터링 지원
  - 프리셋 자동 적용:
    1.	설정에서 "프리셋 자동 적용" 활성화
    2.	Card Navigator가 현재 폴더 또는 노트의 태그에 따라 적절한 프리셋으로 자동 전환
  -	프리셋 가져오기/내보내기:
    1.	프리셋 관리 섹션의 가져오기/내보내기 버튼 사용
  	2.	내보낸 프리셋은 JSON 파일로 저장되어 공유 및 백업 가능

프리셋을 활용하면 폴더 구조와 태그 시스템을 효과적으로 연계하여 Card Navigator의 동작을 조정할 수 있으며, 이를 통해 생산성과 노트 관리 경험을 더욱 향상시킬 수 있습니다.

7. 영어와 한국어 다국어 지원
Card Navigator는 이제 다음 언어를 지원합니다:
 - 영어
 - 한국어
플러그인은 지원되는 경우 자동으로 Obsidian 인터페이스 언어를 사용합니다.

8. 고급 검색 기능
Card Navigator는 강력한 검색 기능을 제공하여 카드 컬렉션 내에서 원하는 노트를 빠르게 찾을 수 있습니다:
 - 실시간 검색: 입력하는 즉시 결과가 필터링됩니다.
 - 다중 필드 검색: 파일 이름, 헤더, 내용 등 다양한 필드에서 검색할 수 있습니다.
 - 태그 기반 검색: 특정 태그가 포함된 노트만 필터링할 수 있습니다.
 - 정규식 지원: 복잡한 패턴 매칭을 위한 정규식 검색을 지원합니다.
 - 검색 기록: 최근 검색어를 저장하고 쉽게 다시 사용할 수 있습니다.
 - 검색 결과 하이라이트: 검색어와 일치하는 부분을 카드에서 강조 표시합니다.
 - 검색 단축키: Ctrl+F(Windows/Linux) 또는 Cmd+F(Mac)를 사용하여 검색 바에 빠르게 접근할 수 있습니다.
 - 검색 옵션 저장: 자주 사용하는 검색 설정을 프리셋의 일부로 저장할 수 있습니다.

9. 카드셋 관리
카드셋은 Card Navigator에서 표시되는 노트 파일들의 집합으로, 다양한 모드를 통해 유연하게 관리할 수 있습니다:
 - 활성 폴더 모드: 현재 활성화된 파일이 위치한 폴더의 모든 노트를 카드로 표시합니다. 사용자가 다른 폴더의 파일을 열면 Card Navigator는 자동으로 새로운 활성 폴더의 파일들을 표시하도록 업데이트됩니다. 이 모드는 현재 작업 중인 컨텍스트에 따라 관련 노트를 빠르게 탐색하고자 할 때 유용합니다.
 - 지정 폴더 모드: 사용자가 명시적으로 지정한 특정 폴더의 노트만 표시합니다. 활성 파일이 변경되어도 카드셋은 지정된 폴더의 파일들로 고정되어 있습니다. 이 모드는 특정 프로젝트나 주제에 관련된 노트들을 지속적으로 참조해야 할 때 유용합니다.
 - 볼트 전체 모드: Obsidian 볼트 내의 모든 노트 파일을 카드로 표시합니다. 이 모드는 전체 지식 베이스를 한눈에 살펴보거나, 폴더 구조에 관계없이 모든 노트에 접근하고자 할 때 유용합니다.
 - 검색 결과 모드: 검색 쿼리에 일치하는 노트 파일들만 카드로 표시합니다. 검색 결과는 사용자가 명시적으로 검색을 해제하거나 다른 카드셋 모드로 전환할 때까지 유지됩니다. 검색이 해제되면 이전에 설정된 카드셋 모드(활성 폴더, 지정 폴더, 볼트 전체 등)로 자동 복귀합니다.

카드셋 모드 간 전환:
 - 툴바의 드롭다운 메뉴를 통해 카드셋 모드를 빠르게 전환할 수 있습니다.
 - 각 카드셋 모드는 독립적인 정렬 및 필터링 설정을 유지합니다.
 - 프리셋에 카드셋 모드 설정을 포함시켜 특정 상황에 맞는 최적의 뷰를 빠르게 불러올 수 있습니다.

카드셋 자동 업데이트:
 - 활성 폴더 모드: 새 파일이 열릴 때마다 자동으로 업데이트됩니다.
 - 지정 폴더 모드: 지정된 폴더에 파일이 추가되거나 삭제될 때 자동으로 업데이트됩니다.
 - 볼트 전체 모드: 볼트에 파일이 추가되거나 삭제될 때 자동으로 업데이트됩니다.
 - 검색 결과 모드: 검색 쿼리가 변경될 때마다 실시간으로 업데이트됩니다.


10. 단축키 및 탐색
Card Navigator에는 효율적인 탐색 및 상호 작용을 위한 광범위한 키보드 단축키가 포함되어 있습니다.

사용자 지정 가능한 단축키
 - Obsidian 설정 내에서 모든 Card Navigator 관련 단축키를 구성합니다.
 - 전역 단축키와 보기별 단축키를 구분합니다.
 - 단축키 충돌을 감지하고 알림을 받습니다.

전역 단축키
 - Card Navigator 보기 전환: Card Navigator를 열거나 닫습니다.
 - 현재 노트를 카드로 표시: 현재 노트를 Card Navigator에 빠르게 추가합니다.
 - 빠른 검색: 검색을 열고 입력을 시작합니다.
 - 사전 설정 간 전환: 저장된 구성 간에 빠르게 전환합니다.

보기 내 단축키
 - 카드 탐색:
   - 화살표 키 → 카드 간에 이동합니다.
   - Home/End → 첫 번째/마지막 카드로 이동합니다.
   - Page Up/Page Down → 카드를 스크롤합니다.
 - 카드 선택:
   - Enter → 선택한 카드를 엽니다.
   - Space → 카드를 미리 봅니다.
   - Shift + 화살표 → 다중 카드 선택.
 - 카드 동작:
   - E → 메모 편집.
   - Delete → 카드 제거.
   - D → 메모 복제.
   - C → 카드 링크 복사.
 - 검색 및 정렬:
   - Ctrl/Cmd + F → 검색 열기.
   - Tab → 검색 필터 토글.
   - S → 정렬 방법 변경.
   - R → 역순 정렬.

접근성 기능
 - ARIA 지원은 화면 판독기와의 호환성을 보장합니다.
 - 전체 키보드 탐색을 통해 사용자는 마우스 없이 상호 작용할 수 있습니다.
 - 키보드 단축키 오버레이(Shift + ?)는 빠른 참조 가이드를 제공합니다.

폴더 및 파일 구조
Card Navigator/
├── src/
│   ├── core/
│   │   ├── interfaces/
│   │   │   ├── manager/
│   │   │   │   ├── ICardContainerManager.ts # 카드 컨테이너 관리자 인터페이스 정의
│   │   │   │   ├── ICardManager.ts          # 카드 관리자 인터페이스 정의
│   │   │   │   ├── ICardSetManager.ts       # 카드셋 관리자 인터페이스 정의
│   │   │   │   ├── ICardSetProvider.ts      # 카드셋 제공자 인터페이스 정의
│   │   │   │   ├── IEventManager.ts         # 이벤트 관리자 인터페이스 정의
│   │   │   │   ├── IFolderPresetManager.ts  # 폴더 프리셋 관리자 인터페이스 정의
│   │   │   │   ├── ILayoutManager.ts        # 레이아웃 관리자 인터페이스 정의
│   │   │   │   ├── IPresetManager.ts        # 프리셋 관리자 인터페이스 정의
│   │   │   │   ├── IResizeManager.ts        # 리사이즈 관리자 인터페이스 정의
│   │   │   │   ├── ITagPresetManager.ts     # 태그 프리셋 관리자 인터페이스 정의
│   │   │   │   └── ISettingsManager.ts      # 설정 관리자 인터페이스 정의
│   │   │   └── service/
│   │   │       ├── ICardInteractionService.ts # 카드 상호작용 서비스 인터페이스 정의
│   │   │       ├── ICardRenderService.ts    # 카드 렌더링 서비스 인터페이스 정의
│   │   │       ├── ICardService.ts          # 카드 서비스 인터페이스 정의
│   │   │       ├── ICardSetService.ts       # 카드셋 서비스 인터페이스 정의
│   │   │       └── ISearchService.ts        # 검색 서비스 인터페이스 정의
│   │   ├── types/
│   │   │   ├── card.types.ts            # 카드 관련 타입 정의
│   │   │   ├── common.types.ts          # 공통 타입 정의
│   │   │   ├── event.types.ts           # 이벤트 관련 타입 정의
│   │   │   ├── layout.types.ts          # 레이아웃 관련 타입 정의
│   │   │   ├── preset.types.ts          # 프리셋 관련 타입 정의
│   │   │   ├── search.types.ts          # 검색 관련 타입 정의
│   │   │   ├── settings.types.ts        # 설정 관련 타입 정의
│   │   │   └── cardset.types.ts         # 카드셋 관련 타입 정의
│   │   ├── models/
│   │   │   ├── Card.ts                  # 카드 모델 클래스
│   │   │   ├── CardPosition.ts          # 카드 위치 모델 클래스
│   │   │   ├── Preset.ts                # 프리셋 모델 클래스
│   │   │   ├── SearchResult.ts          # 검색 결과 모델 클래스
│   │   │   └── CardSet.ts               # 카드셋 모델 클래스
│   │   └── constants/
│   │       ├── settings.constants.ts    # 설정 관련 상수
│   │       ├── layout.constants.ts      # 레이아웃 관련 상수
│   │       ├── search.constants.ts      # 검색 관련 상수
│   │       ├── keyboard.constants.ts    # 키보드 단축키 관련 상수
│   │       └── error.constants.ts       # 오류 관련 상수
│   │
│   ├── managers/
│   │   ├── card/
│   │   │   ├── CardManager.ts           # 개별 카드 관리 클래스
│   │   │   └── CardContainerManager.ts  # 카드 컨테이너 관리 클래스
│   │   ├── event/
│   │   │   └── EventManager.ts          # 이벤트 관리 클래스
│   │   ├── layout/
│   │   │   ├── LayoutManager.ts         # 레이아웃 관리 클래스
│   │   │   ├── LayoutStyleManager.ts    # 레이아웃 스타일 관리 클래스
│   │   │   └── ResizeManager.ts         # 크기 조정 관리 클래스
│   │   ├── preset/
│   │   │   ├── PresetManager.ts         # 프리셋 관리 클래스
│   │   │   ├── FolderPresetManager.ts   # 폴더별 프리셋 관리 클래스
│   │   │   └── TagPresetManager.ts      # 태그별 프리셋 관리 클래스
│   │   ├── settings/
│   │   │   ├── SettingsManager.ts       # 설정 관리 클래스
│   │   │   └── SettingsMigrationManager.ts # 설정 마이그레이션 관리 클래스
│   │   └── cardset/
│   │       ├── AbstractCardSetProvider.ts # 추상 카드셋 제공자
│   │       ├── CardSetManager.ts        # 카드셋 관리 클래스
│   │       ├── ActiveFolderCardSetProvider.ts # 활성 폴더 카드셋 제공자
│   │       ├── CardSetProviderFactory.ts # 카드셋 제공자 팩토리
│   │       ├── CardSetProviderRegistry.ts # 카드셋 제공자 레지스트리
│   │       ├── CardSetStateManager.ts # 카드셋 상태 관리 클래스
│   │       ├── SelectedFolderCardSetProvider.ts # 선택 폴더 카드셋 제공자
│   │       ├── VaultCardSetProvider.ts  # 볼트 전체 카드셋 제공자
│   │       └── SearchResultCardSetProvider.ts # 검색 결과 카드셋 제공자
│   │
│   ├── services/
│   │   ├── card/
│   │   │   ├── CardService.ts           # 카드 서비스 클래스
│   │   │   ├── CardRenderService.ts     # 카드 렌더링 서비스 클래스
│   │   │   └── CardInteractionService.ts # 카드 상호작용 서비스 클래스
│   │   ├── search/
│   │   │   ├── SearchService.ts         # 검색 서비스 클래스
│   │   │   ├── SearchHistoryService.ts  # 검색 기록 서비스 클래스
│   │   │   └── SearchSuggestionService.ts # 검색 제안 서비스 클래스
│   │   ├── file/
│   │   │   ├── FileService.ts           # 파일 서비스 클래스
│   │   │   ├── MetadataService.ts       # 메타데이터 서비스 클래스
│   │   │   └── TagService.ts            # 태그 서비스 클래스
│   │   ├── layout/
│   │   │   ├── LayoutService.ts         # 레이아웃 서비스 클래스
│   │   │   ├── MasonryLayoutService.ts  # 메이슨리 레이아웃 서비스 클래스
│   │   │   └── ScrollService.ts         # 스크롤 서비스 클래스
│   │   └── cardset/
│   │       ├── CardSetService.ts        # 카드셋 서비스 클래스
│   │       └── CardSetFilterService.ts  # 카드셋 필터링 서비스 클래스
│   │
│   ├── ui/
│   │   ├── components/
│   │   │   ├── card/
│   │   │   │   ├── Card.ts              # 카드 컴포넌트
│   │   │   │   ├── CardHeader.ts        # 카드 헤더 컴포넌트
│   │   │   │   ├── CardBody.ts          # 카드 본문 컴포넌트
│   │   │   │   ├── CardFooter.ts        # 카드 푸터 컴포넌트
│   │   │   │   └── CardContextMenu.ts   # 카드 컨텍스트 메뉴 컴포넌트
│   │   │   ├── toolbar/
│   │   │   │   ├── Toolbar.ts           # 툴바 컴포넌트
│   │   │   │   ├── ToolbarButton.ts     # 툴바 버튼 컴포넌트
│   │   │   │   ├── SortMenu.ts          # 정렬 메뉴 컴포넌트
│   │   │   │   ├── CardSetMenu.ts       # 카드셋 메뉴 컴포넌트
│   │   │   │   └── PresetMenu.ts        # 프리셋 메뉴 컴포넌트
│   │   │   ├── settings/
│   │   │   │   ├── SettingsTab.ts       # 설정 탭 컴포넌트
│   │   │   │   ├── CardContentSettings.ts # 카드 내용 설정 컴포넌트
│   │   │   │   ├── CardStyleSettings.ts # 카드 스타일 설정 컴포넌트
│   │   │   │   ├── LayoutSettings.ts    # 레이아웃 설정 컴포넌트
│   │   │   │   ├── PresetSettings.ts    # 프리셋 설정 컴포넌트
│   │   │   │   └── KeyboardSettings.ts  # 키보드 설정 컴포넌트
│   │   │   └── search/
│   │   │       ├── SearchBar.ts         # 검색 바 컴포넌트
│   │   │       ├── SearchOptions.ts     # 검색 옵션 컴포넌트
│   │   │       └── SearchSuggestions.ts # 검색 제안 컴포넌트
│   │   ├── views/
│   │   │   ├── CardNavigatorView.ts     # 카드 네비게이터 뷰
│   │   │   └── CardView.ts              # 카드 뷰
│   │   └── modals/
│   │       ├── PresetModal.ts           # 프리셋 모달
│   │       ├── PresetTargetModal.ts     # 프리셋 대상 모달
│   │       ├── ConfirmModal.ts          # 확인 모달
│   │       ├── ImportExportModal.ts     # 가져오기/내보내기 모달
│   │       └── KeyboardHelpModal.ts     # 키보드 도움말 모달
│   │
│   ├── styles/
│   │   ├── components/
│   │   │   ├── card.styles.ts           # 카드 스타일 상수
│   │   │   ├── layout.styles.ts         # 레이아웃 스타일 상수
│   │   │   ├── toolbar.styles.ts        # 툴바 스타일 상수
│   │   │   ├── search.styles.ts         # 검색 스타일 상수
│   │   │   └── settings.styles.ts       # 설정 스타일 상수
│   │   └── variables.ts                 # 전역 스타일 변수 (옵시디언 CSS 변수 참조)
│   │
│   ├── i18n/
│   │   ├── translations.ts              # 번역 유틸리티 및 인터페이스
│   │   ├── en.ts                        # 영어 번역 리소스
│   │   └── ko.ts                        # 한국어 번역 리소스
│   │
│   ├── utils/
│   │   ├── error/
│   │   │   ├── ErrorHandler.ts          # 오류 처리 싱글톤 클래스
│   │   │   └── CardNavigatorError.ts    # 커스텀 오류 클래스
│   │   ├── log/
│   │   │   └── Log.ts                   # 로깅 싱글톤 클래스
│   │   └── helpers/
│   │       ├── dom.helper.ts            # DOM 조작 헬퍼 함수
│   │       ├── file.helper.ts           # 파일 조작 헬퍼 함수
│   │       ├── string.helper.ts         # 문자열 처리 헬퍼 함수
│   │       ├── date.helper.ts           # 날짜 처리 헬퍼 함수
│   │       └── performance.helper.ts    # 성능 측정 헬퍼 함수
│   │
│   └── main.ts                          # 플러그인 메인 엔트리 포인트
│
└── styles.css                           # 전역 CSS 스타일
